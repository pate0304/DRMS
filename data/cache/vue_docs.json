{
  "library": "vue",
  "base_url": "https://vuejs.org/guide/",
  "pages": [
    {
      "url": "https://vuejs.org/guide/",
      "title": "Introduction | Vue.js",
      "content": "Introduction You are reading the documentation for Vue 3!Vue 2 support has ended on Dec 31, 2023. Learn more about Vue 2 EOL.Upgrading from Vue 2? Check out the Migration Guide.Learn Vue with video tutorials on VueMastery.comWhat is Vue? Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }).mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } }).mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as *.vue files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.API Styles Vue components can be authored in two different API styles: Options API and Composition API.Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted. Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this`. data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. methods: { increment() { this.count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle. // This function will be called when the component is mounted. mounted() { console.log(`The initial count is {this.count}.`) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with script setup. The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in script setup are directly usable in the template.Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count.value++ } // lifecycle hooks onMounted(() = { console.log(`The initial count is {count.value}.`) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose? Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.Still Got Questions? Check out our FAQ.Pick Your Learning Path Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!Try the TutorialFor those who prefer learning things hands-on.Read the GuideThe guide walks you through every aspect of the framework in full detail.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>",
        "<script setup>",
        "<script setup>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      ],
      "chunks": [
        {
          "content": "Introduction You are reading the documentation for Vue 3 Vue 2 support has ended on Dec 31, 2023 Learn more about Vue 2 EOL Upgrading from Vue 2 Check out the Migration Guide Learn Vue with video tutorials on VueMastery comWhat is Vue Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }) mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } })",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen You may already have questions - don't worry",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "We will cover every little detail in the rest of the documentation For now, please read along so you can have a high-level understanding of what Vue offers PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed Prior experience with other frameworks helps, but is not required The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development But the web is extremely diverse - the things we build on the web may vary drastically in form and scale With that in mind, Vue is designed to be flexible and incrementally adoptable",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as * vue files, abbreviated as SFC) A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you API Styles Vue components can be authored in two different API styles: Options API and Composition API Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this` data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates // They can be bound as event handlers in templates methods: { increment() { this count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "// This function will be called when the component is mounted mounted() { console log(`The initial count is {this count} `) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions In SFCs, Composition API is typically used with script setup",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate For example, imports and top-level variables / functions declared in script setup are directly usable in the template",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count value++ } // lifecycle hooks onMounted(() = { console log(`The initial count is {count value} `) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "Both API styles are fully capable of covering common use cases They are different interfaces powered by the exact same underlying system In fact, the Options API is implemented on top of the Composition API The fundamental concepts and knowledge about Vue are shared across the two styles The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively In return, its flexibility enables more powerful patterns for organizing and reusing logic",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you Again, most of the core concepts are shared between the two styles You can always pick up the other style later",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e g progressive enhancement Go with Composition API + Single-File Components if you plan to build full applications with Vue You don't have to commit to only one style during the learning phase",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar Still Got Questions Check out our FAQ Pick Your Learning Path Different developers have different learning styles Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "Try the TutorialFor those who prefer learning things hands-on Read the GuideThe guide walks you through every aspect of the framework in full detail Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/",
          "library": "vue",
          "chunk_id": "vue_20"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/#VPContent",
      "title": "Introduction | Vue.js",
      "content": "Introduction You are reading the documentation for Vue 3!Vue 2 support has ended on Dec 31, 2023. Learn more about Vue 2 EOL.Upgrading from Vue 2? Check out the Migration Guide.Learn Vue with video tutorials on VueMastery.comWhat is Vue? Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }).mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } }).mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as *.vue files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.API Styles Vue components can be authored in two different API styles: Options API and Composition API.Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted. Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this`. data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. methods: { increment() { this.count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle. // This function will be called when the component is mounted. mounted() { console.log(`The initial count is {this.count}.`) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with script setup. The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in script setup are directly usable in the template.Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count.value++ } // lifecycle hooks onMounted(() = { console.log(`The initial count is {count.value}.`) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose? Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.Still Got Questions? Check out our FAQ.Pick Your Learning Path Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!Try the TutorialFor those who prefer learning things hands-on.Read the GuideThe guide walks you through every aspect of the framework in full detail.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>",
        "<script setup>",
        "<script setup>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      ],
      "chunks": [
        {
          "content": "Introduction You are reading the documentation for Vue 3 Vue 2 support has ended on Dec 31, 2023 Learn more about Vue 2 EOL Upgrading from Vue 2 Check out the Migration Guide Learn Vue with video tutorials on VueMastery comWhat is Vue Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }) mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } })",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen You may already have questions - don't worry",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "We will cover every little detail in the rest of the documentation For now, please read along so you can have a high-level understanding of what Vue offers PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed Prior experience with other frameworks helps, but is not required The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development But the web is extremely diverse - the things we build on the web may vary drastically in form and scale With that in mind, Vue is designed to be flexible and incrementally adoptable",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as * vue files, abbreviated as SFC) A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you API Styles Vue components can be authored in two different API styles: Options API and Composition API Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this` data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates // They can be bound as event handlers in templates methods: { increment() { this count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "// This function will be called when the component is mounted mounted() { console log(`The initial count is {this count} `) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions In SFCs, Composition API is typically used with script setup",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate For example, imports and top-level variables / functions declared in script setup are directly usable in the template",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count value++ } // lifecycle hooks onMounted(() = { console log(`The initial count is {count value} `) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "Both API styles are fully capable of covering common use cases They are different interfaces powered by the exact same underlying system In fact, the Options API is implemented on top of the Composition API The fundamental concepts and knowledge about Vue are shared across the two styles The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively In return, its flexibility enables more powerful patterns for organizing and reusing logic",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you Again, most of the core concepts are shared between the two styles You can always pick up the other style later",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e g progressive enhancement Go with Composition API + Single-File Components if you plan to build full applications with Vue You don't have to commit to only one style during the learning phase",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar Still Got Questions Check out our FAQ Pick Your Learning Path Different developers have different learning styles Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "Try the TutorialFor those who prefer learning things hands-on Read the GuideThe guide walks you through every aspect of the framework in full detail Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/#VPContent",
          "library": "vue",
          "chunk_id": "vue_20"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/introduction",
      "title": "Introduction | Vue.js",
      "content": "Introduction You are reading the documentation for Vue 3!Vue 2 support has ended on Dec 31, 2023. Learn more about Vue 2 EOL.Upgrading from Vue 2? Check out the Migration Guide.Learn Vue with video tutorials on VueMastery.comWhat is Vue? Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }).mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } }).mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as *.vue files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.API Styles Vue components can be authored in two different API styles: Options API and Composition API.Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted. Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this`. data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. methods: { increment() { this.count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle. // This function will be called when the component is mounted. mounted() { console.log(`The initial count is {this.count}.`) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with script setup. The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in script setup are directly usable in the template.Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count.value++ } // lifecycle hooks onMounted(() = { console.log(`The initial count is {count.value}.`) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose? Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.Still Got Questions? Check out our FAQ.Pick Your Learning Path Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!Try the TutorialFor those who prefer learning things hands-on.Read the GuideThe guide walks you through every aspect of the framework in full detail.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>",
        "<script setup>",
        "<script setup>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      ],
      "chunks": [
        {
          "content": "Introduction You are reading the documentation for Vue 3 Vue 2 support has ended on Dec 31, 2023 Learn more about Vue 2 EOL Upgrading from Vue 2 Check out the Migration Guide Learn Vue with video tutorials on VueMastery comWhat is Vue Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }) mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } })",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen You may already have questions - don't worry",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "We will cover every little detail in the rest of the documentation For now, please read along so you can have a high-level understanding of what Vue offers PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed Prior experience with other frameworks helps, but is not required The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development But the web is extremely diverse - the things we build on the web may vary drastically in form and scale With that in mind, Vue is designed to be flexible and incrementally adoptable",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as * vue files, abbreviated as SFC) A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you API Styles Vue components can be authored in two different API styles: Options API and Composition API Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this` data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates // They can be bound as event handlers in templates methods: { increment() { this count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "// This function will be called when the component is mounted mounted() { console log(`The initial count is {this count} `) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions In SFCs, Composition API is typically used with script setup",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate For example, imports and top-level variables / functions declared in script setup are directly usable in the template",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count value++ } // lifecycle hooks onMounted(() = { console log(`The initial count is {count value} `) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "Both API styles are fully capable of covering common use cases They are different interfaces powered by the exact same underlying system In fact, the Options API is implemented on top of the Composition API The fundamental concepts and knowledge about Vue are shared across the two styles The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively In return, its flexibility enables more powerful patterns for organizing and reusing logic",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you Again, most of the core concepts are shared between the two styles You can always pick up the other style later",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e g progressive enhancement Go with Composition API + Single-File Components if you plan to build full applications with Vue You don't have to commit to only one style during the learning phase",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar Still Got Questions Check out our FAQ Pick Your Learning Path Different developers have different learning styles Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "Try the TutorialFor those who prefer learning things hands-on Read the GuideThe guide walks you through every aspect of the framework in full detail Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/introduction",
          "library": "vue",
          "chunk_id": "vue_20"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/quick-start",
      "title": "Quick Start | Vue.js",
      "content": "Quick Start Try Vue Online To quickly get a taste of Vue, you can try it directly in our Playground.If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point.If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz.To get a walkthrough of the recommended setup, watch this interactive Scrimba tutorial that shows you how to run, edit, and deploy your first Vue app.Creating a Vue Application PrerequisitesFamiliarity with the command lineInstall Node.js version 18.3 or higherIn this section we will introduce how to scaffold a Vue Single Page Application on your local machine. The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs).Make sure you have an up-to-date version of Node.js installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the  sign):npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn (v1+)  yarn create vue  For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4.11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support: Project name:  your-project-name  Add TypeScript?  No / Yes  Add JSX Support?  No / Yes  Add Vue Router for Single Page Application development?  No / Yes  Add Pinia for state management?  No / Yes  Add Vitest for Unit testing?  No / Yes  Add an End-to-End Testing Solution?  No / Cypress / Nightwatch / Playwright  Add ESLint for code quality?  No / Yes  Add Prettier for code formatting?  No / Yes  Add Vue DevTools 7 extension for debugging? (experimental)  No / Yes Scaffolding project in ./your-project-name... Done.If you are unsure about an option, simply choose No by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:npmpnpmyarnbunsh cd your-project-name  npm install  npm run devsh cd your-project-name  pnpm install  pnpm run devsh cd your-project-name  yarn  yarn devsh cd your-project-name  bun install  bun run devYou should now have your first Vue project running! Note that the example components in the generated project are written using the Composition API and script setup, rather than the Options API. Here are some additional tips:The recommended IDE setup is Visual Studio Code + Vue - Official extension. If you use other editors, check out the IDE support section.More tooling details, including integration with backend frameworks, are discussed in the Tooling Guide.To learn more about the underlying build tool Vite, check out the Vite docs.If you choose to use TypeScript, check out the TypeScript Usage Guide.When you are ready to ship your app to production, run the following:npmpnpmyarnbunsh npm run buildsh pnpm run buildsh yarn buildsh bun run buildThis will create a production-ready build of your app in the project's ./dist directory. Check out the Production Deployment Guide to learn more about shipping your app to production.Next Steps Using Vue from CDN You can use Vue directly from a CDN via a script tag:htmlscript src=\"https://unpkg.com/vue3/dist/vue.global.js\"/scriptHere we are using unpkg, but you can also use any CDN that serves npm packages, for example jsdelivr or cdnjs. Of course, you can also download this file and serve it yourself.When using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax.Using the Global Build The above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global Vue object. Here is a full example using the global build:htmlscript src=\"https://unpkg.com/vue3/dist/vue.global.js\"/script div id=\"app\"{{ message }}/div script const { createApp } = Vue createApp({ data() { return { message: 'Hello Vue!' } } }).mount('app') /scriptCodePen Demo htmlscript src=\"https://unpkg.com/vue3/dist/vue.global.js\"/script div id=\"app\"{{ message }}/div script const { createApp, ref } = Vue createApp({ setup() { const message = ref('Hello vue!') return { message } } }).mount('app') /scriptCodePen Demo TIPMany of the examples for Composition API throughout the guide will be using the script setup syntax, which requires build tools. If you intend to use Composition API without a build step, consult the usage of the setup() option.Using the ES Module Build Throughout the rest of the documentation, we will be primarily using ES modules syntax. Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules like this:htmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'https://unpkg.com/vue3/dist/vue.esm-browser.js' createApp({ data() { return { message: 'Hello Vue!' } } }).mount('app') /scripthtmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'https://unpkg.com/vue3/dist/vue.esm-browser.js' createApp({ setup() { const message = ref('Hello Vue!') return { message } } }).mount('app') /scriptNotice that we are using script type=\"module\", and the imported CDN URL is pointing to the ES modules build of Vue instead.CodePen Demo CodePen Demo Enabling Import maps In the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:jsimport { createApp } from 'vue'We can teach the browser where to locate the vue import by using Import Maps:htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg.com/vue3/dist/vue.esm-browser.js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'vue' createApp({ data() { return { message: 'Hello Vue!' } } }).mount('app') /scriptCodePen Demo htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg.com/vue3/dist/vue.esm-browser.js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'vue' createApp({ setup() { const message = ref('Hello Vue!') return { message } } }).mount('app') /scriptCodePen Demo You can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use.Import Maps Browser SupportImport Maps is a relatively new browser feature. Make sure to use a browser within its support range. In particular, it is only supported in Safari 16.4+.Notes on Production UseThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide.While it is possible to use Vue without a build system, an alternative approach to consider is using vuejs/petite-vue that could better suit the context where jquery/jquery (in the past) or alpinejs/alpine (in the present) might be used instead.Splitting Up the Modules As we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example:html!-- index.html -- div id=\"app\"/div script type=\"module\" import { createApp } from 'vue' import MyComponent from './my-component.js' createApp(MyComponent).mount('app') /scriptjs// my-component.js export default { data() { return { count: 0 } }, template: `divCount is: {{ count }}/div` }js// my-component.js import { ref } from 'vue' export default { setup() { const count = ref(0) return { count } }, template: `divCount is: {{ count }}/div` }If you directly open the above index.html in your browser, you will find that it throws an error because ES modules cannot work over the file:// protocol, which is the protocol the browser uses when you open a local file.Due to security reasons, ES modules can only work over the http:// protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve the index.html over the http:// protocol, with a local HTTP server.To start a local HTTP server, first make sure you have Node.js installed, then run npx serve from the command line in the same directory where your HTML file is. You can also use any other HTTP server that can serve static files with the correct MIME types.You may have noticed that the imported component's template is inlined as a JavaScript string. If you are using VS Code, you can install the es6-string-html extension and prefix the strings with a /*html*/ comment to get syntax highlighting for them.Next Steps If you skipped the Introduction, we strongly recommend reading it before moving on to the rest of the documentation.Continue with the GuideThe guide walks you through every aspect of the framework in full detail.Try the TutorialFor those who prefer learning things hands-on.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "$ npm create vue@latest",
        "$ npm create vue@latest",
        "$ pnpm create vue@latest",
        "$ pnpm create vue@latest",
        "# For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "# For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "$ bun create vue@latest",
        "$ bun create vue@latest",
        "\u2714 Project name: \u2026 <your-project-name>\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u2026 No / Cypress / Nightwatch / Playwright\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\u2714 Add Prettier for code formatting? \u2026 No / Yes\n\u2714 Add Vue DevTools 7 extension for debugging? (experimental) \u2026 No / Yes\n\nScaffolding project in ./<your-project-name>...\nDone.",
        "\u2714 Project name: \u2026 <your-project-name>\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u2026 No / Cypress / Nightwatch / Playwright\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\u2714 Add Prettier for code formatting? \u2026 No / Yes\n\u2714 Add Vue DevTools 7 extension for debugging? (experimental) \u2026 No / Yes\n\nScaffolding project in ./<your-project-name>...\nDone.",
        "$ cd <your-project-name>\n$ npm install\n$ npm run dev",
        "$ cd <your-project-name>\n$ npm install\n$ npm run dev",
        "$ cd <your-project-name>\n$ pnpm install\n$ pnpm run dev",
        "$ cd <your-project-name>\n$ pnpm install\n$ pnpm run dev",
        "$ cd <your-project-name>\n$ yarn\n$ yarn dev",
        "$ cd <your-project-name>\n$ yarn\n$ yarn dev",
        "$ cd <your-project-name>\n$ bun install\n$ bun run dev",
        "$ cd <your-project-name>\n$ bun install\n$ bun run dev",
        "<script setup>",
        "$ npm run build",
        "$ npm run build",
        "$ pnpm run build",
        "$ pnpm run build",
        "$ yarn build",
        "$ yarn build",
        "$ bun run build",
        "$ bun run build",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script setup>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"module\">",
        "import { createApp } from 'vue'",
        "import { createApp } from 'vue'",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "vuejs/petite-vue",
        "jquery/jquery",
        "alpinejs/alpine",
        "<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n  import MyComponent from './my-component.js'\n\n  createApp(MyComponent).mount('#app')\n</script>",
        "<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n  import MyComponent from './my-component.js'\n\n  createApp(MyComponent).mount('#app')\n</script>",
        "// my-component.js\nexport default {\n  data() {\n    return { count: 0 }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}",
        "// my-component.js\nexport default {\n  data() {\n    return { count: 0 }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}",
        "// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}",
        "// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}"
      ],
      "chunks": [
        {
          "content": "Quick Start Try Vue Online To quickly get a taste of Vue, you can try it directly in our Playground If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point If you are already familiar with Node js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "To get a walkthrough of the recommended setup, watch this interactive Scrimba tutorial that shows you how to run, edit, and deploy your first Vue app Creating a Vue Application PrerequisitesFamiliarity with the command lineInstall Node js version 18 3 or higherIn this section we will introduce how to scaffold a Vue Single Page Application on your local machine The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs)",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "Make sure you have an up-to-date version of Node js installed and your current working directory is the one where you intend to create a project Run the following command in your command line (without the  sign):npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn (v1+)  yarn create vue  For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool You will be presented with prompts for several optional features such as TypeScript and testing support: Project name:  your-project-name  Add TypeScript No / Yes  Add JSX Support No / Yes  Add Vue Router for Single Page Application development No / Yes  Add Pinia for state management No / Yes  Add Vitest for Unit testing",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "No / Yes  Add an End-to-End Testing Solution No / Cypress / Nightwatch / Playwright  Add ESLint for code quality No / Yes  Add Prettier for code formatting No / Yes  Add Vue DevTools 7 extension for debugging (experimental)  No / Yes Scaffolding project in /your-project-name Done If you are unsure about an option, simply choose No by hitting enter for now",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Once the project is created, follow the instructions to install dependencies and start the dev server:npmpnpmyarnbunsh cd your-project-name  npm install  npm run devsh cd your-project-name  pnpm install  pnpm run devsh cd your-project-name  yarn  yarn devsh cd your-project-name  bun install  bun run devYou should now have your first Vue project running Note that the example components in the generated project are written using the Composition API and script setup, rather than the Options API",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "Here are some additional tips:The recommended IDE setup is Visual Studio Code + Vue - Official extension If you use other editors, check out the IDE support section More tooling details, including integration with backend frameworks, are discussed in the Tooling Guide To learn more about the underlying build tool Vite, check out the Vite docs If you choose to use TypeScript, check out the TypeScript Usage Guide",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "When you are ready to ship your app to production, run the following:npmpnpmyarnbunsh npm run buildsh pnpm run buildsh yarn buildsh bun run buildThis will create a production-ready build of your app in the project's /dist directory Check out the Production Deployment Guide to learn more about shipping your app to production Next Steps Using Vue from CDN You can use Vue directly from a CDN via a script tag:htmlscript src=\"https://unpkg com/vue3/dist/vue global",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "js\"/scriptHere we are using unpkg, but you can also use any CDN that serves npm packages, for example jsdelivr or cdnjs Of course, you can also download this file and serve it yourself When using Vue from a CDN, there is no \"build step\" involved This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework However, you won't be able to use the Single-File Component (SFC) syntax",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Using the Global Build The above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global Vue object Here is a full example using the global build:htmlscript src=\"https://unpkg com/vue3/dist/vue global js\"/script div id=\"app\"{{ message }}/div script const { createApp } = Vue createApp({ data() { return { message: 'Hello Vue ' } } }) mount('app') /scriptCodePen Demo htmlscript src=\"https://unpkg com/vue3/dist/vue global",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "js\"/script div id=\"app\"{{ message }}/div script const { createApp, ref } = Vue createApp({ setup() { const message = ref('Hello vue ') return { message } } }) mount('app') /scriptCodePen Demo TIPMany of the examples for Composition API throughout the guide will be using the script setup syntax, which requires build tools If you intend to use Composition API without a build step, consult the usage of the setup() option",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Using the ES Module Build Throughout the rest of the documentation, we will be primarily using ES modules syntax Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules like this:htmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'https://unpkg com/vue3/dist/vue esm-browser js' createApp({ data() { return { message: 'Hello Vue ' } } })",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "mount('app') /scripthtmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'https://unpkg com/vue3/dist/vue esm-browser js' createApp({ setup() { const message = ref('Hello Vue ') return { message } } }) mount('app') /scriptNotice that we are using script type=\"module\", and the imported CDN URL is pointing to the ES modules build of Vue instead",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "CodePen Demo CodePen Demo Enabling Import maps In the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:jsimport { createApp } from 'vue'We can teach the browser where to locate the vue import by using Import Maps:htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg com/vue3/dist/vue esm-browser",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'vue' createApp({ data() { return { message: 'Hello Vue ' } } }) mount('app') /scriptCodePen Demo htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg com/vue3/dist/vue esm-browser js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'vue' createApp({ setup() { const message = ref('Hello Vue ') return { message } } })",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "mount('app') /scriptCodePen Demo You can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use Import Maps Browser SupportImport Maps is a relatively new browser feature Make sure to use a browser within its support range In particular, it is only supported in Safari 16 4+",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "Notes on Production UseThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide While it is possible to use Vue without a build system, an alternative approach to consider is using vuejs/petite-vue that could better suit the context where jquery/jquery (in the past) or alpinejs/alpine (in the present) might be used instead",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "Splitting Up the Modules As we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage For example:html -- index html -- div id=\"app\"/div script type=\"module\" import { createApp } from 'vue' import MyComponent from ' /my-component js' createApp(MyComponent) mount('app') /scriptjs// my-component js export default { data() { return { count: 0 } }, template: `divCount is: {{ count }}/div` }js// my-component",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "js import { ref } from 'vue' export default { setup() { const count = ref(0) return { count } }, template: `divCount is: {{ count }}/div` }If you directly open the above index html in your browser, you will find that it throws an error because ES modules cannot work over the file:// protocol, which is the protocol the browser uses when you open a local file Due to security reasons, ES modules can only work over the http:// protocol, which is what the browsers use when opening pages on the web",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "In order for ES modules to work on our local machine, we need to serve the index html over the http:// protocol, with a local HTTP server To start a local HTTP server, first make sure you have Node js installed, then run npx serve from the command line in the same directory where your HTML file is You can also use any other HTTP server that can serve static files with the correct MIME types You may have noticed that the imported component's template is inlined as a JavaScript string",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "If you are using VS Code, you can install the es6-string-html extension and prefix the strings with a /*html*/ comment to get syntax highlighting for them Next Steps If you skipped the Introduction, we strongly recommend reading it before moving on to the rest of the documentation Continue with the GuideThe guide walks you through every aspect of the framework in full detail Try the TutorialFor those who prefer learning things hands-on",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_20"
        },
        {
          "content": "Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/quick-start",
          "library": "vue",
          "chunk_id": "vue_21"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/error-reference/",
      "title": "Production Error Code Reference | Vue.js",
      "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app.config.errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings.CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages.CodeMessage0Illegal comment.1CDATA section is allowed only in XML context.2Duplicate attribute.3End tag cannot have attributes.4Illegal '/' in tags.5Unexpected EOF in tag.6Unexpected EOF in CDATA section.7Unexpected EOF in comment.8Unexpected EOF in script.9Unexpected EOF in tag.10Incorrectly closed comment.11Incorrectly opened comment.12Illegal tag name. Use 'lt;' to print ''.13Attribute value was expected.14End tag name was expected.15Whitespace was expected.16Unexpected '!--' in comment.17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C ().18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`).19Attribute name cannot start with '='.20Unexpected null character.21'?' is allowed only in XML context.22Illegal '/' in tags.23Invalid end tag.24Element is missing end tag.25Interpolation end sign was not found.26Legal directive name was expected.27End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.28v-if/v-else-if is missing expression.29v-if/else branches must use unique keys.30v-else/v-else-if has no adjacent v-if or v-else-if.31v-for is missing expression.32v-for has invalid expression.33template v-for key should be placed on the template tag.34v-bind is missing expression.35v-on is missing expression.36Unexpected custom directive on slot outlet.37Mixed v-slot usage on both the component and nested template. When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity.38Duplicate slot names found. 39Extraneous children found when component already has explicitly named default slot. These children will be ignored.40v-slot can only be used on components or template tags.41v-model is missing expression.42v-model value must be a valid JavaScript member expression.43v-model cannot be used on v-for or v-slot scope variables because they are not writable.44v-model cannot be used on a prop, because local prop bindings are not writable. Use a v-bind binding combined with a v-on listener that emits update:x event instead.45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component.47\"prefixIdentifiers\" option is not supported in this build of compiler.48ES module mode is not supported in this build of compiler.49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.50\"scopeId\" option is only supported in module mode.51vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, vnode-mounted should be changed to vue:mounted. vnode-* hooks support has been removed in 3.4.52v-bind with same-name shorthand only allows static argument.53v-html is missing expression.54v-html will override element children.55v-text is missing expression.56v-text will override element children.57v-model can only be used on input, textarea and select elements.58v-model argument is not supported on plain elements.59v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.60Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.61v-show is missing expression.62Transition expects exactly one child element or component.63Tags with side effect (script and style) are ignored in client component templates.Edit this page on GitHub",
      "code_blocks": [
        "app.config.errorHandler",
        "onErrorCaptured",
        "errorCaptured"
      ],
      "chunks": [
        {
          "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app config errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "CodeMessage0Illegal comment 1CDATA section is allowed only in XML context 2Duplicate attribute 3End tag cannot have attributes 4Illegal '/' in tags 5Unexpected EOF in tag 6Unexpected EOF in CDATA section 7Unexpected EOF in comment 8Unexpected EOF in script 9Unexpected EOF in tag 10Incorrectly closed comment 11Incorrectly opened comment 12Illegal tag name Use 'lt;' to print '' 13Attribute value was expected 14End tag name was expected 15Whitespace was expected 16Unexpected ' --' in comment",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C () 18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`) 19Attribute name cannot start with '=' 20Unexpected null character 21' ' is allowed only in XML context 22Illegal '/' in tags 23Invalid end tag 24Element is missing end tag 25Interpolation end sign was not found 26Legal directive name was expected 27End bracket for dynamic directive argument was not found",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Note that dynamic directive argument cannot contain spaces 28v-if/v-else-if is missing expression 29v-if/else branches must use unique keys 30v-else/v-else-if has no adjacent v-if or v-else-if 31v-for is missing expression 32v-for has invalid expression 33template v-for key should be placed on the template tag 34v-bind is missing expression 35v-on is missing expression 36Unexpected custom directive on slot outlet 37Mixed v-slot usage on both the component and nested template",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity 38Duplicate slot names found 39Extraneous children found when component already has explicitly named default slot These children will be ignored 40v-slot can only be used on components or template tags 41v-model is missing expression 42v-model value must be a valid JavaScript member expression 43v-model cannot be used on v-for or v-slot scope variables because they are not writable",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "44v-model cannot be used on a prop, because local prop bindings are not writable Use a v-bind binding combined with a v-on listener that emits update:x event instead 45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component 47\"prefixIdentifiers\" option is not supported in this build of compiler 48ES module mode is not supported in this build of compiler 49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "50\"scopeId\" option is only supported in module mode 51vnode-* hooks in templates are no longer supported Use the vue: prefix instead For example, vnode-mounted should be changed to vue:mounted vnode-* hooks support has been removed in 3 4 52v-bind with same-name shorthand only allows static argument 53v-html is missing expression 54v-html will override element children 55v-text is missing expression 56v-text will override element children",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "57v-model can only be used on input, textarea and select elements 58v-model argument is not supported on plain elements 59v-model cannot be used on file inputs since they are read-only Use a v-on:change listener instead 60Unnecessary value binding used alongside v-model It will interfere with v-model's behavior 61v-show is missing expression 62Transition expects exactly one child element or component 63Tags with side effect (script and style) are ignored in client component templates",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Edit this page on GitHub",
          "url": "https://vuejs.org/error-reference/",
          "library": "vue",
          "chunk_id": "vue_9"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/",
      "title": "API Reference | Vue.js",
      "content": "API ReferenceFilterGlobal APIApplicationcreateApp()createSSRApp()app.mount()app.unmount()app.onUnmount()app.component()app.directive()app.use()app.mixin()app.provide()app.runWithContext()app.versionapp.configapp.config.errorHandlerapp.config.warnHandlerapp.config.performanceapp.config.compilerOptionsapp.config.globalPropertiesapp.config.optionMergeStrategiesapp.config.idPrefixapp.config.throwUnhandledErrorInProductionGeneralversionnextTick()defineComponent()defineAsyncComponent()Composition APIsetup()Basic UsageAccessing PropsSetup ContextUsage with Render FunctionsReactivity: Coreref()computed()reactive()readonly()watchEffect()watchPostEffect()watchSyncEffect()watch()onWatcherCleanup()Reactivity: UtilitiesisRef()unref()toRef()toValue()toRefs()isProxy()isReactive()isReadonly()Reactivity: AdvancedshallowRef()triggerRef()customRef()shallowReactive()shallowReadonly()toRaw()markRaw()effectScope()getCurrentScope()onScopeDispose()Lifecycle HooksonMounted()onUpdated()onUnmounted()onBeforeMount()onBeforeUpdate()onBeforeUnmount()onErrorCaptured()onRenderTracked()onRenderTriggered()onActivated()onDeactivated()onServerPrefetch()Dependency Injectionprovide()inject()hasInjectionContext()HelpersuseAttrs()useSlots()useModel()useTemplateRef()useId()Options APIOptions: StatedatapropscomputedmethodswatchemitsexposeOptions: RenderingtemplaterendercompilerOptionsslotsOptions: LifecyclebeforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggeredactivateddeactivatedserverPrefetchOptions: CompositionprovideinjectmixinsextendsOptions: MiscnameinheritAttrscomponentsdirectivesComponent Instancedatapropseloptionsparentrootslotsrefsattrswatch()emit()forceUpdate()nextTick()Built-insDirectivesv-textv-htmlv-showv-ifv-elsev-else-ifv-forv-onv-bindv-modelv-slotv-prev-oncev-memov-cloakComponentsTransitionTransitionGroupKeepAliveTeleportSuspenseSpecial ElementscomponentslottemplateSpecial AttributeskeyrefisSingle-File ComponentSyntax SpecificationOverviewLanguage BlocksAutomatic Name InferencePre-Processorssrc ImportsCommentsscript setupBasic SyntaxReactivityUsing ComponentsUsing Custom DirectivesdefineProps()  defineEmits()defineModel()defineExpose()defineOptions()defineSlots()useSlots()  useAttrs()Usage alongside normal scriptTop-level awaitImport StatementsGenericsRestrictionsCSS FeaturesScoped CSSCSS Modulesv-bind() in CSSAdvanced APIsCustom ElementsdefineCustomElement()useHost()useShadowRoot()this.hostRender Functionh()mergeProps()cloneVNode()isVNode()resolveComponent()resolveDirective()withDirectives()withModifiers()Server-Side RenderingrenderToString()renderToNodeStream()pipeToNodeWritable()renderToWebStream()pipeToWebWritable()renderToSimpleStream()useSSRContext()data-allow-mismatchTypeScript Utility TypesPropTypeTMaybeRefTMaybeRefOrGetterTExtractPropTypesTExtractPublicPropTypesTComponentCustomPropertiesComponentCustomOptionsComponentCustomPropsCSSPropertiesCustom RenderercreateRenderer()Compile-Time Flags__VUE_OPTIONS_API____VUE_PROD_DEVTOOLS____VUE_PROD_HYDRATION_MISMATCH_DETAILS__Configuration Guides",
      "code_blocks": [],
      "chunks": [
        {
          "content": "API ReferenceFilterGlobal APIApplicationcreateApp()createSSRApp()app mount()app unmount()app onUnmount()app component()app directive()app use()app mixin()app provide()app runWithContext()app versionapp configapp config errorHandlerapp config warnHandlerapp config performanceapp config compilerOptionsapp config globalPropertiesapp config optionMergeStrategiesapp config idPrefixapp config",
          "url": "https://vuejs.org/api/",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "throwUnhandledErrorInProductionGeneralversionnextTick()defineComponent()defineAsyncComponent()Composition APIsetup()Basic UsageAccessing PropsSetup ContextUsage with Render FunctionsReactivity: Coreref()computed()reactive()readonly()watchEffect()watchPostEffect()watchSyncEffect()watch()onWatcherCleanup()Reactivity: UtilitiesisRef()unref()toRef()toValue()toRefs()isProxy()isReactive()isReadonly()Reactivity: AdvancedshallowRef()triggerRef()customRef()shallowReactive()shallowReadonly()toRaw()markRaw()effectScope()getCurrentScope()onScopeDispose()Lifecycle HooksonMounted()onUpdated()onUnmounted()onBeforeMount()onBeforeUpdate()onBeforeUnmount()onErrorCaptured()onRenderTracked()onRenderTriggered()onActivated()onDeactivated()onServerPrefetch()Dependency Injectionprovide()inject()hasInjectionContext()HelpersuseAttrs()useSlots()useModel()useTemplateRef()useId()Options APIOptions: StatedatapropscomputedmethodswatchemitsexposeOptions: RenderingtemplaterendercompilerOptionsslotsOptions: LifecyclebeforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggeredactivateddeactivatedserverPrefetchOptions: CompositionprovideinjectmixinsextendsOptions: MiscnameinheritAttrscomponentsdirectivesComponent Instancedatapropseloptionsparentrootslotsrefsattrswatch()emit()forceUpdate()nextTick()Built-insDirectivesv-textv-htmlv-showv-ifv-elsev-else-ifv-forv-onv-bindv-modelv-slotv-prev-oncev-memov-cloakComponentsTransitionTransitionGroupKeepAliveTeleportSuspenseSpecial ElementscomponentslottemplateSpecial AttributeskeyrefisSingle-File ComponentSyntax SpecificationOverviewLanguage BlocksAutomatic Name InferencePre-Processorssrc ImportsCommentsscript setupBasic SyntaxReactivityUsing ComponentsUsing Custom DirectivesdefineProps()  defineEmits()defineModel()defineExpose()defineOptions()defineSlots()useSlots()  useAttrs()Usage alongside normal scriptTop-level awaitImport StatementsGenericsRestrictionsCSS FeaturesScoped CSSCSS Modulesv-bind() in CSSAdvanced APIsCustom ElementsdefineCustomElement()useHost()useShadowRoot()this",
          "url": "https://vuejs.org/api/",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "hostRender Functionh()mergeProps()cloneVNode()isVNode()resolveComponent()resolveDirective()withDirectives()withModifiers()Server-Side RenderingrenderToString()renderToNodeStream()pipeToNodeWritable()renderToWebStream()pipeToWebWritable()renderToSimpleStream()useSSRContext()data-allow-mismatchTypeScript Utility TypesPropTypeTMaybeRefTMaybeRefOrGetterTExtractPropTypesTExtractPublicPropTypesTComponentCustomPropertiesComponentCustomOptionsComponentCustomPropsCSSPropertiesCustom RenderercreateRenderer()Compile-Time Flags__VUE_OPTIONS_API____VUE_PROD_DEVTOOLS____VUE_PROD_HYDRATION_MISMATCH_DETAILS__Configuration Guides",
          "url": "https://vuejs.org/api/",
          "library": "vue",
          "chunk_id": "vue_2"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/scaling-up/tooling",
      "title": "Tooling | Vue.js",
      "content": "Tooling Try It Online You don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:Vue SFC PlaygroundAlways deployed from latest commitDesigned for inspecting component compilation resultsVue + Vite on StackBlitzIDE-like environment running actual Vite dev server in the browserClosest to local setupIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs.Project Scaffolding Vite Vite is a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!To get started with Vite + Vue, simply run:npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4.11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool.To learn more about Vite, check out the Vite docs.To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for vitejs/plugin-vue.Both online playgrounds mentioned above also support downloading files as a Vite project.Vue CLI Vue CLI is the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases.For information on migrating from Vue CLI to Vite:Vue CLI - Vite Migration Guide from VueSchool.ioTools / Plugins that help with auto migrationNote on In-Browser Template Compilation When using Vue without a build step, component templates are written either directly in the page's HTML or as inlined JavaScript strings. In such cases, Vue needs to ship the template compiler to the browser in order to perform on-the-fly template compilation. On the other hand, the compiler would be unnecessary if we pre-compile the templates with a build step. To reduce client bundle size, Vue provides different \"builds\" optimized for different use cases.Build files that start with vue.runtime.* are runtime-only builds: they do not include the compiler. When using these builds, all templates must be pre-compiled via a build step.Build files that do not include .runtime are full builds: they include the compiler and support compiling templates directly in the browser. However, they will increase the payload by 14kb.Our default tooling setups use the runtime-only build since all templates in SFCs are pre-compiled. If, for some reason, you need in-browser template compilation even with a build step, you can do so by configuring the build tool to alias vue to vue/dist/vue.esm-bundler.js instead.If you are looking for a lighter-weight alternative for no-build-step usage, check out petite-vue.IDE Support The recommended IDE setup is VS Code + the Vue - Official extension (previously Volar). The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props.TIPVue - Official replaces Vetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.WebStorm also provides great built-in support for Vue SFCs.Other IDEs that support the Language Service Protocol (LSP) can also leverage Volar's core functionalities via LSP:Sublime Text support via LSP-Volar.vim / Neovim support via coc-volar.emacs support via lsp-modeBrowser Devtools The Vue browser devtools extension allows you to explore a Vue app's component tree, inspect the state of individual components, track state management events, and profile performance.DocumentationChrome ExtensionVite PluginStandalone Electron appTypeScript Main article: Using Vue with TypeScript.Vue - Official extension provides type checking for SFCs using script lang=\"ts\" blocks, including template expressions and cross-component props validation.Use vue-tsc for performing the same type checking from the command line, or for generating d.ts files for SFCs.Testing Main article: Testing Guide.Cypress is recommended for E2E tests. It can also be used for component testing for Vue SFCs via the Cypress Component Test Runner.Vitest is a test runner created by Vue / Vite team members that focuses on speed. It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing.Jest can be made to work with Vite via vite-jest. However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration.Linting The Vue team maintains eslint-plugin-vue, an ESLint plugin that supports SFC-specific linting rules.Users previously using Vue CLI may be used to having linters configured via webpack loaders. However when using a Vite-based build setup, our general recommendation is:npm install -D eslint eslint-plugin-vue, then follow eslint-plugin-vue's configuration guide.Setup ESLint IDE extensions, for example ESLint for VS Code, so you get linter feedback right in your editor during development. This also avoids unnecessary linting cost when starting the dev server.Run ESLint as part of the production build command, so you get full linter feedback before shipping to production.(Optional) Setup tools like lint-staged to automatically lint modified files on git commit.Formatting The Vue - Official VS Code extension provides formatting for Vue SFCs out of the box.Alternatively, Prettier provides built-in Vue SFC formatting support.SFC Custom Block Integrations Custom blocks are compiled into imports to the same Vue file with different request queries. It is up to the underlying build tool to handle these import requests.If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript. ExampleIf using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks. ExampleLower-Level Packages vue/compiler-sfc DocsThis package is part of the Vue core monorepo and is always published with the same version as the main vue package. It is included as a dependency of the main vue package and proxied under vue/compiler-sfc so you don't need to install it individually.The package itself provides lower-level utilities for processing Vue SFCs and is only meant for tooling authors that need to support Vue SFCs in custom tools.TIPAlways prefer using this package via the vue/compiler-sfc deep import since this ensures its version is in sync with the Vue runtime.vitejs/plugin-vue DocsOfficial plugin that provides Vue SFC support in Vite.vue-loader DocsThe official loader that provides Vue SFC support in webpack. If you are using Vue CLI, also see docs on modifying vue-loader options in Vue CLI.Other Online Playgrounds VueUse PlaygroundVue + Vite on Repl.itVue on CodeSandboxVue on CodepenVue on WebComponents.devEdit this page on GitHub",
      "code_blocks": [
        "$ npm create vue@latest",
        "$ npm create vue@latest",
        "$ pnpm create vue@latest",
        "$ pnpm create vue@latest",
        "# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "$ bun create vue@latest",
        "$ bun create vue@latest",
        "vue.runtime.*",
        "vue/dist/vue.esm-bundler.js",
        "<script lang=\"ts\">",
        "npm install -D eslint eslint-plugin-vue",
        "eslint-plugin-vue",
        "@vue/compiler-sfc",
        "vue/compiler-sfc",
        "vue/compiler-sfc",
        "@vitejs/plugin-vue"
      ],
      "chunks": [
        {
          "content": "Tooling Try It Online You don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:Vue SFC PlaygroundAlways deployed from latest commitDesigned for inspecting component compilation resultsVue + Vite on StackBlitzIDE-like environment running actual Vite dev server in the browserClosest to local setupIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "Project Scaffolding Vite Vite is a lightweight and fast build tool with first-class Vue SFC support It is created by Evan You, who is also the author of Vue To get started with Vite + Vue, simply run:npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4 11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "To learn more about Vite, check out the Vite docs To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for vitejs/plugin-vue Both online playgrounds mentioned above also support downloading files as a Vite project Vue CLI Vue CLI is the official webpack-based toolchain for Vue It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Vite will provide superior developer experience in most cases For information on migrating from Vue CLI to Vite:Vue CLI - Vite Migration Guide from VueSchool ioTools / Plugins that help with auto migrationNote on In-Browser Template Compilation When using Vue without a build step, component templates are written either directly in the page's HTML or as inlined JavaScript strings",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "In such cases, Vue needs to ship the template compiler to the browser in order to perform on-the-fly template compilation On the other hand, the compiler would be unnecessary if we pre-compile the templates with a build step To reduce client bundle size, Vue provides different \"builds\" optimized for different use cases Build files that start with vue runtime * are runtime-only builds: they do not include the compiler When using these builds, all templates must be pre-compiled via a build step",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Build files that do not include runtime are full builds: they include the compiler and support compiling templates directly in the browser However, they will increase the payload by 14kb Our default tooling setups use the runtime-only build since all templates in SFCs are pre-compiled If, for some reason, you need in-browser template compilation even with a build step, you can do so by configuring the build tool to alias vue to vue/dist/vue esm-bundler js instead",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "If you are looking for a lighter-weight alternative for no-build-step usage, check out petite-vue IDE Support The recommended IDE setup is VS Code + the Vue - Official extension (previously Volar) The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props TIPVue - Official replaces Vetur, our previous official VS Code extension for Vue 2 If you have Vetur currently installed, make sure to disable it in Vue 3 projects",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "WebStorm also provides great built-in support for Vue SFCs Other IDEs that support the Language Service Protocol (LSP) can also leverage Volar's core functionalities via LSP:Sublime Text support via LSP-Volar vim / Neovim support via coc-volar emacs support via lsp-modeBrowser Devtools The Vue browser devtools extension allows you to explore a Vue app's component tree, inspect the state of individual components, track state management events, and profile performance",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "DocumentationChrome ExtensionVite PluginStandalone Electron appTypeScript Main article: Using Vue with TypeScript Vue - Official extension provides type checking for SFCs using script lang=\"ts\" blocks, including template expressions and cross-component props validation Use vue-tsc for performing the same type checking from the command line, or for generating d ts files for SFCs Testing Main article: Testing Guide Cypress is recommended for E2E tests",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "It can also be used for component testing for Vue SFCs via the Cypress Component Test Runner Vitest is a test runner created by Vue / Vite team members that focuses on speed It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing Jest can be made to work with Vite via vite-jest",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration Linting The Vue team maintains eslint-plugin-vue, an ESLint plugin that supports SFC-specific linting rules Users previously using Vue CLI may be used to having linters configured via webpack loaders",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "However when using a Vite-based build setup, our general recommendation is:npm install -D eslint eslint-plugin-vue, then follow eslint-plugin-vue's configuration guide Setup ESLint IDE extensions, for example ESLint for VS Code, so you get linter feedback right in your editor during development This also avoids unnecessary linting cost when starting the dev server Run ESLint as part of the production build command, so you get full linter feedback before shipping to production",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "(Optional) Setup tools like lint-staged to automatically lint modified files on git commit Formatting The Vue - Official VS Code extension provides formatting for Vue SFCs out of the box Alternatively, Prettier provides built-in Vue SFC formatting support SFC Custom Block Integrations Custom blocks are compiled into imports to the same Vue file with different request queries It is up to the underlying build tool to handle these import requests",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript ExampleIf using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks ExampleLower-Level Packages vue/compiler-sfc DocsThis package is part of the Vue core monorepo and is always published with the same version as the main vue package",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "It is included as a dependency of the main vue package and proxied under vue/compiler-sfc so you don't need to install it individually The package itself provides lower-level utilities for processing Vue SFCs and is only meant for tooling authors that need to support Vue SFCs in custom tools TIPAlways prefer using this package via the vue/compiler-sfc deep import since this ensures its version is in sync with the Vue runtime",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "vitejs/plugin-vue DocsOfficial plugin that provides Vue SFC support in Vite vue-loader DocsThe official loader that provides Vue SFC support in webpack If you are using Vue CLI, also see docs on modifying vue-loader options in Vue CLI Other Online Playgrounds VueUse PlaygroundVue + Vite on Repl itVue on CodeSandboxVue on CodepenVue on WebComponents devEdit this page on GitHub",
          "url": "https://vuejs.org/guide/scaling-up/tooling",
          "library": "vue",
          "chunk_id": "vue_15"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/about/community-guide",
      "title": "Community Guide | Vue.js",
      "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!Now we'll answer both what the community can do for you and what you can do for the community.Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate.Stay in the Know Follow our official Twitter account.Follow our team members on Twitter or GitHub.Follow the RFC discussions.Subscribe to the official blog.Get Support Discord Chat: A place for Vue devs to meet and chat in real time.Forum: The best place to ask questions and get answers about Vue and its ecosystem.DEV Community: Share and discuss Vue related topics on Dev.to.Meetups: Want to find local Vue enthusiasts like yourself? Interested in becoming a community leader? We have the help and support you need right here!GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for. Please respect the rules specified in each repository's issue template.Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue.Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people.Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use.Made with Vue.js: showcases of projects and libraries made with Vue.The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem.What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community. Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution.Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue.We receive many issues in our repositories on GitHub every single day. Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team. By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work.You don't have to triage an issue with the goal of fixing it (although that would be nice too). Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time.Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make.The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture. Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests.Bug fixes are welcome at any time. For new features, it is best to discuss the use case and implementation details first in the RFC repo.Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials. It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media.Watch a repo you care about. This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests.Translate Docs I hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?See the Translations guide for more details on how you can get involved.Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup. Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow.Start your own meetup. If there's not already a Vue meetup in your area, you can start your own! Use the resources at events.vuejs.org to help you succeed!Help meetup organizers. There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success.If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events!Edit this page on GitHub",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it So welcome Now we'll answer both what the community can do for you and what you can do for the community Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate Stay in the Know Follow our official Twitter account Follow our team members on Twitter or GitHub",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "Follow the RFC discussions Subscribe to the official blog Get Support Discord Chat: A place for Vue devs to meet and chat in real time Forum: The best place to ask questions and get answers about Vue and its ecosystem DEV Community: Share and discuss Vue related topics on Dev to Meetups: Want to find local Vue enthusiasts like yourself Interested in becoming a community leader We have the help and support you need right here",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for Please respect the rules specified in each repository's issue template Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use Made with Vue js: showcases of projects and libraries made with Vue The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue We receive many issues in our repositories on GitHub every single day Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work You don't have to triage an issue with the goal of fixing it (although that would be nice too) Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests Bug fixes are welcome at any time For new features, it is best to discuss the use case and implementation details first in the RFC repo",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials It's often said that the best way to learn is to teach If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media Watch a repo you care about",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests Translate Docs I hope that right now, you're reading this sentence in your preferred language If not, would you like to help us get there See the Translations guide for more details on how you can get involved",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow Start your own meetup If there's not already a Vue meetup in your area, you can start your own Use the resources at events vuejs org to help you succeed Help meetup organizers",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events Edit this page on GitHub",
          "url": "https://vuejs.org/about/community-guide",
          "library": "vue",
          "chunk_id": "vue_10"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/introduction#api-styles",
      "title": "Introduction | Vue.js",
      "content": "Introduction You are reading the documentation for Vue 3!Vue 2 support has ended on Dec 31, 2023. Learn more about Vue 2 EOL.Upgrading from Vue 2? Check out the Migration Guide.Learn Vue with video tutorials on VueMastery.comWhat is Vue? Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }).mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } }).mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as *.vue files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.API Styles Vue components can be authored in two different API styles: Options API and Composition API.Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted. Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this`. data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. methods: { increment() { this.count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle. // This function will be called when the component is mounted. mounted() { console.log(`The initial count is {this.count}.`) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with script setup. The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in script setup are directly usable in the template.Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count.value++ } // lifecycle hooks onMounted(() = { console.log(`The initial count is {count.value}.`) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose? Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.Still Got Questions? Check out our FAQ.Pick Your Learning Path Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!Try the TutorialFor those who prefer learning things hands-on.Read the GuideThe guide walks you through every aspect of the framework in full detail.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>",
        "<script setup>",
        "<script setup>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      ],
      "chunks": [
        {
          "content": "Introduction You are reading the documentation for Vue 3 Vue 2 support has ended on Dec 31, 2023 Learn more about Vue 2 EOL Upgrading from Vue 2 Check out the Migration Guide Learn Vue with video tutorials on VueMastery comWhat is Vue Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }) mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } })",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen You may already have questions - don't worry",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "We will cover every little detail in the rest of the documentation For now, please read along so you can have a high-level understanding of what Vue offers PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed Prior experience with other frameworks helps, but is not required The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development But the web is extremely diverse - the things we build on the web may vary drastically in form and scale With that in mind, Vue is designed to be flexible and incrementally adoptable",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as * vue files, abbreviated as SFC) A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you API Styles Vue components can be authored in two different API styles: Options API and Composition API Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this` data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates // They can be bound as event handlers in templates methods: { increment() { this count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "// This function will be called when the component is mounted mounted() { console log(`The initial count is {this count} `) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions In SFCs, Composition API is typically used with script setup",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate For example, imports and top-level variables / functions declared in script setup are directly usable in the template",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count value++ } // lifecycle hooks onMounted(() = { console log(`The initial count is {count value} `) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "Both API styles are fully capable of covering common use cases They are different interfaces powered by the exact same underlying system In fact, the Options API is implemented on top of the Composition API The fundamental concepts and knowledge about Vue are shared across the two styles The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively In return, its flexibility enables more powerful patterns for organizing and reusing logic",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you Again, most of the core concepts are shared between the two styles You can always pick up the other style later",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e g progressive enhancement Go with Composition API + Single-File Components if you plan to build full applications with Vue You don't have to commit to only one style during the learning phase",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar Still Got Questions Check out our FAQ Pick Your Learning Path Different developers have different learning styles Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "Try the TutorialFor those who prefer learning things hands-on Read the GuideThe guide walks you through every aspect of the framework in full detail Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/introduction#api-styles",
          "library": "vue",
          "chunk_id": "vue_20"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/introduction#VPContent",
      "title": "Introduction | Vue.js",
      "content": "Introduction You are reading the documentation for Vue 3!Vue 2 support has ended on Dec 31, 2023. Learn more about Vue 2 EOL.Upgrading from Vue 2? Check out the Migration Guide.Learn Vue with video tutorials on VueMastery.comWhat is Vue? Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }).mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } }).mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as *.vue files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.API Styles Vue components can be authored in two different API styles: Options API and Composition API.Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted. Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this`. data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. methods: { increment() { this.count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle. // This function will be called when the component is mounted. mounted() { console.log(`The initial count is {this.count}.`) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with script setup. The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in script setup are directly usable in the template.Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count.value++ } // lifecycle hooks onMounted(() = { console.log(`The initial count is {count.value}.`) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose? Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.Still Got Questions? Check out our FAQ.Pick Your Learning Path Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!Try the TutorialFor those who prefer learning things hands-on.Read the GuideThe guide walks you through every aspect of the framework in full detail.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>",
        "<script setup>",
        "<script setup>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      ],
      "chunks": [
        {
          "content": "Introduction You are reading the documentation for Vue 3 Vue 2 support has ended on Dec 31, 2023 Learn more about Vue 2 EOL Upgrading from Vue 2 Check out the Migration Guide Learn Vue with video tutorials on VueMastery comWhat is Vue Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity Here is a minimal example:jsimport { createApp } from 'vue' createApp({ data() { return { count: 0 } } }) mount('app')jsimport { createApp, ref } from 'vue' createApp({ setup() { return { count: ref(0) } } })",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "mount('app')templatediv id=\"app\" button click=\"count++\" Count is: {{ count }} /button /divResult Count is: 0The above example demonstrates the two core features of Vue:Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen You may already have questions - don't worry",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "We will cover every little detail in the rest of the documentation For now, please read along so you can have a high-level understanding of what Vue offers PrerequisitesThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed Prior experience with other frameworks helps, but is not required The Progressive Framework Vue is a framework and ecosystem that covers most of the common features needed in frontend development But the web is extremely diverse - the things we build on the web may vary drastically in form and scale With that in mind, Vue is designed to be flexible and incrementally adoptable",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Depending on your use case, Vue can be used in different ways:Enhancing static HTML without a build stepEmbedding as Web Components on any pageSingle-Page Application (SPA)Fullstack / Server-Side Rendering (SSR)Jamstack / Static Site Generation (SSG)Targeting desktop, mobile, WebGL, and even the terminalIf you find these concepts intimidating, don't worry",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "Single-File Components In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as * vue files, abbreviated as SFC) A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Here's the previous example, written in SFC format:vuescript export default { data() { return { count: 0 } } } /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /stylevuescript setup import { ref } from 'vue' const count = ref(0) /script template button click=\"count++\"Count is: {{ count }}/button /template style scoped button { font-weight: bold; } /styleSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you API Styles Vue components can be authored in two different API styles: Options API and Composition API Options API With Options API, we define a component's logic using an object of options such as data, methods, and mounted",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Properties defined by options are exposed on this inside functions, which points to the component instance:vuescript export default { // Properties returned from data() become reactive state // and will be exposed on `this` data() { return { count: 0 } }, // Methods are functions that mutate state and trigger updates // They can be bound as event handlers in templates methods: { increment() { this count++ } }, // Lifecycle hooks are called at different stages // of a component's lifecycle",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "// This function will be called when the component is mounted mounted() { console log(`The initial count is {this count} `) } } /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundComposition API With Composition API, we define a component's logic using imported API functions In SFCs, Composition API is typically used with script setup",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "The setup attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate For example, imports and top-level variables / functions declared in script setup are directly usable in the template",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Here is the same component, with the exact same template, but using Composition API and script setup instead:vuescript setup import { ref, onMounted } from 'vue' // reactive state const count = ref(0) // functions that mutate state and trigger updates function increment() { count value++ } // lifecycle hooks onMounted(() = { console log(`The initial count is {count value} `) }) /script template button click=\"increment\"Count is: {{ count }}/button /templateTry it in the PlaygroundWhich to Choose",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "Both API styles are fully capable of covering common use cases They are different interfaces powered by the exact same underlying system In fact, the Options API is implemented on top of the Composition API The fundamental concepts and knowledge about Vue are shared across the two styles The Options API is centered around the concept of a \"component instance\" (this as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively In return, its flexibility enables more powerful patterns for organizing and reusing logic",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ If you are new to Vue, here's our general recommendation:For learning purposes, go with the style that looks easier to understand to you Again, most of the core concepts are shared between the two styles You can always pick up the other style later",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e g progressive enhancement Go with Composition API + Single-File Components if you plan to build full applications with Vue You don't have to commit to only one style during the learning phase",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar Still Got Questions Check out our FAQ Pick Your Learning Path Different developers have different learning styles Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "Try the TutorialFor those who prefer learning things hands-on Read the GuideThe guide walks you through every aspect of the framework in full detail Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/introduction#VPContent",
          "library": "vue",
          "chunk_id": "vue_20"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/quick-start#VPContent",
      "title": "Quick Start | Vue.js",
      "content": "Quick Start Try Vue Online To quickly get a taste of Vue, you can try it directly in our Playground.If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point.If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz.To get a walkthrough of the recommended setup, watch this interactive Scrimba tutorial that shows you how to run, edit, and deploy your first Vue app.Creating a Vue Application PrerequisitesFamiliarity with the command lineInstall Node.js version 18.3 or higherIn this section we will introduce how to scaffold a Vue Single Page Application on your local machine. The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs).Make sure you have an up-to-date version of Node.js installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the  sign):npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn (v1+)  yarn create vue  For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4.11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support: Project name:  your-project-name  Add TypeScript?  No / Yes  Add JSX Support?  No / Yes  Add Vue Router for Single Page Application development?  No / Yes  Add Pinia for state management?  No / Yes  Add Vitest for Unit testing?  No / Yes  Add an End-to-End Testing Solution?  No / Cypress / Nightwatch / Playwright  Add ESLint for code quality?  No / Yes  Add Prettier for code formatting?  No / Yes  Add Vue DevTools 7 extension for debugging? (experimental)  No / Yes Scaffolding project in ./your-project-name... Done.If you are unsure about an option, simply choose No by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:npmpnpmyarnbunsh cd your-project-name  npm install  npm run devsh cd your-project-name  pnpm install  pnpm run devsh cd your-project-name  yarn  yarn devsh cd your-project-name  bun install  bun run devYou should now have your first Vue project running! Note that the example components in the generated project are written using the Composition API and script setup, rather than the Options API. Here are some additional tips:The recommended IDE setup is Visual Studio Code + Vue - Official extension. If you use other editors, check out the IDE support section.More tooling details, including integration with backend frameworks, are discussed in the Tooling Guide.To learn more about the underlying build tool Vite, check out the Vite docs.If you choose to use TypeScript, check out the TypeScript Usage Guide.When you are ready to ship your app to production, run the following:npmpnpmyarnbunsh npm run buildsh pnpm run buildsh yarn buildsh bun run buildThis will create a production-ready build of your app in the project's ./dist directory. Check out the Production Deployment Guide to learn more about shipping your app to production.Next Steps Using Vue from CDN You can use Vue directly from a CDN via a script tag:htmlscript src=\"https://unpkg.com/vue3/dist/vue.global.js\"/scriptHere we are using unpkg, but you can also use any CDN that serves npm packages, for example jsdelivr or cdnjs. Of course, you can also download this file and serve it yourself.When using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax.Using the Global Build The above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global Vue object. Here is a full example using the global build:htmlscript src=\"https://unpkg.com/vue3/dist/vue.global.js\"/script div id=\"app\"{{ message }}/div script const { createApp } = Vue createApp({ data() { return { message: 'Hello Vue!' } } }).mount('app') /scriptCodePen Demo htmlscript src=\"https://unpkg.com/vue3/dist/vue.global.js\"/script div id=\"app\"{{ message }}/div script const { createApp, ref } = Vue createApp({ setup() { const message = ref('Hello vue!') return { message } } }).mount('app') /scriptCodePen Demo TIPMany of the examples for Composition API throughout the guide will be using the script setup syntax, which requires build tools. If you intend to use Composition API without a build step, consult the usage of the setup() option.Using the ES Module Build Throughout the rest of the documentation, we will be primarily using ES modules syntax. Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules like this:htmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'https://unpkg.com/vue3/dist/vue.esm-browser.js' createApp({ data() { return { message: 'Hello Vue!' } } }).mount('app') /scripthtmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'https://unpkg.com/vue3/dist/vue.esm-browser.js' createApp({ setup() { const message = ref('Hello Vue!') return { message } } }).mount('app') /scriptNotice that we are using script type=\"module\", and the imported CDN URL is pointing to the ES modules build of Vue instead.CodePen Demo CodePen Demo Enabling Import maps In the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:jsimport { createApp } from 'vue'We can teach the browser where to locate the vue import by using Import Maps:htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg.com/vue3/dist/vue.esm-browser.js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'vue' createApp({ data() { return { message: 'Hello Vue!' } } }).mount('app') /scriptCodePen Demo htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg.com/vue3/dist/vue.esm-browser.js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'vue' createApp({ setup() { const message = ref('Hello Vue!') return { message } } }).mount('app') /scriptCodePen Demo You can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use.Import Maps Browser SupportImport Maps is a relatively new browser feature. Make sure to use a browser within its support range. In particular, it is only supported in Safari 16.4+.Notes on Production UseThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide.While it is possible to use Vue without a build system, an alternative approach to consider is using vuejs/petite-vue that could better suit the context where jquery/jquery (in the past) or alpinejs/alpine (in the present) might be used instead.Splitting Up the Modules As we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example:html!-- index.html -- div id=\"app\"/div script type=\"module\" import { createApp } from 'vue' import MyComponent from './my-component.js' createApp(MyComponent).mount('app') /scriptjs// my-component.js export default { data() { return { count: 0 } }, template: `divCount is: {{ count }}/div` }js// my-component.js import { ref } from 'vue' export default { setup() { const count = ref(0) return { count } }, template: `divCount is: {{ count }}/div` }If you directly open the above index.html in your browser, you will find that it throws an error because ES modules cannot work over the file:// protocol, which is the protocol the browser uses when you open a local file.Due to security reasons, ES modules can only work over the http:// protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve the index.html over the http:// protocol, with a local HTTP server.To start a local HTTP server, first make sure you have Node.js installed, then run npx serve from the command line in the same directory where your HTML file is. You can also use any other HTTP server that can serve static files with the correct MIME types.You may have noticed that the imported component's template is inlined as a JavaScript string. If you are using VS Code, you can install the es6-string-html extension and prefix the strings with a /*html*/ comment to get syntax highlighting for them.Next Steps If you skipped the Introduction, we strongly recommend reading it before moving on to the rest of the documentation.Continue with the GuideThe guide walks you through every aspect of the framework in full detail.Try the TutorialFor those who prefer learning things hands-on.Check out the ExamplesExplore examples of core features and common UI tasks.Edit this page on GitHub",
      "code_blocks": [
        "$ npm create vue@latest",
        "$ npm create vue@latest",
        "$ pnpm create vue@latest",
        "$ pnpm create vue@latest",
        "# For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "# For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "$ bun create vue@latest",
        "$ bun create vue@latest",
        "\u2714 Project name: \u2026 <your-project-name>\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u2026 No / Cypress / Nightwatch / Playwright\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\u2714 Add Prettier for code formatting? \u2026 No / Yes\n\u2714 Add Vue DevTools 7 extension for debugging? (experimental) \u2026 No / Yes\n\nScaffolding project in ./<your-project-name>...\nDone.",
        "\u2714 Project name: \u2026 <your-project-name>\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u2026 No / Cypress / Nightwatch / Playwright\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\u2714 Add Prettier for code formatting? \u2026 No / Yes\n\u2714 Add Vue DevTools 7 extension for debugging? (experimental) \u2026 No / Yes\n\nScaffolding project in ./<your-project-name>...\nDone.",
        "$ cd <your-project-name>\n$ npm install\n$ npm run dev",
        "$ cd <your-project-name>\n$ npm install\n$ npm run dev",
        "$ cd <your-project-name>\n$ pnpm install\n$ pnpm run dev",
        "$ cd <your-project-name>\n$ pnpm install\n$ pnpm run dev",
        "$ cd <your-project-name>\n$ yarn\n$ yarn dev",
        "$ cd <your-project-name>\n$ yarn\n$ yarn dev",
        "$ cd <your-project-name>\n$ bun install\n$ bun run dev",
        "$ cd <your-project-name>\n$ bun install\n$ bun run dev",
        "<script setup>",
        "$ npm run build",
        "$ npm run build",
        "$ pnpm run build",
        "$ pnpm run build",
        "$ yarn build",
        "$ yarn build",
        "$ bun run build",
        "$ bun run build",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script setup>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"module\">",
        "import { createApp } from 'vue'",
        "import { createApp } from 'vue'",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>",
        "vuejs/petite-vue",
        "jquery/jquery",
        "alpinejs/alpine",
        "<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n  import MyComponent from './my-component.js'\n\n  createApp(MyComponent).mount('#app')\n</script>",
        "<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n  import MyComponent from './my-component.js'\n\n  createApp(MyComponent).mount('#app')\n</script>",
        "// my-component.js\nexport default {\n  data() {\n    return { count: 0 }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}",
        "// my-component.js\nexport default {\n  data() {\n    return { count: 0 }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}",
        "// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}",
        "// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}"
      ],
      "chunks": [
        {
          "content": "Quick Start Try Vue Online To quickly get a taste of Vue, you can try it directly in our Playground If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point If you are already familiar with Node js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "To get a walkthrough of the recommended setup, watch this interactive Scrimba tutorial that shows you how to run, edit, and deploy your first Vue app Creating a Vue Application PrerequisitesFamiliarity with the command lineInstall Node js version 18 3 or higherIn this section we will introduce how to scaffold a Vue Single Page Application on your local machine The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs)",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "Make sure you have an up-to-date version of Node js installed and your current working directory is the one where you intend to create a project Run the following command in your command line (without the  sign):npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn (v1+)  yarn create vue  For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool You will be presented with prompts for several optional features such as TypeScript and testing support: Project name:  your-project-name  Add TypeScript No / Yes  Add JSX Support No / Yes  Add Vue Router for Single Page Application development No / Yes  Add Pinia for state management No / Yes  Add Vitest for Unit testing",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "No / Yes  Add an End-to-End Testing Solution No / Cypress / Nightwatch / Playwright  Add ESLint for code quality No / Yes  Add Prettier for code formatting No / Yes  Add Vue DevTools 7 extension for debugging (experimental)  No / Yes Scaffolding project in /your-project-name Done If you are unsure about an option, simply choose No by hitting enter for now",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Once the project is created, follow the instructions to install dependencies and start the dev server:npmpnpmyarnbunsh cd your-project-name  npm install  npm run devsh cd your-project-name  pnpm install  pnpm run devsh cd your-project-name  yarn  yarn devsh cd your-project-name  bun install  bun run devYou should now have your first Vue project running Note that the example components in the generated project are written using the Composition API and script setup, rather than the Options API",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "Here are some additional tips:The recommended IDE setup is Visual Studio Code + Vue - Official extension If you use other editors, check out the IDE support section More tooling details, including integration with backend frameworks, are discussed in the Tooling Guide To learn more about the underlying build tool Vite, check out the Vite docs If you choose to use TypeScript, check out the TypeScript Usage Guide",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "When you are ready to ship your app to production, run the following:npmpnpmyarnbunsh npm run buildsh pnpm run buildsh yarn buildsh bun run buildThis will create a production-ready build of your app in the project's /dist directory Check out the Production Deployment Guide to learn more about shipping your app to production Next Steps Using Vue from CDN You can use Vue directly from a CDN via a script tag:htmlscript src=\"https://unpkg com/vue3/dist/vue global",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "js\"/scriptHere we are using unpkg, but you can also use any CDN that serves npm packages, for example jsdelivr or cdnjs Of course, you can also download this file and serve it yourself When using Vue from a CDN, there is no \"build step\" involved This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework However, you won't be able to use the Single-File Component (SFC) syntax",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Using the Global Build The above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global Vue object Here is a full example using the global build:htmlscript src=\"https://unpkg com/vue3/dist/vue global js\"/script div id=\"app\"{{ message }}/div script const { createApp } = Vue createApp({ data() { return { message: 'Hello Vue ' } } }) mount('app') /scriptCodePen Demo htmlscript src=\"https://unpkg com/vue3/dist/vue global",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "js\"/script div id=\"app\"{{ message }}/div script const { createApp, ref } = Vue createApp({ setup() { const message = ref('Hello vue ') return { message } } }) mount('app') /scriptCodePen Demo TIPMany of the examples for Composition API throughout the guide will be using the script setup syntax, which requires build tools If you intend to use Composition API without a build step, consult the usage of the setup() option",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Using the ES Module Build Throughout the rest of the documentation, we will be primarily using ES modules syntax Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules like this:htmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'https://unpkg com/vue3/dist/vue esm-browser js' createApp({ data() { return { message: 'Hello Vue ' } } })",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "mount('app') /scripthtmldiv id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'https://unpkg com/vue3/dist/vue esm-browser js' createApp({ setup() { const message = ref('Hello Vue ') return { message } } }) mount('app') /scriptNotice that we are using script type=\"module\", and the imported CDN URL is pointing to the ES modules build of Vue instead",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "CodePen Demo CodePen Demo Enabling Import maps In the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:jsimport { createApp } from 'vue'We can teach the browser where to locate the vue import by using Import Maps:htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg com/vue3/dist/vue esm-browser",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp } from 'vue' createApp({ data() { return { message: 'Hello Vue ' } } }) mount('app') /scriptCodePen Demo htmlscript type=\"importmap\" { \"imports\": { \"vue\": \"https://unpkg com/vue3/dist/vue esm-browser js\" } } /script div id=\"app\"{{ message }}/div script type=\"module\" import { createApp, ref } from 'vue' createApp({ setup() { const message = ref('Hello Vue ') return { message } } })",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "mount('app') /scriptCodePen Demo You can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use Import Maps Browser SupportImport Maps is a relatively new browser feature Make sure to use a browser within its support range In particular, it is only supported in Safari 16 4+",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "Notes on Production UseThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide While it is possible to use Vue without a build system, an alternative approach to consider is using vuejs/petite-vue that could better suit the context where jquery/jquery (in the past) or alpinejs/alpine (in the present) might be used instead",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "Splitting Up the Modules As we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage For example:html -- index html -- div id=\"app\"/div script type=\"module\" import { createApp } from 'vue' import MyComponent from ' /my-component js' createApp(MyComponent) mount('app') /scriptjs// my-component js export default { data() { return { count: 0 } }, template: `divCount is: {{ count }}/div` }js// my-component",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "js import { ref } from 'vue' export default { setup() { const count = ref(0) return { count } }, template: `divCount is: {{ count }}/div` }If you directly open the above index html in your browser, you will find that it throws an error because ES modules cannot work over the file:// protocol, which is the protocol the browser uses when you open a local file Due to security reasons, ES modules can only work over the http:// protocol, which is what the browsers use when opening pages on the web",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "In order for ES modules to work on our local machine, we need to serve the index html over the http:// protocol, with a local HTTP server To start a local HTTP server, first make sure you have Node js installed, then run npx serve from the command line in the same directory where your HTML file is You can also use any other HTTP server that can serve static files with the correct MIME types You may have noticed that the imported component's template is inlined as a JavaScript string",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "If you are using VS Code, you can install the es6-string-html extension and prefix the strings with a /*html*/ comment to get syntax highlighting for them Next Steps If you skipped the Introduction, we strongly recommend reading it before moving on to the rest of the documentation Continue with the GuideThe guide walks you through every aspect of the framework in full detail Try the TutorialFor those who prefer learning things hands-on",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_20"
        },
        {
          "content": "Check out the ExamplesExplore examples of core features and common UI tasks Edit this page on GitHub",
          "url": "https://vuejs.org/guide/quick-start#VPContent",
          "library": "vue",
          "chunk_id": "vue_21"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/error-reference/#VPContent",
      "title": "Production Error Code Reference | Vue.js",
      "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app.config.errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings.CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages.CodeMessage0Illegal comment.1CDATA section is allowed only in XML context.2Duplicate attribute.3End tag cannot have attributes.4Illegal '/' in tags.5Unexpected EOF in tag.6Unexpected EOF in CDATA section.7Unexpected EOF in comment.8Unexpected EOF in script.9Unexpected EOF in tag.10Incorrectly closed comment.11Incorrectly opened comment.12Illegal tag name. Use 'lt;' to print ''.13Attribute value was expected.14End tag name was expected.15Whitespace was expected.16Unexpected '!--' in comment.17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C ().18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`).19Attribute name cannot start with '='.20Unexpected null character.21'?' is allowed only in XML context.22Illegal '/' in tags.23Invalid end tag.24Element is missing end tag.25Interpolation end sign was not found.26Legal directive name was expected.27End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.28v-if/v-else-if is missing expression.29v-if/else branches must use unique keys.30v-else/v-else-if has no adjacent v-if or v-else-if.31v-for is missing expression.32v-for has invalid expression.33template v-for key should be placed on the template tag.34v-bind is missing expression.35v-on is missing expression.36Unexpected custom directive on slot outlet.37Mixed v-slot usage on both the component and nested template. When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity.38Duplicate slot names found. 39Extraneous children found when component already has explicitly named default slot. These children will be ignored.40v-slot can only be used on components or template tags.41v-model is missing expression.42v-model value must be a valid JavaScript member expression.43v-model cannot be used on v-for or v-slot scope variables because they are not writable.44v-model cannot be used on a prop, because local prop bindings are not writable. Use a v-bind binding combined with a v-on listener that emits update:x event instead.45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component.47\"prefixIdentifiers\" option is not supported in this build of compiler.48ES module mode is not supported in this build of compiler.49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.50\"scopeId\" option is only supported in module mode.51vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, vnode-mounted should be changed to vue:mounted. vnode-* hooks support has been removed in 3.4.52v-bind with same-name shorthand only allows static argument.53v-html is missing expression.54v-html will override element children.55v-text is missing expression.56v-text will override element children.57v-model can only be used on input, textarea and select elements.58v-model argument is not supported on plain elements.59v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.60Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.61v-show is missing expression.62Transition expects exactly one child element or component.63Tags with side effect (script and style) are ignored in client component templates.Edit this page on GitHub",
      "code_blocks": [
        "app.config.errorHandler",
        "onErrorCaptured",
        "errorCaptured"
      ],
      "chunks": [
        {
          "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app config errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "CodeMessage0Illegal comment 1CDATA section is allowed only in XML context 2Duplicate attribute 3End tag cannot have attributes 4Illegal '/' in tags 5Unexpected EOF in tag 6Unexpected EOF in CDATA section 7Unexpected EOF in comment 8Unexpected EOF in script 9Unexpected EOF in tag 10Incorrectly closed comment 11Incorrectly opened comment 12Illegal tag name Use 'lt;' to print '' 13Attribute value was expected 14End tag name was expected 15Whitespace was expected 16Unexpected ' --' in comment",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C () 18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`) 19Attribute name cannot start with '=' 20Unexpected null character 21' ' is allowed only in XML context 22Illegal '/' in tags 23Invalid end tag 24Element is missing end tag 25Interpolation end sign was not found 26Legal directive name was expected 27End bracket for dynamic directive argument was not found",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Note that dynamic directive argument cannot contain spaces 28v-if/v-else-if is missing expression 29v-if/else branches must use unique keys 30v-else/v-else-if has no adjacent v-if or v-else-if 31v-for is missing expression 32v-for has invalid expression 33template v-for key should be placed on the template tag 34v-bind is missing expression 35v-on is missing expression 36Unexpected custom directive on slot outlet 37Mixed v-slot usage on both the component and nested template",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity 38Duplicate slot names found 39Extraneous children found when component already has explicitly named default slot These children will be ignored 40v-slot can only be used on components or template tags 41v-model is missing expression 42v-model value must be a valid JavaScript member expression 43v-model cannot be used on v-for or v-slot scope variables because they are not writable",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "44v-model cannot be used on a prop, because local prop bindings are not writable Use a v-bind binding combined with a v-on listener that emits update:x event instead 45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component 47\"prefixIdentifiers\" option is not supported in this build of compiler 48ES module mode is not supported in this build of compiler 49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "50\"scopeId\" option is only supported in module mode 51vnode-* hooks in templates are no longer supported Use the vue: prefix instead For example, vnode-mounted should be changed to vue:mounted vnode-* hooks support has been removed in 3 4 52v-bind with same-name shorthand only allows static argument 53v-html is missing expression 54v-html will override element children 55v-text is missing expression 56v-text will override element children",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "57v-model can only be used on input, textarea and select elements 58v-model argument is not supported on plain elements 59v-model cannot be used on file inputs since they are read-only Use a v-on:change listener instead 60Unnecessary value binding used alongside v-model It will interfere with v-model's behavior 61v-show is missing expression 62Transition expects exactly one child element or component 63Tags with side effect (script and style) are ignored in client component templates",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Edit this page on GitHub",
          "url": "https://vuejs.org/error-reference/#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/error-reference/#runtime-errors",
      "title": "Production Error Code Reference | Vue.js",
      "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app.config.errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings.CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages.CodeMessage0Illegal comment.1CDATA section is allowed only in XML context.2Duplicate attribute.3End tag cannot have attributes.4Illegal '/' in tags.5Unexpected EOF in tag.6Unexpected EOF in CDATA section.7Unexpected EOF in comment.8Unexpected EOF in script.9Unexpected EOF in tag.10Incorrectly closed comment.11Incorrectly opened comment.12Illegal tag name. Use 'lt;' to print ''.13Attribute value was expected.14End tag name was expected.15Whitespace was expected.16Unexpected '!--' in comment.17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C ().18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`).19Attribute name cannot start with '='.20Unexpected null character.21'?' is allowed only in XML context.22Illegal '/' in tags.23Invalid end tag.24Element is missing end tag.25Interpolation end sign was not found.26Legal directive name was expected.27End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.28v-if/v-else-if is missing expression.29v-if/else branches must use unique keys.30v-else/v-else-if has no adjacent v-if or v-else-if.31v-for is missing expression.32v-for has invalid expression.33template v-for key should be placed on the template tag.34v-bind is missing expression.35v-on is missing expression.36Unexpected custom directive on slot outlet.37Mixed v-slot usage on both the component and nested template. When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity.38Duplicate slot names found. 39Extraneous children found when component already has explicitly named default slot. These children will be ignored.40v-slot can only be used on components or template tags.41v-model is missing expression.42v-model value must be a valid JavaScript member expression.43v-model cannot be used on v-for or v-slot scope variables because they are not writable.44v-model cannot be used on a prop, because local prop bindings are not writable. Use a v-bind binding combined with a v-on listener that emits update:x event instead.45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component.47\"prefixIdentifiers\" option is not supported in this build of compiler.48ES module mode is not supported in this build of compiler.49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.50\"scopeId\" option is only supported in module mode.51vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, vnode-mounted should be changed to vue:mounted. vnode-* hooks support has been removed in 3.4.52v-bind with same-name shorthand only allows static argument.53v-html is missing expression.54v-html will override element children.55v-text is missing expression.56v-text will override element children.57v-model can only be used on input, textarea and select elements.58v-model argument is not supported on plain elements.59v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.60Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.61v-show is missing expression.62Transition expects exactly one child element or component.63Tags with side effect (script and style) are ignored in client component templates.Edit this page on GitHub",
      "code_blocks": [
        "app.config.errorHandler",
        "onErrorCaptured",
        "errorCaptured"
      ],
      "chunks": [
        {
          "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app config errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "CodeMessage0Illegal comment 1CDATA section is allowed only in XML context 2Duplicate attribute 3End tag cannot have attributes 4Illegal '/' in tags 5Unexpected EOF in tag 6Unexpected EOF in CDATA section 7Unexpected EOF in comment 8Unexpected EOF in script 9Unexpected EOF in tag 10Incorrectly closed comment 11Incorrectly opened comment 12Illegal tag name Use 'lt;' to print '' 13Attribute value was expected 14End tag name was expected 15Whitespace was expected 16Unexpected ' --' in comment",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C () 18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`) 19Attribute name cannot start with '=' 20Unexpected null character 21' ' is allowed only in XML context 22Illegal '/' in tags 23Invalid end tag 24Element is missing end tag 25Interpolation end sign was not found 26Legal directive name was expected 27End bracket for dynamic directive argument was not found",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Note that dynamic directive argument cannot contain spaces 28v-if/v-else-if is missing expression 29v-if/else branches must use unique keys 30v-else/v-else-if has no adjacent v-if or v-else-if 31v-for is missing expression 32v-for has invalid expression 33template v-for key should be placed on the template tag 34v-bind is missing expression 35v-on is missing expression 36Unexpected custom directive on slot outlet 37Mixed v-slot usage on both the component and nested template",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity 38Duplicate slot names found 39Extraneous children found when component already has explicitly named default slot These children will be ignored 40v-slot can only be used on components or template tags 41v-model is missing expression 42v-model value must be a valid JavaScript member expression 43v-model cannot be used on v-for or v-slot scope variables because they are not writable",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "44v-model cannot be used on a prop, because local prop bindings are not writable Use a v-bind binding combined with a v-on listener that emits update:x event instead 45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component 47\"prefixIdentifiers\" option is not supported in this build of compiler 48ES module mode is not supported in this build of compiler 49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "50\"scopeId\" option is only supported in module mode 51vnode-* hooks in templates are no longer supported Use the vue: prefix instead For example, vnode-mounted should be changed to vue:mounted vnode-* hooks support has been removed in 3 4 52v-bind with same-name shorthand only allows static argument 53v-html is missing expression 54v-html will override element children 55v-text is missing expression 56v-text will override element children",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "57v-model can only be used on input, textarea and select elements 58v-model argument is not supported on plain elements 59v-model cannot be used on file inputs since they are read-only Use a v-on:change listener instead 60Unnecessary value binding used alongside v-model It will interfere with v-model's behavior 61v-show is missing expression 62Transition expects exactly one child element or component 63Tags with side effect (script and style) are ignored in client component templates",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Edit this page on GitHub",
          "url": "https://vuejs.org/error-reference/#runtime-errors",
          "library": "vue",
          "chunk_id": "vue_9"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/error-reference/#compiler-errors",
      "title": "Production Error Code Reference | Vue.js",
      "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app.config.errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings.CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages.CodeMessage0Illegal comment.1CDATA section is allowed only in XML context.2Duplicate attribute.3End tag cannot have attributes.4Illegal '/' in tags.5Unexpected EOF in tag.6Unexpected EOF in CDATA section.7Unexpected EOF in comment.8Unexpected EOF in script.9Unexpected EOF in tag.10Incorrectly closed comment.11Incorrectly opened comment.12Illegal tag name. Use 'lt;' to print ''.13Attribute value was expected.14End tag name was expected.15Whitespace was expected.16Unexpected '!--' in comment.17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C ().18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`).19Attribute name cannot start with '='.20Unexpected null character.21'?' is allowed only in XML context.22Illegal '/' in tags.23Invalid end tag.24Element is missing end tag.25Interpolation end sign was not found.26Legal directive name was expected.27End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.28v-if/v-else-if is missing expression.29v-if/else branches must use unique keys.30v-else/v-else-if has no adjacent v-if or v-else-if.31v-for is missing expression.32v-for has invalid expression.33template v-for key should be placed on the template tag.34v-bind is missing expression.35v-on is missing expression.36Unexpected custom directive on slot outlet.37Mixed v-slot usage on both the component and nested template. When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity.38Duplicate slot names found. 39Extraneous children found when component already has explicitly named default slot. These children will be ignored.40v-slot can only be used on components or template tags.41v-model is missing expression.42v-model value must be a valid JavaScript member expression.43v-model cannot be used on v-for or v-slot scope variables because they are not writable.44v-model cannot be used on a prop, because local prop bindings are not writable. Use a v-bind binding combined with a v-on listener that emits update:x event instead.45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component.47\"prefixIdentifiers\" option is not supported in this build of compiler.48ES module mode is not supported in this build of compiler.49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.50\"scopeId\" option is only supported in module mode.51vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, vnode-mounted should be changed to vue:mounted. vnode-* hooks support has been removed in 3.4.52v-bind with same-name shorthand only allows static argument.53v-html is missing expression.54v-html will override element children.55v-text is missing expression.56v-text will override element children.57v-model can only be used on input, textarea and select elements.58v-model argument is not supported on plain elements.59v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.60Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.61v-show is missing expression.62Transition expects exactly one child element or component.63Tags with side effect (script and style) are ignored in client component templates.Edit this page on GitHub",
      "code_blocks": [
        "app.config.errorHandler",
        "onErrorCaptured",
        "errorCaptured"
      ],
      "chunks": [
        {
          "content": "Production Error Code Reference Runtime Errors In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:app config errorHandleronErrorCaptured (Composition API)errorCaptured (Options API)The following table maps the codes to their original full information strings",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "CodeMessage0setup function1render function2watcher getter3watcher callback4watcher cleanup function5native event handler6component event handler7vnode hook8directive hook9transition hook10app errorHandler11app warnHandler12ref function13async component loader14scheduler flush15component update16app unmount cleanup functionspserverPrefetch hookbcbeforeCreate hookccreated hookbmbeforeMount hookmmounted hookbubeforeUpdate hookuupdatedbumbeforeUnmount hookumunmounted hookaactivated hookdadeactivated hookecerrorCaptured hookrtcrenderTracked hookrtgrenderTriggered hookCompiler Errors The following table provides a mapping of the production compiler error codes to their original messages",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "CodeMessage0Illegal comment 1CDATA section is allowed only in XML context 2Duplicate attribute 3End tag cannot have attributes 4Illegal '/' in tags 5Unexpected EOF in tag 6Unexpected EOF in CDATA section 7Unexpected EOF in comment 8Unexpected EOF in script 9Unexpected EOF in tag 10Incorrectly closed comment 11Incorrectly opened comment 12Illegal tag name Use 'lt;' to print '' 13Attribute value was expected 14End tag name was expected 15Whitespace was expected 16Unexpected ' --' in comment",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "17Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C () 18Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (), U+003D (=), and U+0060 (`) 19Attribute name cannot start with '=' 20Unexpected null character 21' ' is allowed only in XML context 22Illegal '/' in tags 23Invalid end tag 24Element is missing end tag 25Interpolation end sign was not found 26Legal directive name was expected 27End bracket for dynamic directive argument was not found",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Note that dynamic directive argument cannot contain spaces 28v-if/v-else-if is missing expression 29v-if/else branches must use unique keys 30v-else/v-else-if has no adjacent v-if or v-else-if 31v-for is missing expression 32v-for has invalid expression 33template v-for key should be placed on the template tag 34v-bind is missing expression 35v-on is missing expression 36Unexpected custom directive on slot outlet 37Mixed v-slot usage on both the component and nested template",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "When there are multiple named slots, all slots should use template syntax to avoid scope ambiguity 38Duplicate slot names found 39Extraneous children found when component already has explicitly named default slot These children will be ignored 40v-slot can only be used on components or template tags 41v-model is missing expression 42v-model value must be a valid JavaScript member expression 43v-model cannot be used on v-for or v-slot scope variables because they are not writable",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "44v-model cannot be used on a prop, because local prop bindings are not writable Use a v-bind binding combined with a v-on listener that emits update:x event instead 45Error parsing JavaScript expression: 46KeepAlive expects exactly one child component 47\"prefixIdentifiers\" option is not supported in this build of compiler 48ES module mode is not supported in this build of compiler 49\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "50\"scopeId\" option is only supported in module mode 51vnode-* hooks in templates are no longer supported Use the vue: prefix instead For example, vnode-mounted should be changed to vue:mounted vnode-* hooks support has been removed in 3 4 52v-bind with same-name shorthand only allows static argument 53v-html is missing expression 54v-html will override element children 55v-text is missing expression 56v-text will override element children",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "57v-model can only be used on input, textarea and select elements 58v-model argument is not supported on plain elements 59v-model cannot be used on file inputs since they are read-only Use a v-on:change listener instead 60Unnecessary value binding used alongside v-model It will interfere with v-model's behavior 61v-show is missing expression 62Transition expects exactly one child element or component 63Tags with side effect (script and style) are ignored in client component templates",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Edit this page on GitHub",
          "url": "https://vuejs.org/error-reference/#compiler-errors",
          "library": "vue",
          "chunk_id": "vue_9"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/#VPContent",
      "title": "API Reference | Vue.js",
      "content": "API ReferenceFilterGlobal APIApplicationcreateApp()createSSRApp()app.mount()app.unmount()app.onUnmount()app.component()app.directive()app.use()app.mixin()app.provide()app.runWithContext()app.versionapp.configapp.config.errorHandlerapp.config.warnHandlerapp.config.performanceapp.config.compilerOptionsapp.config.globalPropertiesapp.config.optionMergeStrategiesapp.config.idPrefixapp.config.throwUnhandledErrorInProductionGeneralversionnextTick()defineComponent()defineAsyncComponent()Composition APIsetup()Basic UsageAccessing PropsSetup ContextUsage with Render FunctionsReactivity: Coreref()computed()reactive()readonly()watchEffect()watchPostEffect()watchSyncEffect()watch()onWatcherCleanup()Reactivity: UtilitiesisRef()unref()toRef()toValue()toRefs()isProxy()isReactive()isReadonly()Reactivity: AdvancedshallowRef()triggerRef()customRef()shallowReactive()shallowReadonly()toRaw()markRaw()effectScope()getCurrentScope()onScopeDispose()Lifecycle HooksonMounted()onUpdated()onUnmounted()onBeforeMount()onBeforeUpdate()onBeforeUnmount()onErrorCaptured()onRenderTracked()onRenderTriggered()onActivated()onDeactivated()onServerPrefetch()Dependency Injectionprovide()inject()hasInjectionContext()HelpersuseAttrs()useSlots()useModel()useTemplateRef()useId()Options APIOptions: StatedatapropscomputedmethodswatchemitsexposeOptions: RenderingtemplaterendercompilerOptionsslotsOptions: LifecyclebeforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggeredactivateddeactivatedserverPrefetchOptions: CompositionprovideinjectmixinsextendsOptions: MiscnameinheritAttrscomponentsdirectivesComponent Instancedatapropseloptionsparentrootslotsrefsattrswatch()emit()forceUpdate()nextTick()Built-insDirectivesv-textv-htmlv-showv-ifv-elsev-else-ifv-forv-onv-bindv-modelv-slotv-prev-oncev-memov-cloakComponentsTransitionTransitionGroupKeepAliveTeleportSuspenseSpecial ElementscomponentslottemplateSpecial AttributeskeyrefisSingle-File ComponentSyntax SpecificationOverviewLanguage BlocksAutomatic Name InferencePre-Processorssrc ImportsCommentsscript setupBasic SyntaxReactivityUsing ComponentsUsing Custom DirectivesdefineProps()  defineEmits()defineModel()defineExpose()defineOptions()defineSlots()useSlots()  useAttrs()Usage alongside normal scriptTop-level awaitImport StatementsGenericsRestrictionsCSS FeaturesScoped CSSCSS Modulesv-bind() in CSSAdvanced APIsCustom ElementsdefineCustomElement()useHost()useShadowRoot()this.hostRender Functionh()mergeProps()cloneVNode()isVNode()resolveComponent()resolveDirective()withDirectives()withModifiers()Server-Side RenderingrenderToString()renderToNodeStream()pipeToNodeWritable()renderToWebStream()pipeToWebWritable()renderToSimpleStream()useSSRContext()data-allow-mismatchTypeScript Utility TypesPropTypeTMaybeRefTMaybeRefOrGetterTExtractPropTypesTExtractPublicPropTypesTComponentCustomPropertiesComponentCustomOptionsComponentCustomPropsCSSPropertiesCustom RenderercreateRenderer()Compile-Time Flags__VUE_OPTIONS_API____VUE_PROD_DEVTOOLS____VUE_PROD_HYDRATION_MISMATCH_DETAILS__Configuration Guides",
      "code_blocks": [],
      "chunks": [
        {
          "content": "API ReferenceFilterGlobal APIApplicationcreateApp()createSSRApp()app mount()app unmount()app onUnmount()app component()app directive()app use()app mixin()app provide()app runWithContext()app versionapp configapp config errorHandlerapp config warnHandlerapp config performanceapp config compilerOptionsapp config globalPropertiesapp config optionMergeStrategiesapp config idPrefixapp config",
          "url": "https://vuejs.org/api/#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "throwUnhandledErrorInProductionGeneralversionnextTick()defineComponent()defineAsyncComponent()Composition APIsetup()Basic UsageAccessing PropsSetup ContextUsage with Render FunctionsReactivity: Coreref()computed()reactive()readonly()watchEffect()watchPostEffect()watchSyncEffect()watch()onWatcherCleanup()Reactivity: UtilitiesisRef()unref()toRef()toValue()toRefs()isProxy()isReactive()isReadonly()Reactivity: AdvancedshallowRef()triggerRef()customRef()shallowReactive()shallowReadonly()toRaw()markRaw()effectScope()getCurrentScope()onScopeDispose()Lifecycle HooksonMounted()onUpdated()onUnmounted()onBeforeMount()onBeforeUpdate()onBeforeUnmount()onErrorCaptured()onRenderTracked()onRenderTriggered()onActivated()onDeactivated()onServerPrefetch()Dependency Injectionprovide()inject()hasInjectionContext()HelpersuseAttrs()useSlots()useModel()useTemplateRef()useId()Options APIOptions: StatedatapropscomputedmethodswatchemitsexposeOptions: RenderingtemplaterendercompilerOptionsslotsOptions: LifecyclebeforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggeredactivateddeactivatedserverPrefetchOptions: CompositionprovideinjectmixinsextendsOptions: MiscnameinheritAttrscomponentsdirectivesComponent Instancedatapropseloptionsparentrootslotsrefsattrswatch()emit()forceUpdate()nextTick()Built-insDirectivesv-textv-htmlv-showv-ifv-elsev-else-ifv-forv-onv-bindv-modelv-slotv-prev-oncev-memov-cloakComponentsTransitionTransitionGroupKeepAliveTeleportSuspenseSpecial ElementscomponentslottemplateSpecial AttributeskeyrefisSingle-File ComponentSyntax SpecificationOverviewLanguage BlocksAutomatic Name InferencePre-Processorssrc ImportsCommentsscript setupBasic SyntaxReactivityUsing ComponentsUsing Custom DirectivesdefineProps()  defineEmits()defineModel()defineExpose()defineOptions()defineSlots()useSlots()  useAttrs()Usage alongside normal scriptTop-level awaitImport StatementsGenericsRestrictionsCSS FeaturesScoped CSSCSS Modulesv-bind() in CSSAdvanced APIsCustom ElementsdefineCustomElement()useHost()useShadowRoot()this",
          "url": "https://vuejs.org/api/#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "hostRender Functionh()mergeProps()cloneVNode()isVNode()resolveComponent()resolveDirective()withDirectives()withModifiers()Server-Side RenderingrenderToString()renderToNodeStream()pipeToNodeWritable()renderToWebStream()pipeToWebWritable()renderToSimpleStream()useSSRContext()data-allow-mismatchTypeScript Utility TypesPropTypeTMaybeRefTMaybeRefOrGetterTExtractPropTypesTExtractPublicPropTypesTComponentCustomPropertiesComponentCustomOptionsComponentCustomPropsCSSPropertiesCustom RenderercreateRenderer()Compile-Time Flags__VUE_OPTIONS_API____VUE_PROD_DEVTOOLS____VUE_PROD_HYDRATION_MISMATCH_DETAILS__Configuration Guides",
          "url": "https://vuejs.org/api/#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/application#createapp",
      "title": "Application API | Vue.js",
      "content": "Application API createApp() Creates an application instance.Typetsfunction createApp(rootComponent: Component, rootProps?: object): AppDetailsThe first argument is the root component. The second optional argument is the props to be passed to the root component.ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from './App.vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode. Usage is exactly the same as createApp().app.mount() Mounts the application instance in a container element.Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template.In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are mismatches, the existing DOM nodes will be morphed to match the expected output.For each app instance, mount() can only be called once.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.mount('app')Can also mount to an actual DOM element:jsapp.mount(document.body.firstChild)app.unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.Typetsinterface App { unmount(): void }app.onUnmount() Registers a callback to be called when the app is unmounted.Typetsinterface App { onUnmount(callback: () = any): void }app.component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app.component('MyComponent', { /* ... */ }) // retrieve a registered component const MyComponent = app.component('MyComponent')See also Component Registrationapp.directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* ... */ }) // register (object directive) app.directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app.directive('myDirective', () = { /* ... */ }) // retrieve a registered directive const myDirective = app.directive('myDirective')See also Custom Directivesapp.use() Installs a plugin.Typetsinterface App { use(plugin: Plugin, ...options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument.The plugin can either be an object with an install() method, or just a function that will be used as the install() method. The options (second argument of app.use()) will be passed along to the plugin's install() method.When app.use() is called on the same plugin multiple times, the plugin will be installed only once.Examplejsimport { createApp } from 'vue' import MyPlugin from './plugins/MyPlugin' const app = createApp({ /* ... */ }) app.use(MyPlugin)See also Pluginsapp.mixin() Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.For logic reuse, prefer Composables instead.Typetsinterface App { mixin(mixin: ComponentOptions): this }app.provide() Provide a value that can be injected in all descendant components within the application.Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console.log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console.log(this.message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp.runWithContext()app.runWithContext() Only supported in 3.3+Execute a callback with the current app as injection context.Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately. During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.Examplejsimport { inject } from 'vue' app.provide('id', 1) const injected = app.runWithContext(() = { return inject('id') }) console.log(injected) // 1app.version Provides the version of Vue that the application was created with. This is useful inside plugins, where you might need conditional logic based on different Vue versions.Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app.version.split('.')[0]) if (version  3) { console.warn('This plugin requires Vue 3') } } }See also Global API - versionapp.config Every application instance exposes a config object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.jsimport { createApp } from 'vue' const app = createApp(/* ... */) console.log(app.config)app.config.errorHandler Assign a global handler for uncaught errors propagating from within the application.Typetsinterface AppConfig { errorHandler?: ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e.g. which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.Examplejsapp.config.errorHandler = (err, instance, info) = { // handle error, e.g. report to a service }app.config.warnHandler Assign a custom handler for runtime warnings from Vue.Typetsinterface AppConfig { warnHandler?: ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.TIPWarnings only work during development, so this config is ignored in production mode.Examplejsapp.config.warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app.config.performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the performance.mark API.Type: booleanSee also Guide - Performanceapp.config.compilerOptions Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the compilerOptions option.ImportantThis config option is only respected when using the full build (i.e. the standalone vue.js that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead.For vue-loader: pass via the compilerOptions loader option. Also see how to configure it in vue-cli.For vite: pass via vitejs/plugin-vue options.app.config.compilerOptions.isCustomElement Specifies a check method to recognize native custom elements.Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.Examplejs// treat all tags starting with 'ion-' as custom elements app.config.compilerOptions.isCustomElement = (tag) = { return tag.startsWith('ion-') }See also Vue and Web Componentsapp.config.compilerOptions.whitespace Adjusts template whitespace handling behavior.Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space.Whitespace characters between elements that contain newlines are removed.Consecutive whitespace characters in text nodes are condensed into a single space.Setting this option to 'preserve' will disable (2) and (3).Examplejsapp.config.compilerOptions.whitespace = 'preserve'app.config.compilerOptions.delimiters Adjusts the delimiters used for text interpolation within the template.Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.Examplejs// Delimiters changed to ES6 template string style app.config.compilerOptions.delimiters = ['{', '}']app.config.compilerOptions.comments Adjusts treatment of HTML comments in templates.Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production. Setting this option to true will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.Examplejsapp.config.compilerOptions.comments = trueapp.config.globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application.Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue.prototype which is no longer present in Vue 3. As with anything global, this should be used sparingly.If a global property conflicts with a components own property, the component's own property will have higher priority.Usagejsapp.config.globalProperties.msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console.log(this.msg) // 'hello' } }See also Guide - Augmenting Global Properties app.config.optionMergeStrategies An object for defining merging strategies for custom component options.Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).A merge strategy function can be registered for a custom option by assigning it on the app.config.optionMergeStrategies object using the option's name as the key.The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this.options console.log(this.options.msg) } }) // define a custom merge strategy for `msg` app.config.optionMergeStrategies.msg = (parent, child) = { return (parent  '') + (child  '') } app.mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp.config.idPrefix Configure a prefix for all IDs generated via useId() inside this application.Type: stringDefault: undefinedExamplejsapp.config.idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app.config.throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode.Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.By setting app.config.throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode.Edit this page on GitHub",
      "code_blocks": [
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "createApp()",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "app.mount(document.body.firstChild)",
        "app.mount(document.body.firstChild)",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "interface App {\n  version: string\n}",
        "interface App {\n  version: string\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "compilerOptions",
        "@vue/compiler-dom",
        "compilerOptions",
        "@vitejs/plugin-vue",
        "(tag: string) => boolean",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "'condense' | 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "[string, string]",
        "['{{', '}}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "app.config.compilerOptions.comments = true",
        "app.config.compilerOptions.comments = true",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "Vue.prototype",
        "app.config.globalProperties.msg = 'hello'",
        "app.config.globalProperties.msg = 'hello'",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "app.config.optionMergeStrategies",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "app.config.idPrefix = 'myApp'",
        "app.config.idPrefix = 'myApp'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "app.config.throwUnhandledErrorInProduction"
      ],
      "chunks": [
        {
          "content": "Application API createApp() Creates an application instance Typetsfunction createApp(rootComponent: Component, rootProps : object): AppDetailsThe first argument is the root component The second optional argument is the props to be passed to the root component ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from ' /App",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode Usage is exactly the same as createApp() app mount() Mounts the application instance in a container element Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used) Returns the root component instance",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template In SSR hydration mode, it will hydrate the existing DOM nodes inside the container If there are mismatches, the existing DOM nodes will be morphed to match the expected output For each app instance, mount() can only be called once",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app mount('app')Can also mount to an actual DOM element:jsapp mount(document body firstChild)app unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree Typetsinterface App { unmount(): void }app onUnmount() Registers a callback to be called when the app is unmounted Typetsinterface App { onUnmount(callback: () = any): void }app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app component('MyComponent', { /* */ }) // retrieve a registered component const MyComponent = app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "component('MyComponent')See also Component Registrationapp directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* */ }) // register (object directive) app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app directive('myDirective', () = { /* */ }) // retrieve a registered directive const myDirective = app directive('myDirective')See also Custom Directivesapp use() Installs a plugin Typetsinterface App { use(plugin: Plugin, options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "The plugin can either be an object with an install() method, or just a function that will be used as the install() method The options (second argument of app use()) will be passed along to the plugin's install() method When app use() is called on the same plugin multiple times, the plugin will be installed only once Examplejsimport { createApp } from 'vue' import MyPlugin from ' /plugins/MyPlugin' const app = createApp({ /* */ }) app use(MyPlugin)See also Pluginsapp",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "mixin() Applies a global mixin (scoped to the application) A global mixin applies its included options to every component instance in the application Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries Use of mixins, especially global mixins, should be avoided in application code For logic reuse, prefer Composables instead Typetsinterface App { mixin(mixin: ComponentOptions): this }app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "provide() Provide a value that can be injected in all descendant components within the application Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second Returns the application instance itself Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console log(this message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp runWithContext()app runWithContext() Only supported in 3 3+Execute a callback with the current app as injection context",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance The return value of the callback will also be returned Examplejsimport { inject } from 'vue' app provide('id', 1) const injected = app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "runWithContext(() = { return inject('id') }) console log(injected) // 1app version Provides the version of Vue that the application was created with This is useful inside plugins, where you might need conditional logic based on different Vue versions Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app version split(' ')[0]) if (version  3) { console",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "warn('This plugin requires Vue 3') } } }See also Global API - versionapp config Every application instance exposes a config object that contains the configuration settings for that application You can modify its properties (documented below) before mounting your application jsimport { createApp } from 'vue' const app = createApp(/* */) console log(app config)app config errorHandler Assign a global handler for uncaught errors propagating from within the application",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Typetsinterface AppConfig { errorHandler : ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e g which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string You can find the code to string mapping in the Production Error Code Reference Examplejsapp config errorHandler = (err, instance, info) = { // handle error, e g report to a service }app config",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "warnHandler Assign a custom handler for runtime warnings from Vue Typetsinterface AppConfig { warnHandler : ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third It can be used to filter out specific warnings to reduce console verbosity",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done TIPWarnings only work during development, so this config is ignored in production mode Examplejsapp config warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app config",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel Only works in development mode and in browsers that support the performance mark API Type: booleanSee also Guide - Performanceapp config compilerOptions Configure runtime compiler options Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "Note you can also override these options on a per-component basis using the compilerOptions option ImportantThis config option is only respected when using the full build (i e the standalone vue js that can compile templates in the browser) If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead For vue-loader: pass via the compilerOptions loader option Also see how to configure it in vue-cli",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "For vite: pass via vitejs/plugin-vue options app config compilerOptions isCustomElement Specifies a check method to recognize native custom elements Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_20"
        },
        {
          "content": "Examplejs// treat all tags starting with 'ion-' as custom elements app config compilerOptions isCustomElement = (tag) = { return tag startsWith('ion-') }See also Vue and Web Componentsapp config compilerOptions whitespace Adjusts template whitespace handling behavior Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_21"
        },
        {
          "content": "The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space Whitespace characters between elements that contain newlines are removed Consecutive whitespace characters in text nodes are condensed into a single space Setting this option to 'preserve' will disable (2) and (3) Examplejsapp config compilerOptions whitespace = 'preserve'app config compilerOptions",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_22"
        },
        {
          "content": "delimiters Adjusts the delimiters used for text interpolation within the template Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax Examplejs// Delimiters changed to ES6 template string style app config compilerOptions delimiters = ['{', '}']app config compilerOptions comments Adjusts treatment of HTML comments in templates",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_23"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production Setting this option to true will force Vue to preserve comments even in production Comments are always preserved during development This option is typically used when Vue is used with other libraries that rely on HTML comments Examplejsapp config compilerOptions comments = trueapp config",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_24"
        },
        {
          "content": "globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue prototype which is no longer present in Vue 3 As with anything global, this should be used sparingly If a global property conflicts with a components own property, the component's own property will have higher priority Usagejsapp config",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_25"
        },
        {
          "content": "globalProperties msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console log(this msg) // 'hello' } }See also Guide - Augmenting Global Properties app config optionMergeStrategies An object for defining merging strategies for custom component options",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_26"
        },
        {
          "content": "Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins) These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e g mixins or component inheritance) A merge strategy function can be registered for a custom option by assigning it on the app config",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_27"
        },
        {
          "content": "optionMergeStrategies object using the option's name as the key The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this options console log(this options msg) } }) // define a custom merge strategy for `msg` app config optionMergeStrategies",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_28"
        },
        {
          "content": "msg = (parent, child) = { return (parent  '') + (child  '') } app mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp config idPrefix Configure a prefix for all IDs generated via useId() inside this application Type: stringDefault: undefinedExamplejsapp config idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app config throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_29"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application This is to make the error more prominent so that it can be noticed and fixed during development In production, the error will only be logged to the console to minimize the impact to end users",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_30"
        },
        {
          "content": "However, this may prevent errors that only happen in production from being caught by error monitoring services By setting app config throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode Edit this page on GitHub",
          "url": "https://vuejs.org/api/application#createapp",
          "library": "vue",
          "chunk_id": "vue_31"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/application#createssrapp",
      "title": "Application API | Vue.js",
      "content": "Application API createApp() Creates an application instance.Typetsfunction createApp(rootComponent: Component, rootProps?: object): AppDetailsThe first argument is the root component. The second optional argument is the props to be passed to the root component.ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from './App.vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode. Usage is exactly the same as createApp().app.mount() Mounts the application instance in a container element.Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template.In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are mismatches, the existing DOM nodes will be morphed to match the expected output.For each app instance, mount() can only be called once.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.mount('app')Can also mount to an actual DOM element:jsapp.mount(document.body.firstChild)app.unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.Typetsinterface App { unmount(): void }app.onUnmount() Registers a callback to be called when the app is unmounted.Typetsinterface App { onUnmount(callback: () = any): void }app.component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app.component('MyComponent', { /* ... */ }) // retrieve a registered component const MyComponent = app.component('MyComponent')See also Component Registrationapp.directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* ... */ }) // register (object directive) app.directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app.directive('myDirective', () = { /* ... */ }) // retrieve a registered directive const myDirective = app.directive('myDirective')See also Custom Directivesapp.use() Installs a plugin.Typetsinterface App { use(plugin: Plugin, ...options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument.The plugin can either be an object with an install() method, or just a function that will be used as the install() method. The options (second argument of app.use()) will be passed along to the plugin's install() method.When app.use() is called on the same plugin multiple times, the plugin will be installed only once.Examplejsimport { createApp } from 'vue' import MyPlugin from './plugins/MyPlugin' const app = createApp({ /* ... */ }) app.use(MyPlugin)See also Pluginsapp.mixin() Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.For logic reuse, prefer Composables instead.Typetsinterface App { mixin(mixin: ComponentOptions): this }app.provide() Provide a value that can be injected in all descendant components within the application.Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console.log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console.log(this.message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp.runWithContext()app.runWithContext() Only supported in 3.3+Execute a callback with the current app as injection context.Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately. During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.Examplejsimport { inject } from 'vue' app.provide('id', 1) const injected = app.runWithContext(() = { return inject('id') }) console.log(injected) // 1app.version Provides the version of Vue that the application was created with. This is useful inside plugins, where you might need conditional logic based on different Vue versions.Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app.version.split('.')[0]) if (version  3) { console.warn('This plugin requires Vue 3') } } }See also Global API - versionapp.config Every application instance exposes a config object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.jsimport { createApp } from 'vue' const app = createApp(/* ... */) console.log(app.config)app.config.errorHandler Assign a global handler for uncaught errors propagating from within the application.Typetsinterface AppConfig { errorHandler?: ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e.g. which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.Examplejsapp.config.errorHandler = (err, instance, info) = { // handle error, e.g. report to a service }app.config.warnHandler Assign a custom handler for runtime warnings from Vue.Typetsinterface AppConfig { warnHandler?: ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.TIPWarnings only work during development, so this config is ignored in production mode.Examplejsapp.config.warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app.config.performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the performance.mark API.Type: booleanSee also Guide - Performanceapp.config.compilerOptions Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the compilerOptions option.ImportantThis config option is only respected when using the full build (i.e. the standalone vue.js that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead.For vue-loader: pass via the compilerOptions loader option. Also see how to configure it in vue-cli.For vite: pass via vitejs/plugin-vue options.app.config.compilerOptions.isCustomElement Specifies a check method to recognize native custom elements.Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.Examplejs// treat all tags starting with 'ion-' as custom elements app.config.compilerOptions.isCustomElement = (tag) = { return tag.startsWith('ion-') }See also Vue and Web Componentsapp.config.compilerOptions.whitespace Adjusts template whitespace handling behavior.Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space.Whitespace characters between elements that contain newlines are removed.Consecutive whitespace characters in text nodes are condensed into a single space.Setting this option to 'preserve' will disable (2) and (3).Examplejsapp.config.compilerOptions.whitespace = 'preserve'app.config.compilerOptions.delimiters Adjusts the delimiters used for text interpolation within the template.Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.Examplejs// Delimiters changed to ES6 template string style app.config.compilerOptions.delimiters = ['{', '}']app.config.compilerOptions.comments Adjusts treatment of HTML comments in templates.Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production. Setting this option to true will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.Examplejsapp.config.compilerOptions.comments = trueapp.config.globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application.Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue.prototype which is no longer present in Vue 3. As with anything global, this should be used sparingly.If a global property conflicts with a components own property, the component's own property will have higher priority.Usagejsapp.config.globalProperties.msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console.log(this.msg) // 'hello' } }See also Guide - Augmenting Global Properties app.config.optionMergeStrategies An object for defining merging strategies for custom component options.Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).A merge strategy function can be registered for a custom option by assigning it on the app.config.optionMergeStrategies object using the option's name as the key.The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this.options console.log(this.options.msg) } }) // define a custom merge strategy for `msg` app.config.optionMergeStrategies.msg = (parent, child) = { return (parent  '') + (child  '') } app.mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp.config.idPrefix Configure a prefix for all IDs generated via useId() inside this application.Type: stringDefault: undefinedExamplejsapp.config.idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app.config.throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode.Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.By setting app.config.throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode.Edit this page on GitHub",
      "code_blocks": [
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "createApp()",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "app.mount(document.body.firstChild)",
        "app.mount(document.body.firstChild)",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "interface App {\n  version: string\n}",
        "interface App {\n  version: string\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "compilerOptions",
        "@vue/compiler-dom",
        "compilerOptions",
        "@vitejs/plugin-vue",
        "(tag: string) => boolean",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "'condense' | 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "[string, string]",
        "['{{', '}}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "app.config.compilerOptions.comments = true",
        "app.config.compilerOptions.comments = true",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "Vue.prototype",
        "app.config.globalProperties.msg = 'hello'",
        "app.config.globalProperties.msg = 'hello'",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "app.config.optionMergeStrategies",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "app.config.idPrefix = 'myApp'",
        "app.config.idPrefix = 'myApp'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "app.config.throwUnhandledErrorInProduction"
      ],
      "chunks": [
        {
          "content": "Application API createApp() Creates an application instance Typetsfunction createApp(rootComponent: Component, rootProps : object): AppDetailsThe first argument is the root component The second optional argument is the props to be passed to the root component ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from ' /App",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode Usage is exactly the same as createApp() app mount() Mounts the application instance in a container element Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used) Returns the root component instance",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template In SSR hydration mode, it will hydrate the existing DOM nodes inside the container If there are mismatches, the existing DOM nodes will be morphed to match the expected output For each app instance, mount() can only be called once",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app mount('app')Can also mount to an actual DOM element:jsapp mount(document body firstChild)app unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree Typetsinterface App { unmount(): void }app onUnmount() Registers a callback to be called when the app is unmounted Typetsinterface App { onUnmount(callback: () = any): void }app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app component('MyComponent', { /* */ }) // retrieve a registered component const MyComponent = app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "component('MyComponent')See also Component Registrationapp directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* */ }) // register (object directive) app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app directive('myDirective', () = { /* */ }) // retrieve a registered directive const myDirective = app directive('myDirective')See also Custom Directivesapp use() Installs a plugin Typetsinterface App { use(plugin: Plugin, options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "The plugin can either be an object with an install() method, or just a function that will be used as the install() method The options (second argument of app use()) will be passed along to the plugin's install() method When app use() is called on the same plugin multiple times, the plugin will be installed only once Examplejsimport { createApp } from 'vue' import MyPlugin from ' /plugins/MyPlugin' const app = createApp({ /* */ }) app use(MyPlugin)See also Pluginsapp",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "mixin() Applies a global mixin (scoped to the application) A global mixin applies its included options to every component instance in the application Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries Use of mixins, especially global mixins, should be avoided in application code For logic reuse, prefer Composables instead Typetsinterface App { mixin(mixin: ComponentOptions): this }app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "provide() Provide a value that can be injected in all descendant components within the application Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second Returns the application instance itself Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console log(this message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp runWithContext()app runWithContext() Only supported in 3 3+Execute a callback with the current app as injection context",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance The return value of the callback will also be returned Examplejsimport { inject } from 'vue' app provide('id', 1) const injected = app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "runWithContext(() = { return inject('id') }) console log(injected) // 1app version Provides the version of Vue that the application was created with This is useful inside plugins, where you might need conditional logic based on different Vue versions Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app version split(' ')[0]) if (version  3) { console",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "warn('This plugin requires Vue 3') } } }See also Global API - versionapp config Every application instance exposes a config object that contains the configuration settings for that application You can modify its properties (documented below) before mounting your application jsimport { createApp } from 'vue' const app = createApp(/* */) console log(app config)app config errorHandler Assign a global handler for uncaught errors propagating from within the application",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Typetsinterface AppConfig { errorHandler : ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e g which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string You can find the code to string mapping in the Production Error Code Reference Examplejsapp config errorHandler = (err, instance, info) = { // handle error, e g report to a service }app config",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "warnHandler Assign a custom handler for runtime warnings from Vue Typetsinterface AppConfig { warnHandler : ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third It can be used to filter out specific warnings to reduce console verbosity",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done TIPWarnings only work during development, so this config is ignored in production mode Examplejsapp config warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app config",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel Only works in development mode and in browsers that support the performance mark API Type: booleanSee also Guide - Performanceapp config compilerOptions Configure runtime compiler options Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "Note you can also override these options on a per-component basis using the compilerOptions option ImportantThis config option is only respected when using the full build (i e the standalone vue js that can compile templates in the browser) If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead For vue-loader: pass via the compilerOptions loader option Also see how to configure it in vue-cli",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "For vite: pass via vitejs/plugin-vue options app config compilerOptions isCustomElement Specifies a check method to recognize native custom elements Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_20"
        },
        {
          "content": "Examplejs// treat all tags starting with 'ion-' as custom elements app config compilerOptions isCustomElement = (tag) = { return tag startsWith('ion-') }See also Vue and Web Componentsapp config compilerOptions whitespace Adjusts template whitespace handling behavior Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_21"
        },
        {
          "content": "The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space Whitespace characters between elements that contain newlines are removed Consecutive whitespace characters in text nodes are condensed into a single space Setting this option to 'preserve' will disable (2) and (3) Examplejsapp config compilerOptions whitespace = 'preserve'app config compilerOptions",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_22"
        },
        {
          "content": "delimiters Adjusts the delimiters used for text interpolation within the template Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax Examplejs// Delimiters changed to ES6 template string style app config compilerOptions delimiters = ['{', '}']app config compilerOptions comments Adjusts treatment of HTML comments in templates",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_23"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production Setting this option to true will force Vue to preserve comments even in production Comments are always preserved during development This option is typically used when Vue is used with other libraries that rely on HTML comments Examplejsapp config compilerOptions comments = trueapp config",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_24"
        },
        {
          "content": "globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue prototype which is no longer present in Vue 3 As with anything global, this should be used sparingly If a global property conflicts with a components own property, the component's own property will have higher priority Usagejsapp config",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_25"
        },
        {
          "content": "globalProperties msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console log(this msg) // 'hello' } }See also Guide - Augmenting Global Properties app config optionMergeStrategies An object for defining merging strategies for custom component options",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_26"
        },
        {
          "content": "Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins) These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e g mixins or component inheritance) A merge strategy function can be registered for a custom option by assigning it on the app config",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_27"
        },
        {
          "content": "optionMergeStrategies object using the option's name as the key The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this options console log(this options msg) } }) // define a custom merge strategy for `msg` app config optionMergeStrategies",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_28"
        },
        {
          "content": "msg = (parent, child) = { return (parent  '') + (child  '') } app mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp config idPrefix Configure a prefix for all IDs generated via useId() inside this application Type: stringDefault: undefinedExamplejsapp config idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app config throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_29"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application This is to make the error more prominent so that it can be noticed and fixed during development In production, the error will only be logged to the console to minimize the impact to end users",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_30"
        },
        {
          "content": "However, this may prevent errors that only happen in production from being caught by error monitoring services By setting app config throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode Edit this page on GitHub",
          "url": "https://vuejs.org/api/application#createssrapp",
          "library": "vue",
          "chunk_id": "vue_31"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
      "title": "Tooling | Vue.js",
      "content": "Tooling Try It Online You don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:Vue SFC PlaygroundAlways deployed from latest commitDesigned for inspecting component compilation resultsVue + Vite on StackBlitzIDE-like environment running actual Vite dev server in the browserClosest to local setupIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs.Project Scaffolding Vite Vite is a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!To get started with Vite + Vue, simply run:npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4.11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool.To learn more about Vite, check out the Vite docs.To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for vitejs/plugin-vue.Both online playgrounds mentioned above also support downloading files as a Vite project.Vue CLI Vue CLI is the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases.For information on migrating from Vue CLI to Vite:Vue CLI - Vite Migration Guide from VueSchool.ioTools / Plugins that help with auto migrationNote on In-Browser Template Compilation When using Vue without a build step, component templates are written either directly in the page's HTML or as inlined JavaScript strings. In such cases, Vue needs to ship the template compiler to the browser in order to perform on-the-fly template compilation. On the other hand, the compiler would be unnecessary if we pre-compile the templates with a build step. To reduce client bundle size, Vue provides different \"builds\" optimized for different use cases.Build files that start with vue.runtime.* are runtime-only builds: they do not include the compiler. When using these builds, all templates must be pre-compiled via a build step.Build files that do not include .runtime are full builds: they include the compiler and support compiling templates directly in the browser. However, they will increase the payload by 14kb.Our default tooling setups use the runtime-only build since all templates in SFCs are pre-compiled. If, for some reason, you need in-browser template compilation even with a build step, you can do so by configuring the build tool to alias vue to vue/dist/vue.esm-bundler.js instead.If you are looking for a lighter-weight alternative for no-build-step usage, check out petite-vue.IDE Support The recommended IDE setup is VS Code + the Vue - Official extension (previously Volar). The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props.TIPVue - Official replaces Vetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.WebStorm also provides great built-in support for Vue SFCs.Other IDEs that support the Language Service Protocol (LSP) can also leverage Volar's core functionalities via LSP:Sublime Text support via LSP-Volar.vim / Neovim support via coc-volar.emacs support via lsp-modeBrowser Devtools The Vue browser devtools extension allows you to explore a Vue app's component tree, inspect the state of individual components, track state management events, and profile performance.DocumentationChrome ExtensionVite PluginStandalone Electron appTypeScript Main article: Using Vue with TypeScript.Vue - Official extension provides type checking for SFCs using script lang=\"ts\" blocks, including template expressions and cross-component props validation.Use vue-tsc for performing the same type checking from the command line, or for generating d.ts files for SFCs.Testing Main article: Testing Guide.Cypress is recommended for E2E tests. It can also be used for component testing for Vue SFCs via the Cypress Component Test Runner.Vitest is a test runner created by Vue / Vite team members that focuses on speed. It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing.Jest can be made to work with Vite via vite-jest. However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration.Linting The Vue team maintains eslint-plugin-vue, an ESLint plugin that supports SFC-specific linting rules.Users previously using Vue CLI may be used to having linters configured via webpack loaders. However when using a Vite-based build setup, our general recommendation is:npm install -D eslint eslint-plugin-vue, then follow eslint-plugin-vue's configuration guide.Setup ESLint IDE extensions, for example ESLint for VS Code, so you get linter feedback right in your editor during development. This also avoids unnecessary linting cost when starting the dev server.Run ESLint as part of the production build command, so you get full linter feedback before shipping to production.(Optional) Setup tools like lint-staged to automatically lint modified files on git commit.Formatting The Vue - Official VS Code extension provides formatting for Vue SFCs out of the box.Alternatively, Prettier provides built-in Vue SFC formatting support.SFC Custom Block Integrations Custom blocks are compiled into imports to the same Vue file with different request queries. It is up to the underlying build tool to handle these import requests.If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript. ExampleIf using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks. ExampleLower-Level Packages vue/compiler-sfc DocsThis package is part of the Vue core monorepo and is always published with the same version as the main vue package. It is included as a dependency of the main vue package and proxied under vue/compiler-sfc so you don't need to install it individually.The package itself provides lower-level utilities for processing Vue SFCs and is only meant for tooling authors that need to support Vue SFCs in custom tools.TIPAlways prefer using this package via the vue/compiler-sfc deep import since this ensures its version is in sync with the Vue runtime.vitejs/plugin-vue DocsOfficial plugin that provides Vue SFC support in Vite.vue-loader DocsThe official loader that provides Vue SFC support in webpack. If you are using Vue CLI, also see docs on modifying vue-loader options in Vue CLI.Other Online Playgrounds VueUse PlaygroundVue + Vite on Repl.itVue on CodeSandboxVue on CodepenVue on WebComponents.devEdit this page on GitHub",
      "code_blocks": [
        "$ npm create vue@latest",
        "$ npm create vue@latest",
        "$ pnpm create vue@latest",
        "$ pnpm create vue@latest",
        "# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest",
        "$ bun create vue@latest",
        "$ bun create vue@latest",
        "vue.runtime.*",
        "vue/dist/vue.esm-bundler.js",
        "<script lang=\"ts\">",
        "npm install -D eslint eslint-plugin-vue",
        "eslint-plugin-vue",
        "@vue/compiler-sfc",
        "vue/compiler-sfc",
        "vue/compiler-sfc",
        "@vitejs/plugin-vue"
      ],
      "chunks": [
        {
          "content": "Tooling Try It Online You don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:Vue SFC PlaygroundAlways deployed from latest commitDesigned for inspecting component compilation resultsVue + Vite on StackBlitzIDE-like environment running actual Vite dev server in the browserClosest to local setupIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "Project Scaffolding Vite Vite is a lightweight and fast build tool with first-class Vue SFC support It is created by Evan You, who is also the author of Vue To get started with Vite + Vue, simply run:npmpnpmyarnbunsh npm create vuelatestsh pnpm create vuelatestsh For Yarn Modern (v2+)  yarn create vuelatest  For Yarn v4 11  yarn dlx create-vuelatestsh bun create vuelatestThis command will install and execute create-vue, the official Vue project scaffolding tool",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "To learn more about Vite, check out the Vite docs To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for vitejs/plugin-vue Both online playgrounds mentioned above also support downloading files as a Vite project Vue CLI Vue CLI is the official webpack-based toolchain for Vue It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Vite will provide superior developer experience in most cases For information on migrating from Vue CLI to Vite:Vue CLI - Vite Migration Guide from VueSchool ioTools / Plugins that help with auto migrationNote on In-Browser Template Compilation When using Vue without a build step, component templates are written either directly in the page's HTML or as inlined JavaScript strings",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "In such cases, Vue needs to ship the template compiler to the browser in order to perform on-the-fly template compilation On the other hand, the compiler would be unnecessary if we pre-compile the templates with a build step To reduce client bundle size, Vue provides different \"builds\" optimized for different use cases Build files that start with vue runtime * are runtime-only builds: they do not include the compiler When using these builds, all templates must be pre-compiled via a build step",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "Build files that do not include runtime are full builds: they include the compiler and support compiling templates directly in the browser However, they will increase the payload by 14kb Our default tooling setups use the runtime-only build since all templates in SFCs are pre-compiled If, for some reason, you need in-browser template compilation even with a build step, you can do so by configuring the build tool to alias vue to vue/dist/vue esm-bundler js instead",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "If you are looking for a lighter-weight alternative for no-build-step usage, check out petite-vue IDE Support The recommended IDE setup is VS Code + the Vue - Official extension (previously Volar) The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props TIPVue - Official replaces Vetur, our previous official VS Code extension for Vue 2 If you have Vetur currently installed, make sure to disable it in Vue 3 projects",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "WebStorm also provides great built-in support for Vue SFCs Other IDEs that support the Language Service Protocol (LSP) can also leverage Volar's core functionalities via LSP:Sublime Text support via LSP-Volar vim / Neovim support via coc-volar emacs support via lsp-modeBrowser Devtools The Vue browser devtools extension allows you to explore a Vue app's component tree, inspect the state of individual components, track state management events, and profile performance",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "DocumentationChrome ExtensionVite PluginStandalone Electron appTypeScript Main article: Using Vue with TypeScript Vue - Official extension provides type checking for SFCs using script lang=\"ts\" blocks, including template expressions and cross-component props validation Use vue-tsc for performing the same type checking from the command line, or for generating d ts files for SFCs Testing Main article: Testing Guide Cypress is recommended for E2E tests",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "It can also be used for component testing for Vue SFCs via the Cypress Component Test Runner Vitest is a test runner created by Vue / Vite team members that focuses on speed It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing Jest can be made to work with Vite via vite-jest",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration Linting The Vue team maintains eslint-plugin-vue, an ESLint plugin that supports SFC-specific linting rules Users previously using Vue CLI may be used to having linters configured via webpack loaders",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "However when using a Vite-based build setup, our general recommendation is:npm install -D eslint eslint-plugin-vue, then follow eslint-plugin-vue's configuration guide Setup ESLint IDE extensions, for example ESLint for VS Code, so you get linter feedback right in your editor during development This also avoids unnecessary linting cost when starting the dev server Run ESLint as part of the production build command, so you get full linter feedback before shipping to production",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "(Optional) Setup tools like lint-staged to automatically lint modified files on git commit Formatting The Vue - Official VS Code extension provides formatting for Vue SFCs out of the box Alternatively, Prettier provides built-in Vue SFC formatting support SFC Custom Block Integrations Custom blocks are compiled into imports to the same Vue file with different request queries It is up to the underlying build tool to handle these import requests",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript ExampleIf using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks ExampleLower-Level Packages vue/compiler-sfc DocsThis package is part of the Vue core monorepo and is always published with the same version as the main vue package",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "It is included as a dependency of the main vue package and proxied under vue/compiler-sfc so you don't need to install it individually The package itself provides lower-level utilities for processing Vue SFCs and is only meant for tooling authors that need to support Vue SFCs in custom tools TIPAlways prefer using this package via the vue/compiler-sfc deep import since this ensures its version is in sync with the Vue runtime",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "vitejs/plugin-vue DocsOfficial plugin that provides Vue SFC support in Vite vue-loader DocsThe official loader that provides Vue SFC support in webpack If you are using Vue CLI, also see docs on modifying vue-loader options in Vue CLI Other Online Playgrounds VueUse PlaygroundVue + Vite on Repl itVue on CodeSandboxVue on CodepenVue on WebComponents devEdit this page on GitHub",
          "url": "https://vuejs.org/guide/scaling-up/tooling#VPContent",
          "library": "vue",
          "chunk_id": "vue_15"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/about/community-guide#VPContent",
      "title": "Community Guide | Vue.js",
      "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!Now we'll answer both what the community can do for you and what you can do for the community.Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate.Stay in the Know Follow our official Twitter account.Follow our team members on Twitter or GitHub.Follow the RFC discussions.Subscribe to the official blog.Get Support Discord Chat: A place for Vue devs to meet and chat in real time.Forum: The best place to ask questions and get answers about Vue and its ecosystem.DEV Community: Share and discuss Vue related topics on Dev.to.Meetups: Want to find local Vue enthusiasts like yourself? Interested in becoming a community leader? We have the help and support you need right here!GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for. Please respect the rules specified in each repository's issue template.Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue.Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people.Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use.Made with Vue.js: showcases of projects and libraries made with Vue.The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem.What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community. Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution.Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue.We receive many issues in our repositories on GitHub every single day. Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team. By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work.You don't have to triage an issue with the goal of fixing it (although that would be nice too). Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time.Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make.The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture. Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests.Bug fixes are welcome at any time. For new features, it is best to discuss the use case and implementation details first in the RFC repo.Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials. It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media.Watch a repo you care about. This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests.Translate Docs I hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?See the Translations guide for more details on how you can get involved.Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup. Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow.Start your own meetup. If there's not already a Vue meetup in your area, you can start your own! Use the resources at events.vuejs.org to help you succeed!Help meetup organizers. There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success.If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events!Edit this page on GitHub",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it So welcome Now we'll answer both what the community can do for you and what you can do for the community Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate Stay in the Know Follow our official Twitter account Follow our team members on Twitter or GitHub",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "Follow the RFC discussions Subscribe to the official blog Get Support Discord Chat: A place for Vue devs to meet and chat in real time Forum: The best place to ask questions and get answers about Vue and its ecosystem DEV Community: Share and discuss Vue related topics on Dev to Meetups: Want to find local Vue enthusiasts like yourself Interested in becoming a community leader We have the help and support you need right here",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for Please respect the rules specified in each repository's issue template Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use Made with Vue js: showcases of projects and libraries made with Vue The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue We receive many issues in our repositories on GitHub every single day Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work You don't have to triage an issue with the goal of fixing it (although that would be nice too) Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests Bug fixes are welcome at any time For new features, it is best to discuss the use case and implementation details first in the RFC repo",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials It's often said that the best way to learn is to teach If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media Watch a repo you care about",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests Translate Docs I hope that right now, you're reading this sentence in your preferred language If not, would you like to help us get there See the Translations guide for more details on how you can get involved",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow Start your own meetup If there's not already a Vue meetup in your area, you can start your own Use the resources at events vuejs org to help you succeed Help meetup organizers",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events Edit this page on GitHub",
          "url": "https://vuejs.org/about/community-guide#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/about/community-guide#resources",
      "title": "Community Guide | Vue.js",
      "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!Now we'll answer both what the community can do for you and what you can do for the community.Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate.Stay in the Know Follow our official Twitter account.Follow our team members on Twitter or GitHub.Follow the RFC discussions.Subscribe to the official blog.Get Support Discord Chat: A place for Vue devs to meet and chat in real time.Forum: The best place to ask questions and get answers about Vue and its ecosystem.DEV Community: Share and discuss Vue related topics on Dev.to.Meetups: Want to find local Vue enthusiasts like yourself? Interested in becoming a community leader? We have the help and support you need right here!GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for. Please respect the rules specified in each repository's issue template.Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue.Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people.Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use.Made with Vue.js: showcases of projects and libraries made with Vue.The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem.What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community. Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution.Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue.We receive many issues in our repositories on GitHub every single day. Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team. By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work.You don't have to triage an issue with the goal of fixing it (although that would be nice too). Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time.Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make.The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture. Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests.Bug fixes are welcome at any time. For new features, it is best to discuss the use case and implementation details first in the RFC repo.Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials. It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media.Watch a repo you care about. This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests.Translate Docs I hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?See the Translations guide for more details on how you can get involved.Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup. Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow.Start your own meetup. If there's not already a Vue meetup in your area, you can start your own! Use the resources at events.vuejs.org to help you succeed!Help meetup organizers. There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success.If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events!Edit this page on GitHub",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it So welcome Now we'll answer both what the community can do for you and what you can do for the community Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate Stay in the Know Follow our official Twitter account Follow our team members on Twitter or GitHub",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "Follow the RFC discussions Subscribe to the official blog Get Support Discord Chat: A place for Vue devs to meet and chat in real time Forum: The best place to ask questions and get answers about Vue and its ecosystem DEV Community: Share and discuss Vue related topics on Dev to Meetups: Want to find local Vue enthusiasts like yourself Interested in becoming a community leader We have the help and support you need right here",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for Please respect the rules specified in each repository's issue template Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use Made with Vue js: showcases of projects and libraries made with Vue The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue We receive many issues in our repositories on GitHub every single day Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work You don't have to triage an issue with the goal of fixing it (although that would be nice too) Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests Bug fixes are welcome at any time For new features, it is best to discuss the use case and implementation details first in the RFC repo",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials It's often said that the best way to learn is to teach If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media Watch a repo you care about",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests Translate Docs I hope that right now, you're reading this sentence in your preferred language If not, would you like to help us get there See the Translations guide for more details on how you can get involved",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow Start your own meetup If there's not already a Vue meetup in your area, you can start your own Use the resources at events vuejs org to help you succeed Help meetup organizers",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events Edit this page on GitHub",
          "url": "https://vuejs.org/about/community-guide#resources",
          "library": "vue",
          "chunk_id": "vue_10"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/about/community-guide#code-of-conduct",
      "title": "Community Guide | Vue.js",
      "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!Now we'll answer both what the community can do for you and what you can do for the community.Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate.Stay in the Know Follow our official Twitter account.Follow our team members on Twitter or GitHub.Follow the RFC discussions.Subscribe to the official blog.Get Support Discord Chat: A place for Vue devs to meet and chat in real time.Forum: The best place to ask questions and get answers about Vue and its ecosystem.DEV Community: Share and discuss Vue related topics on Dev.to.Meetups: Want to find local Vue enthusiasts like yourself? Interested in becoming a community leader? We have the help and support you need right here!GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for. Please respect the rules specified in each repository's issue template.Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue.Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people.Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use.Made with Vue.js: showcases of projects and libraries made with Vue.The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem.What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community. Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution.Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue.We receive many issues in our repositories on GitHub every single day. Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team. By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work.You don't have to triage an issue with the goal of fixing it (although that would be nice too). Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time.Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make.The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture. Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests.Bug fixes are welcome at any time. For new features, it is best to discuss the use case and implementation details first in the RFC repo.Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials. It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media.Watch a repo you care about. This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests.Translate Docs I hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?See the Translations guide for more details on how you can get involved.Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup. Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow.Start your own meetup. If there's not already a Vue meetup in your area, you can start your own! Use the resources at events.vuejs.org to help you succeed!Help meetup organizers. There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success.If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events!Edit this page on GitHub",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Community Guide Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it So welcome Now we'll answer both what the community can do for you and what you can do for the community Resources Code of Conduct Our Code of Conduct is a guide to make it easier to enrich all of us and the technical communities in which we participate Stay in the Know Follow our official Twitter account Follow our team members on Twitter or GitHub",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "Follow the RFC discussions Subscribe to the official blog Get Support Discord Chat: A place for Vue devs to meet and chat in real time Forum: The best place to ask questions and get answers about Vue and its ecosystem DEV Community: Share and discuss Vue related topics on Dev to Meetups: Want to find local Vue enthusiasts like yourself Interested in becoming a community leader We have the help and support you need right here",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for Please respect the rules specified in each repository's issue template Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue Explore the Ecosystem The Awesome Vue Page: See what other awesome resources have been published by other awesome people",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use Made with Vue js: showcases of projects and libraries made with Vue The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem What You Can Do Help Fellow Users Code contribution is not the only form of contribution to the Vue community",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution Help Triage Issues Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue We receive many issues in our repositories on GitHub every single day Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work You don't have to triage an issue with the goal of fixing it (although that would be nice too) Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time Contribute Code Contributing bug fixes or new features is the most direct form of contribution you can make",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "The Vue core repository provides a contributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests Bug fixes are welcome at any time For new features, it is best to discuss the use case and implementation details first in the RFC repo",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "Share (and Build) Your Experience Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:Develop learning materials It's often said that the best way to learn is to teach If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media Watch a repo you care about",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests Translate Docs I hope that right now, you're reading this sentence in your preferred language If not, would you like to help us get there See the Translations guide for more details on how you can get involved",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "Become a Community Leader There's a lot you can do to help Vue grow in your community:Present at your local meetup Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow Start your own meetup If there's not already a Vue meetup in your area, you can start your own Use the resources at events vuejs org to help you succeed Help meetup organizers",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at vuejs_events Edit this page on GitHub",
          "url": "https://vuejs.org/about/community-guide#code-of-conduct",
          "library": "vue",
          "chunk_id": "vue_10"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/application#VPContent",
      "title": "Application API | Vue.js",
      "content": "Application API createApp() Creates an application instance.Typetsfunction createApp(rootComponent: Component, rootProps?: object): AppDetailsThe first argument is the root component. The second optional argument is the props to be passed to the root component.ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from './App.vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode. Usage is exactly the same as createApp().app.mount() Mounts the application instance in a container element.Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template.In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are mismatches, the existing DOM nodes will be morphed to match the expected output.For each app instance, mount() can only be called once.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.mount('app')Can also mount to an actual DOM element:jsapp.mount(document.body.firstChild)app.unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.Typetsinterface App { unmount(): void }app.onUnmount() Registers a callback to be called when the app is unmounted.Typetsinterface App { onUnmount(callback: () = any): void }app.component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app.component('MyComponent', { /* ... */ }) // retrieve a registered component const MyComponent = app.component('MyComponent')See also Component Registrationapp.directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* ... */ }) // register (object directive) app.directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app.directive('myDirective', () = { /* ... */ }) // retrieve a registered directive const myDirective = app.directive('myDirective')See also Custom Directivesapp.use() Installs a plugin.Typetsinterface App { use(plugin: Plugin, ...options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument.The plugin can either be an object with an install() method, or just a function that will be used as the install() method. The options (second argument of app.use()) will be passed along to the plugin's install() method.When app.use() is called on the same plugin multiple times, the plugin will be installed only once.Examplejsimport { createApp } from 'vue' import MyPlugin from './plugins/MyPlugin' const app = createApp({ /* ... */ }) app.use(MyPlugin)See also Pluginsapp.mixin() Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.For logic reuse, prefer Composables instead.Typetsinterface App { mixin(mixin: ComponentOptions): this }app.provide() Provide a value that can be injected in all descendant components within the application.Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console.log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console.log(this.message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp.runWithContext()app.runWithContext() Only supported in 3.3+Execute a callback with the current app as injection context.Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately. During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.Examplejsimport { inject } from 'vue' app.provide('id', 1) const injected = app.runWithContext(() = { return inject('id') }) console.log(injected) // 1app.version Provides the version of Vue that the application was created with. This is useful inside plugins, where you might need conditional logic based on different Vue versions.Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app.version.split('.')[0]) if (version  3) { console.warn('This plugin requires Vue 3') } } }See also Global API - versionapp.config Every application instance exposes a config object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.jsimport { createApp } from 'vue' const app = createApp(/* ... */) console.log(app.config)app.config.errorHandler Assign a global handler for uncaught errors propagating from within the application.Typetsinterface AppConfig { errorHandler?: ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e.g. which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.Examplejsapp.config.errorHandler = (err, instance, info) = { // handle error, e.g. report to a service }app.config.warnHandler Assign a custom handler for runtime warnings from Vue.Typetsinterface AppConfig { warnHandler?: ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.TIPWarnings only work during development, so this config is ignored in production mode.Examplejsapp.config.warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app.config.performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the performance.mark API.Type: booleanSee also Guide - Performanceapp.config.compilerOptions Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the compilerOptions option.ImportantThis config option is only respected when using the full build (i.e. the standalone vue.js that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead.For vue-loader: pass via the compilerOptions loader option. Also see how to configure it in vue-cli.For vite: pass via vitejs/plugin-vue options.app.config.compilerOptions.isCustomElement Specifies a check method to recognize native custom elements.Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.Examplejs// treat all tags starting with 'ion-' as custom elements app.config.compilerOptions.isCustomElement = (tag) = { return tag.startsWith('ion-') }See also Vue and Web Componentsapp.config.compilerOptions.whitespace Adjusts template whitespace handling behavior.Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space.Whitespace characters between elements that contain newlines are removed.Consecutive whitespace characters in text nodes are condensed into a single space.Setting this option to 'preserve' will disable (2) and (3).Examplejsapp.config.compilerOptions.whitespace = 'preserve'app.config.compilerOptions.delimiters Adjusts the delimiters used for text interpolation within the template.Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.Examplejs// Delimiters changed to ES6 template string style app.config.compilerOptions.delimiters = ['{', '}']app.config.compilerOptions.comments Adjusts treatment of HTML comments in templates.Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production. Setting this option to true will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.Examplejsapp.config.compilerOptions.comments = trueapp.config.globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application.Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue.prototype which is no longer present in Vue 3. As with anything global, this should be used sparingly.If a global property conflicts with a components own property, the component's own property will have higher priority.Usagejsapp.config.globalProperties.msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console.log(this.msg) // 'hello' } }See also Guide - Augmenting Global Properties app.config.optionMergeStrategies An object for defining merging strategies for custom component options.Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).A merge strategy function can be registered for a custom option by assigning it on the app.config.optionMergeStrategies object using the option's name as the key.The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this.options console.log(this.options.msg) } }) // define a custom merge strategy for `msg` app.config.optionMergeStrategies.msg = (parent, child) = { return (parent  '') + (child  '') } app.mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp.config.idPrefix Configure a prefix for all IDs generated via useId() inside this application.Type: stringDefault: undefinedExamplejsapp.config.idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app.config.throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode.Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.By setting app.config.throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode.Edit this page on GitHub",
      "code_blocks": [
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "createApp()",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "app.mount(document.body.firstChild)",
        "app.mount(document.body.firstChild)",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "interface App {\n  version: string\n}",
        "interface App {\n  version: string\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "compilerOptions",
        "@vue/compiler-dom",
        "compilerOptions",
        "@vitejs/plugin-vue",
        "(tag: string) => boolean",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "'condense' | 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "[string, string]",
        "['{{', '}}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "app.config.compilerOptions.comments = true",
        "app.config.compilerOptions.comments = true",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "Vue.prototype",
        "app.config.globalProperties.msg = 'hello'",
        "app.config.globalProperties.msg = 'hello'",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "app.config.optionMergeStrategies",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "app.config.idPrefix = 'myApp'",
        "app.config.idPrefix = 'myApp'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "app.config.throwUnhandledErrorInProduction"
      ],
      "chunks": [
        {
          "content": "Application API createApp() Creates an application instance Typetsfunction createApp(rootComponent: Component, rootProps : object): AppDetailsThe first argument is the root component The second optional argument is the props to be passed to the root component ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from ' /App",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode Usage is exactly the same as createApp() app mount() Mounts the application instance in a container element Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used) Returns the root component instance",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template In SSR hydration mode, it will hydrate the existing DOM nodes inside the container If there are mismatches, the existing DOM nodes will be morphed to match the expected output For each app instance, mount() can only be called once",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app mount('app')Can also mount to an actual DOM element:jsapp mount(document body firstChild)app unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree Typetsinterface App { unmount(): void }app onUnmount() Registers a callback to be called when the app is unmounted Typetsinterface App { onUnmount(callback: () = any): void }app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app component('MyComponent', { /* */ }) // retrieve a registered component const MyComponent = app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "component('MyComponent')See also Component Registrationapp directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* */ }) // register (object directive) app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app directive('myDirective', () = { /* */ }) // retrieve a registered directive const myDirective = app directive('myDirective')See also Custom Directivesapp use() Installs a plugin Typetsinterface App { use(plugin: Plugin, options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "The plugin can either be an object with an install() method, or just a function that will be used as the install() method The options (second argument of app use()) will be passed along to the plugin's install() method When app use() is called on the same plugin multiple times, the plugin will be installed only once Examplejsimport { createApp } from 'vue' import MyPlugin from ' /plugins/MyPlugin' const app = createApp({ /* */ }) app use(MyPlugin)See also Pluginsapp",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "mixin() Applies a global mixin (scoped to the application) A global mixin applies its included options to every component instance in the application Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries Use of mixins, especially global mixins, should be avoided in application code For logic reuse, prefer Composables instead Typetsinterface App { mixin(mixin: ComponentOptions): this }app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "provide() Provide a value that can be injected in all descendant components within the application Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second Returns the application instance itself Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console log(this message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp runWithContext()app runWithContext() Only supported in 3 3+Execute a callback with the current app as injection context",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance The return value of the callback will also be returned Examplejsimport { inject } from 'vue' app provide('id', 1) const injected = app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "runWithContext(() = { return inject('id') }) console log(injected) // 1app version Provides the version of Vue that the application was created with This is useful inside plugins, where you might need conditional logic based on different Vue versions Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app version split(' ')[0]) if (version  3) { console",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "warn('This plugin requires Vue 3') } } }See also Global API - versionapp config Every application instance exposes a config object that contains the configuration settings for that application You can modify its properties (documented below) before mounting your application jsimport { createApp } from 'vue' const app = createApp(/* */) console log(app config)app config errorHandler Assign a global handler for uncaught errors propagating from within the application",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Typetsinterface AppConfig { errorHandler : ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e g which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string You can find the code to string mapping in the Production Error Code Reference Examplejsapp config errorHandler = (err, instance, info) = { // handle error, e g report to a service }app config",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "warnHandler Assign a custom handler for runtime warnings from Vue Typetsinterface AppConfig { warnHandler : ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third It can be used to filter out specific warnings to reduce console verbosity",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done TIPWarnings only work during development, so this config is ignored in production mode Examplejsapp config warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app config",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel Only works in development mode and in browsers that support the performance mark API Type: booleanSee also Guide - Performanceapp config compilerOptions Configure runtime compiler options Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "Note you can also override these options on a per-component basis using the compilerOptions option ImportantThis config option is only respected when using the full build (i e the standalone vue js that can compile templates in the browser) If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead For vue-loader: pass via the compilerOptions loader option Also see how to configure it in vue-cli",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "For vite: pass via vitejs/plugin-vue options app config compilerOptions isCustomElement Specifies a check method to recognize native custom elements Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_20"
        },
        {
          "content": "Examplejs// treat all tags starting with 'ion-' as custom elements app config compilerOptions isCustomElement = (tag) = { return tag startsWith('ion-') }See also Vue and Web Componentsapp config compilerOptions whitespace Adjusts template whitespace handling behavior Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_21"
        },
        {
          "content": "The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space Whitespace characters between elements that contain newlines are removed Consecutive whitespace characters in text nodes are condensed into a single space Setting this option to 'preserve' will disable (2) and (3) Examplejsapp config compilerOptions whitespace = 'preserve'app config compilerOptions",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_22"
        },
        {
          "content": "delimiters Adjusts the delimiters used for text interpolation within the template Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax Examplejs// Delimiters changed to ES6 template string style app config compilerOptions delimiters = ['{', '}']app config compilerOptions comments Adjusts treatment of HTML comments in templates",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_23"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production Setting this option to true will force Vue to preserve comments even in production Comments are always preserved during development This option is typically used when Vue is used with other libraries that rely on HTML comments Examplejsapp config compilerOptions comments = trueapp config",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_24"
        },
        {
          "content": "globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue prototype which is no longer present in Vue 3 As with anything global, this should be used sparingly If a global property conflicts with a components own property, the component's own property will have higher priority Usagejsapp config",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_25"
        },
        {
          "content": "globalProperties msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console log(this msg) // 'hello' } }See also Guide - Augmenting Global Properties app config optionMergeStrategies An object for defining merging strategies for custom component options",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_26"
        },
        {
          "content": "Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins) These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e g mixins or component inheritance) A merge strategy function can be registered for a custom option by assigning it on the app config",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_27"
        },
        {
          "content": "optionMergeStrategies object using the option's name as the key The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this options console log(this options msg) } }) // define a custom merge strategy for `msg` app config optionMergeStrategies",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_28"
        },
        {
          "content": "msg = (parent, child) = { return (parent  '') + (child  '') } app mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp config idPrefix Configure a prefix for all IDs generated via useId() inside this application Type: stringDefault: undefinedExamplejsapp config idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app config throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_29"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application This is to make the error more prominent so that it can be noticed and fixed during development In production, the error will only be logged to the console to minimize the impact to end users",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_30"
        },
        {
          "content": "However, this may prevent errors that only happen in production from being caught by error monitoring services By setting app config throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode Edit this page on GitHub",
          "url": "https://vuejs.org/api/application#VPContent",
          "library": "vue",
          "chunk_id": "vue_31"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/application",
      "title": "Application API | Vue.js",
      "content": "Application API createApp() Creates an application instance.Typetsfunction createApp(rootComponent: Component, rootProps?: object): AppDetailsThe first argument is the root component. The second optional argument is the props to be passed to the root component.ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from './App.vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode. Usage is exactly the same as createApp().app.mount() Mounts the application instance in a container element.Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template.In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are mismatches, the existing DOM nodes will be morphed to match the expected output.For each app instance, mount() can only be called once.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.mount('app')Can also mount to an actual DOM element:jsapp.mount(document.body.firstChild)app.unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree.Typetsinterface App { unmount(): void }app.onUnmount() Registers a callback to be called when the app is unmounted.Typetsinterface App { onUnmount(callback: () = any): void }app.component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app.component('MyComponent', { /* ... */ }) // retrieve a registered component const MyComponent = app.component('MyComponent')See also Component Registrationapp.directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* ... */ }) // register (object directive) app.directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app.directive('myDirective', () = { /* ... */ }) // retrieve a registered directive const myDirective = app.directive('myDirective')See also Custom Directivesapp.use() Installs a plugin.Typetsinterface App { use(plugin: Plugin, ...options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument.The plugin can either be an object with an install() method, or just a function that will be used as the install() method. The options (second argument of app.use()) will be passed along to the plugin's install() method.When app.use() is called on the same plugin multiple times, the plugin will be installed only once.Examplejsimport { createApp } from 'vue' import MyPlugin from './plugins/MyPlugin' const app = createApp({ /* ... */ }) app.use(MyPlugin)See also Pluginsapp.mixin() Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.For logic reuse, prefer Composables instead.Typetsinterface App { mixin(mixin: ComponentOptions): this }app.provide() Provide a value that can be injected in all descendant components within the application.Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.Examplejsimport { createApp } from 'vue' const app = createApp(/* ... */) app.provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console.log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console.log(this.message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp.runWithContext()app.runWithContext() Only supported in 3.3+Execute a callback with the current app as injection context.Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately. During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.Examplejsimport { inject } from 'vue' app.provide('id', 1) const injected = app.runWithContext(() = { return inject('id') }) console.log(injected) // 1app.version Provides the version of Vue that the application was created with. This is useful inside plugins, where you might need conditional logic based on different Vue versions.Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app.version.split('.')[0]) if (version  3) { console.warn('This plugin requires Vue 3') } } }See also Global API - versionapp.config Every application instance exposes a config object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.jsimport { createApp } from 'vue' const app = createApp(/* ... */) console.log(app.config)app.config.errorHandler Assign a global handler for uncaught errors propagating from within the application.Typetsinterface AppConfig { errorHandler?: ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e.g. which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in the Production Error Code Reference.Examplejsapp.config.errorHandler = (err, instance, info) = { // handle error, e.g. report to a service }app.config.warnHandler Assign a custom handler for runtime warnings from Vue.Typetsinterface AppConfig { warnHandler?: ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.TIPWarnings only work during development, so this config is ignored in production mode.Examplejsapp.config.warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app.config.performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the performance.mark API.Type: booleanSee also Guide - Performanceapp.config.compilerOptions Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the compilerOptions option.ImportantThis config option is only respected when using the full build (i.e. the standalone vue.js that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead.For vue-loader: pass via the compilerOptions loader option. Also see how to configure it in vue-cli.For vite: pass via vitejs/plugin-vue options.app.config.compilerOptions.isCustomElement Specifies a check method to recognize native custom elements.Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.Examplejs// treat all tags starting with 'ion-' as custom elements app.config.compilerOptions.isCustomElement = (tag) = { return tag.startsWith('ion-') }See also Vue and Web Componentsapp.config.compilerOptions.whitespace Adjusts template whitespace handling behavior.Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space.Whitespace characters between elements that contain newlines are removed.Consecutive whitespace characters in text nodes are condensed into a single space.Setting this option to 'preserve' will disable (2) and (3).Examplejsapp.config.compilerOptions.whitespace = 'preserve'app.config.compilerOptions.delimiters Adjusts the delimiters used for text interpolation within the template.Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.Examplejs// Delimiters changed to ES6 template string style app.config.compilerOptions.delimiters = ['{', '}']app.config.compilerOptions.comments Adjusts treatment of HTML comments in templates.Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production. Setting this option to true will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.Examplejsapp.config.compilerOptions.comments = trueapp.config.globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application.Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue.prototype which is no longer present in Vue 3. As with anything global, this should be used sparingly.If a global property conflicts with a components own property, the component's own property will have higher priority.Usagejsapp.config.globalProperties.msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console.log(this.msg) // 'hello' } }See also Guide - Augmenting Global Properties app.config.optionMergeStrategies An object for defining merging strategies for custom component options.Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).A merge strategy function can be registered for a custom option by assigning it on the app.config.optionMergeStrategies object using the option's name as the key.The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this.options console.log(this.options.msg) } }) // define a custom merge strategy for `msg` app.config.optionMergeStrategies.msg = (parent, child) = { return (parent  '') + (child  '') } app.mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp.config.idPrefix Configure a prefix for all IDs generated via useId() inside this application.Type: stringDefault: undefinedExamplejsapp.config.idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app.config.throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode.Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.By setting app.config.throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode.Edit this page on GitHub",
      "code_blocks": [
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "function createApp(rootComponent: Component, rootProps?: object): App",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)",
        "createApp()",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')",
        "app.mount(document.body.firstChild)",
        "app.mount(document.body.firstChild)",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  unmount(): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  onUnmount(callback: () => any): void\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "interface App {\n  use(plugin: Plugin, ...options: any[]): this\n}",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  mixin(mixin: ComponentOptions): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "interface App {\n  provide<T>(key: InjectionKey<T> | symbol | string, value: T): this\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "interface App {\n  runWithContext<T>(fn: () => T): T\n}",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1",
        "interface App {\n  version: string\n}",
        "interface App {\n  version: string\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "export default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\nconsole.log(app.config)",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "interface AppConfig {\n  errorHandler?: (\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    // `info` is a Vue-specific error info,\n    // e.g. which lifecycle hook the error was thrown in\n    info: string\n  ) => void\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "interface AppConfig {\n  warnHandler?: (\n    msg: string,\n    instance: ComponentPublicInstance | null,\n    trace: string\n  ) => void\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}",
        "compilerOptions",
        "@vue/compiler-dom",
        "compilerOptions",
        "@vitejs/plugin-vue",
        "(tag: string) => boolean",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}",
        "'condense' | 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "app.config.compilerOptions.whitespace = 'preserve'",
        "[string, string]",
        "['{{', '}}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']",
        "app.config.compilerOptions.comments = true",
        "app.config.compilerOptions.comments = true",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "interface AppConfig {\n  globalProperties: Record<string, any>\n}",
        "Vue.prototype",
        "app.config.globalProperties.msg = 'hello'",
        "app.config.globalProperties.msg = 'hello'",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "interface AppConfig {\n  optionMergeStrategies: Record<string, OptionMergeFunction>\n}\n\ntype OptionMergeFunction = (to: unknown, from: unknown) => any",
        "app.config.optionMergeStrategies",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'",
        "app.config.idPrefix = 'myApp'",
        "app.config.idPrefix = 'myApp'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'",
        "app.config.throwUnhandledErrorInProduction"
      ],
      "chunks": [
        {
          "content": "Application API createApp() Creates an application instance Typetsfunction createApp(rootComponent: Component, rootProps : object): AppDetailsThe first argument is the root component The second optional argument is the props to be passed to the root component ExampleWith inline root component:jsimport { createApp } from 'vue' const app = createApp({ /* root component options */ })With imported component:jsimport { createApp } from 'vue' import App from ' /App",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "vue' const app = createApp(App)See also Guide - Creating a Vue ApplicationcreateSSRApp() Creates an application instance in SSR Hydration mode Usage is exactly the same as createApp() app mount() Mounts the application instance in a container element Typetsinterface App { mount(rootContainer: Element  string): ComponentPublicInstance }DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used) Returns the root component instance",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container Otherwise, if the runtime compiler is available, the innerHTML of the container will be used as the template In SSR hydration mode, it will hydrate the existing DOM nodes inside the container If there are mismatches, the existing DOM nodes will be morphed to match the expected output For each app instance, mount() can only be called once",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app mount('app')Can also mount to an actual DOM element:jsapp mount(document body firstChild)app unmount() Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree Typetsinterface App { unmount(): void }app onUnmount() Registers a callback to be called when the app is unmounted Typetsinterface App { onUnmount(callback: () = any): void }app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "component() Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed Typetsinterface App { component(name: string): Component  undefined component(name: string, component: Component): this }Examplejsimport { createApp } from 'vue' const app = createApp({}) // register an options object app component('MyComponent', { /* */ }) // retrieve a registered component const MyComponent = app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "component('MyComponent')See also Component Registrationapp directive() Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed Typetsinterface App { directive(name: string): Directive  undefined directive(name: string, directive: Directive): this }Examplejsimport { createApp } from 'vue' const app = createApp({ /* */ }) // register (object directive) app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "directive('myDirective', { /* custom directive hooks */ }) // register (function directive shorthand) app directive('myDirective', () = { /* */ }) // retrieve a registered directive const myDirective = app directive('myDirective')See also Custom Directivesapp use() Installs a plugin Typetsinterface App { use(plugin: Plugin, options: any[]): this }DetailsExpects the plugin as the first argument, and optional plugin options as the second argument",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "The plugin can either be an object with an install() method, or just a function that will be used as the install() method The options (second argument of app use()) will be passed along to the plugin's install() method When app use() is called on the same plugin multiple times, the plugin will be installed only once Examplejsimport { createApp } from 'vue' import MyPlugin from ' /plugins/MyPlugin' const app = createApp({ /* */ }) app use(MyPlugin)See also Pluginsapp",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "mixin() Applies a global mixin (scoped to the application) A global mixin applies its included options to every component instance in the application Not RecommendedMixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries Use of mixins, especially global mixins, should be avoided in application code For logic reuse, prefer Composables instead Typetsinterface App { mixin(mixin: ComponentOptions): this }app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "provide() Provide a value that can be injected in all descendant components within the application Typetsinterface App { provideT(key: InjectionKeyT  symbol  string, value: T): this }DetailsExpects the injection key as the first argument, and the provided value as the second Returns the application instance itself Examplejsimport { createApp } from 'vue' const app = createApp(/* */) app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "provide('message', 'hello')Inside a component in the application:jsimport { inject } from 'vue' export default { setup() { console log(inject('message')) // 'hello' } }jsexport default { inject: ['message'], created() { console log(this message) // 'hello' } }See alsoProvide / InjectApp-level Provideapp runWithContext()app runWithContext() Only supported in 3 3+Execute a callback with the current app as injection context",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": "Typetsinterface App { runWithContextT(fn: () = T): T }DetailsExpects a callback function and runs the callback immediately During the synchronous call of the callback, inject() calls are able to look up injections from the values provided by the current app, even when there is no current active component instance The return value of the callback will also be returned Examplejsimport { inject } from 'vue' app provide('id', 1) const injected = app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_11"
        },
        {
          "content": "runWithContext(() = { return inject('id') }) console log(injected) // 1app version Provides the version of Vue that the application was created with This is useful inside plugins, where you might need conditional logic based on different Vue versions Typetsinterface App { version: string }ExamplePerforming a version check inside a plugin:jsexport default { install(app) { const version = Number(app version split(' ')[0]) if (version  3) { console",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_12"
        },
        {
          "content": "warn('This plugin requires Vue 3') } } }See also Global API - versionapp config Every application instance exposes a config object that contains the configuration settings for that application You can modify its properties (documented below) before mounting your application jsimport { createApp } from 'vue' const app = createApp(/* */) console log(app config)app config errorHandler Assign a global handler for uncaught errors propagating from within the application",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_13"
        },
        {
          "content": "Typetsinterface AppConfig { errorHandler : ( err: unknown, instance: ComponentPublicInstance  null, // `info` is a Vue-specific error info, // e g which lifecycle hook the error was thrown in info: string ) = void }DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_14"
        },
        {
          "content": "It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup() functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string You can find the code to string mapping in the Production Error Code Reference Examplejsapp config errorHandler = (err, instance, info) = { // handle error, e g report to a service }app config",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_15"
        },
        {
          "content": "warnHandler Assign a custom handler for runtime warnings from Vue Typetsinterface AppConfig { warnHandler : ( msg: string, instance: ComponentPublicInstance  null, trace: string ) = void }DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third It can be used to filter out specific warnings to reduce console verbosity",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_16"
        },
        {
          "content": "All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done TIPWarnings only work during development, so this config is ignored in production mode Examplejsapp config warnHandler = (msg, instance, trace) = { // `trace` is the component hierarchy trace }app config",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_17"
        },
        {
          "content": "performance Set this to true to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel Only works in development mode and in browsers that support the performance mark API Type: booleanSee also Guide - Performanceapp config compilerOptions Configure runtime compiler options Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_18"
        },
        {
          "content": "Note you can also override these options on a per-component basis using the compilerOptions option ImportantThis config option is only respected when using the full build (i e the standalone vue js that can compile templates in the browser) If you are using the runtime-only build with a build setup, compiler options must be passed to vue/compiler-dom via build tool configurations instead For vue-loader: pass via the compilerOptions loader option Also see how to configure it in vue-cli",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_19"
        },
        {
          "content": "For vite: pass via vitejs/plugin-vue options app config compilerOptions isCustomElement Specifies a check method to recognize native custom elements Type: (tag: string) = booleanDetailsShould return true if the tag should be treated as a native custom element For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_20"
        },
        {
          "content": "Examplejs// treat all tags starting with 'ion-' as custom elements app config compilerOptions isCustomElement = (tag) = { return tag startsWith('ion-') }See also Vue and Web Componentsapp config compilerOptions whitespace Adjusts template whitespace handling behavior Type: 'condense'  'preserve'Default: 'condense'DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_21"
        },
        {
          "content": "The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space Whitespace characters between elements that contain newlines are removed Consecutive whitespace characters in text nodes are condensed into a single space Setting this option to 'preserve' will disable (2) and (3) Examplejsapp config compilerOptions whitespace = 'preserve'app config compilerOptions",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_22"
        },
        {
          "content": "delimiters Adjusts the delimiters used for text interpolation within the template Type: [string, string]Default: ['{{', '}}']DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax Examplejs// Delimiters changed to ES6 template string style app config compilerOptions delimiters = ['{', '}']app config compilerOptions comments Adjusts treatment of HTML comments in templates",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_23"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, Vue will remove the comments in production Setting this option to true will force Vue to preserve comments even in production Comments are always preserved during development This option is typically used when Vue is used with other libraries that rely on HTML comments Examplejsapp config compilerOptions comments = trueapp config",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_24"
        },
        {
          "content": "globalProperties An object that can be used to register global properties that can be accessed on any component instance inside the application Typetsinterface AppConfig { globalProperties: Recordstring, any }DetailsThis is a replacement of Vue 2's Vue prototype which is no longer present in Vue 3 As with anything global, this should be used sparingly If a global property conflicts with a components own property, the component's own property will have higher priority Usagejsapp config",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_25"
        },
        {
          "content": "globalProperties msg = 'hello'This makes msg available inside any component template in the application, and also on this of any component instance:jsexport default { mounted() { console log(this msg) // 'hello' } }See also Guide - Augmenting Global Properties app config optionMergeStrategies An object for defining merging strategies for custom component options",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_26"
        },
        {
          "content": "Typetsinterface AppConfig { optionMergeStrategies: Recordstring, OptionMergeFunction } type OptionMergeFunction = (to: unknown, from: unknown) = anyDetailsSome plugins / libraries add support for custom component options (by injecting global mixins) These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e g mixins or component inheritance) A merge strategy function can be registered for a custom option by assigning it on the app config",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_27"
        },
        {
          "content": "optionMergeStrategies object using the option's name as the key The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively Examplejsconst app = createApp({ // option from self msg: 'Vue', // option from a mixin mixins: [ { msg: 'Hello ' } ], mounted() { // merged options exposed on this options console log(this options msg) } }) // define a custom merge strategy for `msg` app config optionMergeStrategies",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_28"
        },
        {
          "content": "msg = (parent, child) = { return (parent  '') + (child  '') } app mount('app') // logs 'Hello Vue'See also Component Instance - optionsapp config idPrefix Configure a prefix for all IDs generated via useId() inside this application Type: stringDefault: undefinedExamplejsapp config idPrefix = 'myApp'js// in a component: const id1 = useId() // 'myApp:0' const id2 = useId() // 'myApp:1'app config throwUnhandledErrorInProduction Force unhandled errors to be thrown in production mode",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_29"
        },
        {
          "content": "Type: booleanDefault: falseDetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application This is to make the error more prominent so that it can be noticed and fixed during development In production, the error will only be logged to the console to minimize the impact to end users",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_30"
        },
        {
          "content": "However, this may prevent errors that only happen in production from being caught by error monitoring services By setting app config throwUnhandledErrorInProduction to true, unhandled errors will be thrown even in production mode Edit this page on GitHub",
          "url": "https://vuejs.org/api/application",
          "library": "vue",
          "chunk_id": "vue_31"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/general",
      "title": "Global API: General | Vue.js",
      "content": "Global API: General version Exposes the current version of Vue.Type: stringExamplejsimport { version } from 'vue' console.log(version)nextTick() A utility for waiting for the next DOM update flush.Typetsfunction nextTick(callback?: () = void): PromisevoidDetailsWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.nextTick() can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.Examplevuescript setup import { ref, nextTick } from 'vue' const count = ref(0) async function increment() { count.value++ // DOM not yet updated console.log(document.getElementById('counter').textContent) // 0 await nextTick() // DOM is now updated console.log(document.getElementById('counter').textContent) // 1 } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templatevuescript import { nextTick } from 'vue' export default { data() { return { count: 0 } }, methods: { async increment() { this.count++ // DOM not yet updated console.log(document.getElementById('counter').textContent) // 0 await nextTick() // DOM is now updated console.log(document.getElementById('counter').textContent) // 1 } } } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templateSee also this.nextTick()defineComponent() A type helper for defining a Vue component with type inference.Typets// options syntax function defineComponent( component: ComponentOptions ): ComponentConstructor // function syntax (requires 3.3+) function defineComponent( setup: ComponentOptions['setup'], extraOptions?: ComponentOptions ): () = anyType is simplified for readability.DetailsThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.You can extract the instance type of a component (equivalent to the type of this in its options) from the return type of defineComponent() like this:tsconst Foo = defineComponent(/* ... */) type FooInstance = InstanceTypetypeof FooFunction Signature Only supported in 3.3+defineComponent() also has an alternative signature that is meant to be used with the Composition API and render functions or JSX.Instead of passing in an options object, a function is expected instead. This function works the same as the Composition API setup() function: it receives the props and the setup context. The return value should be a render function - both h() and JSX are supported:jsimport { ref, h } from 'vue' const Comp = defineComponent( (props) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return h('div', count.value) } }, // extra options, e.g. declare props and emits { props: { /* ... */ } } )The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:tsxconst Comp = defineComponent( T extends string  number(props: { msg: T; list: T[] }) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return div{count.value}/div } }, // manual runtime props declaration is currently still needed. { props: ['msg', 'list'] } )In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for defineProps in SFCs) so that the runtime props declaration can be omitted.Note on webpack Treeshaking Because defineComponent() is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.To tell webpack that this function call is safe to be tree-shaken, you can add a /*__PURE__*/ comment notation before the function call:jsexport default /*__PURE__*/ defineComponent(/* ... */)Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that defineComponent() is in fact side-effect-free without the need for manual annotations.See also Guide - Using Vue with TypeScriptdefineAsyncComponent() Define an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.Typetsfunction defineAsyncComponent( source: AsyncComponentLoader  AsyncComponentOptions ): Component type AsyncComponentLoader = () = PromiseComponent interface AsyncComponentOptions { loader: AsyncComponentLoader loadingComponent?: Component errorComponent?: Component delay?: number timeout?: number suspensible?: boolean onError?: ( error: Error, retry: () = void, fail: () = void, attempts: number ) = any }See also Guide - Async ComponentsEdit this page on GitHub",
      "code_blocks": [
        "import { version } from 'vue'\n\nconsole.log(version)",
        "import { version } from 'vue'\n\nconsole.log(version)",
        "function nextTick(callback?: () => void): Promise<void>",
        "function nextTick(callback?: () => void): Promise<void>",
        "<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n  count.value++\n\n  // DOM not yet updated\n  console.log(document.getElementById('counter').textContent) // 0\n\n  await nextTick()\n  // DOM is now updated\n  console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n  count.value++\n\n  // DOM not yet updated\n  console.log(document.getElementById('counter').textContent) // 0\n\n  await nextTick()\n  // DOM is now updated\n  console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "<script>\nimport { nextTick } from 'vue'\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    async increment() {\n      this.count++\n\n      // DOM not yet updated\n      console.log(document.getElementById('counter').textContent) // 0\n\n      await nextTick()\n      // DOM is now updated\n      console.log(document.getElementById('counter').textContent) // 1\n    }\n  }\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "<script>\nimport { nextTick } from 'vue'\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    async increment() {\n      this.count++\n\n      // DOM not yet updated\n      console.log(document.getElementById('counter').textContent) // 0\n\n      await nextTick()\n      // DOM is now updated\n      console.log(document.getElementById('counter').textContent) // 1\n    }\n  }\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "this.$nextTick()",
        "// options syntax\nfunction defineComponent(\n  component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n  setup: ComponentOptions['setup'],\n  extraOptions?: ComponentOptions\n): () => any",
        "// options syntax\nfunction defineComponent(\n  component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n  setup: ComponentOptions['setup'],\n  extraOptions?: ComponentOptions\n): () => any",
        "defineComponent()",
        "const Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>",
        "const Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>",
        "defineComponent()",
        "import { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)",
        "import { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)",
        "const Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)",
        "const Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)",
        "defineProps",
        "defineComponent()",
        "/*#__PURE__*/",
        "export default /*#__PURE__*/ defineComponent(/* ... */)",
        "export default /*#__PURE__*/ defineComponent(/* ... */)",
        "defineComponent()",
        "function defineAsyncComponent(\n  source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n  loader: AsyncComponentLoader\n  loadingComponent?: Component\n  errorComponent?: Component\n  delay?: number\n  timeout?: number\n  suspensible?: boolean\n  onError?: (\n    error: Error,\n    retry: () => void,\n    fail: () => void,\n    attempts: number\n  ) => any\n}",
        "function defineAsyncComponent(\n  source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n  loader: AsyncComponentLoader\n  loadingComponent?: Component\n  errorComponent?: Component\n  delay?: number\n  timeout?: number\n  suspensible?: boolean\n  onError?: (\n    error: Error,\n    retry: () => void,\n    fail: () => void,\n    attempts: number\n  ) => any\n}"
      ],
      "chunks": [
        {
          "content": "Global API: General version Exposes the current version of Vue Type: stringExamplejsimport { version } from 'vue' console log(version)nextTick() A utility for waiting for the next DOM update flush Typetsfunction nextTick(callback : () = void): PromisevoidDetailsWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "nextTick() can be used immediately after a state change to wait for the DOM updates to complete You can either pass a callback as an argument, or await the returned Promise Examplevuescript setup import { ref, nextTick } from 'vue' const count = ref(0) async function increment() { count value++ // DOM not yet updated console log(document getElementById('counter') textContent) // 0 await nextTick() // DOM is now updated console log(document getElementById('counter')",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "textContent) // 1 } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templatevuescript import { nextTick } from 'vue' export default { data() { return { count: 0 } }, methods: { async increment() { this count++ // DOM not yet updated console log(document getElementById('counter') textContent) // 0 await nextTick() // DOM is now updated console log(document getElementById('counter')",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "textContent) // 1 } } } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templateSee also this nextTick()defineComponent() A type helper for defining a Vue component with type inference Typets// options syntax function defineComponent( component: ComponentOptions ): ComponentConstructor // function syntax (requires 3 3+) function defineComponent( setup: ComponentOptions['setup'], extraOptions : ComponentOptions ): () = anyType is simplified for readability",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "DetailsThe first argument expects a component options object The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options This is used for type inference when the returned type is used as a tag in TSX",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "You can extract the instance type of a component (equivalent to the type of this in its options) from the return type of defineComponent() like this:tsconst Foo = defineComponent(/* */) type FooInstance = InstanceTypetypeof FooFunction Signature Only supported in 3 3+defineComponent() also has an alternative signature that is meant to be used with the Composition API and render functions or JSX Instead of passing in an options object, a function is expected instead",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "This function works the same as the Composition API setup() function: it receives the props and the setup context The return value should be a render function - both h() and JSX are supported:jsimport { ref, h } from 'vue' const Comp = defineComponent( (props) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return h('div', count value) } }, // extra options, e g declare props and emits { props: { /*",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "*/ } } )The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:tsxconst Comp = defineComponent( T extends string  number(props: { msg: T; list: T[] }) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return div{count value}/div } }, // manual runtime props declaration is currently still needed",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "{ props: ['msg', 'list'] } )In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for defineProps in SFCs) so that the runtime props declaration can be omitted Note on webpack Treeshaking Because defineComponent() is a function call, it could look like it would produce side-effects to some build tools, e g webpack This will prevent the component from being tree-shaken even when the component is never used",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "To tell webpack that this function call is safe to be tree-shaken, you can add a /*__PURE__*/ comment notation before the function call:jsexport default /*__PURE__*/ defineComponent(/* */)Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that defineComponent() is in fact side-effect-free without the need for manual annotations",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "See also Guide - Using Vue with TypeScriptdefineAsyncComponent() Define an async component which is lazy loaded only when it is rendered The argument can either be a loader function, or an options object for more advanced control of the loading behavior Typetsfunction defineAsyncComponent( source: AsyncComponentLoader  AsyncComponentOptions ): Component type AsyncComponentLoader = () = PromiseComponent interface AsyncComponentOptions { loader: AsyncComponentLoader loadingComponent",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": ": Component errorComponent : Component delay : number timeout : number suspensible : boolean onError : ( error: Error, retry: () = void, fail: () = void, attempts: number ) = any }See also Guide - Async ComponentsEdit this page on GitHub",
          "url": "https://vuejs.org/api/general",
          "library": "vue",
          "chunk_id": "vue_11"
        }
      ],
      "library": "vue"
    },
    {
      "url": "https://vuejs.org/api/general#VPContent",
      "title": "Global API: General | Vue.js",
      "content": "Global API: General version Exposes the current version of Vue.Type: stringExamplejsimport { version } from 'vue' console.log(version)nextTick() A utility for waiting for the next DOM update flush.Typetsfunction nextTick(callback?: () = void): PromisevoidDetailsWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.nextTick() can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.Examplevuescript setup import { ref, nextTick } from 'vue' const count = ref(0) async function increment() { count.value++ // DOM not yet updated console.log(document.getElementById('counter').textContent) // 0 await nextTick() // DOM is now updated console.log(document.getElementById('counter').textContent) // 1 } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templatevuescript import { nextTick } from 'vue' export default { data() { return { count: 0 } }, methods: { async increment() { this.count++ // DOM not yet updated console.log(document.getElementById('counter').textContent) // 0 await nextTick() // DOM is now updated console.log(document.getElementById('counter').textContent) // 1 } } } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templateSee also this.nextTick()defineComponent() A type helper for defining a Vue component with type inference.Typets// options syntax function defineComponent( component: ComponentOptions ): ComponentConstructor // function syntax (requires 3.3+) function defineComponent( setup: ComponentOptions['setup'], extraOptions?: ComponentOptions ): () = anyType is simplified for readability.DetailsThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.You can extract the instance type of a component (equivalent to the type of this in its options) from the return type of defineComponent() like this:tsconst Foo = defineComponent(/* ... */) type FooInstance = InstanceTypetypeof FooFunction Signature Only supported in 3.3+defineComponent() also has an alternative signature that is meant to be used with the Composition API and render functions or JSX.Instead of passing in an options object, a function is expected instead. This function works the same as the Composition API setup() function: it receives the props and the setup context. The return value should be a render function - both h() and JSX are supported:jsimport { ref, h } from 'vue' const Comp = defineComponent( (props) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return h('div', count.value) } }, // extra options, e.g. declare props and emits { props: { /* ... */ } } )The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:tsxconst Comp = defineComponent( T extends string  number(props: { msg: T; list: T[] }) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return div{count.value}/div } }, // manual runtime props declaration is currently still needed. { props: ['msg', 'list'] } )In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for defineProps in SFCs) so that the runtime props declaration can be omitted.Note on webpack Treeshaking Because defineComponent() is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.To tell webpack that this function call is safe to be tree-shaken, you can add a /*__PURE__*/ comment notation before the function call:jsexport default /*__PURE__*/ defineComponent(/* ... */)Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that defineComponent() is in fact side-effect-free without the need for manual annotations.See also Guide - Using Vue with TypeScriptdefineAsyncComponent() Define an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.Typetsfunction defineAsyncComponent( source: AsyncComponentLoader  AsyncComponentOptions ): Component type AsyncComponentLoader = () = PromiseComponent interface AsyncComponentOptions { loader: AsyncComponentLoader loadingComponent?: Component errorComponent?: Component delay?: number timeout?: number suspensible?: boolean onError?: ( error: Error, retry: () = void, fail: () = void, attempts: number ) = any }See also Guide - Async ComponentsEdit this page on GitHub",
      "code_blocks": [
        "import { version } from 'vue'\n\nconsole.log(version)",
        "import { version } from 'vue'\n\nconsole.log(version)",
        "function nextTick(callback?: () => void): Promise<void>",
        "function nextTick(callback?: () => void): Promise<void>",
        "<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n  count.value++\n\n  // DOM not yet updated\n  console.log(document.getElementById('counter').textContent) // 0\n\n  await nextTick()\n  // DOM is now updated\n  console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n  count.value++\n\n  // DOM not yet updated\n  console.log(document.getElementById('counter').textContent) // 0\n\n  await nextTick()\n  // DOM is now updated\n  console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "<script>\nimport { nextTick } from 'vue'\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    async increment() {\n      this.count++\n\n      // DOM not yet updated\n      console.log(document.getElementById('counter').textContent) // 0\n\n      await nextTick()\n      // DOM is now updated\n      console.log(document.getElementById('counter').textContent) // 1\n    }\n  }\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "<script>\nimport { nextTick } from 'vue'\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    async increment() {\n      this.count++\n\n      // DOM not yet updated\n      console.log(document.getElementById('counter').textContent) // 0\n\n      await nextTick()\n      // DOM is now updated\n      console.log(document.getElementById('counter').textContent) // 1\n    }\n  }\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>",
        "this.$nextTick()",
        "// options syntax\nfunction defineComponent(\n  component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n  setup: ComponentOptions['setup'],\n  extraOptions?: ComponentOptions\n): () => any",
        "// options syntax\nfunction defineComponent(\n  component: ComponentOptions\n): ComponentConstructor\n\n// function syntax (requires 3.3+)\nfunction defineComponent(\n  setup: ComponentOptions['setup'],\n  extraOptions?: ComponentOptions\n): () => any",
        "defineComponent()",
        "const Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>",
        "const Foo = defineComponent(/* ... */)\n\ntype FooInstance = InstanceType<typeof Foo>",
        "defineComponent()",
        "import { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)",
        "import { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)",
        "const Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)",
        "const Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)",
        "defineProps",
        "defineComponent()",
        "/*#__PURE__*/",
        "export default /*#__PURE__*/ defineComponent(/* ... */)",
        "export default /*#__PURE__*/ defineComponent(/* ... */)",
        "defineComponent()",
        "function defineAsyncComponent(\n  source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n  loader: AsyncComponentLoader\n  loadingComponent?: Component\n  errorComponent?: Component\n  delay?: number\n  timeout?: number\n  suspensible?: boolean\n  onError?: (\n    error: Error,\n    retry: () => void,\n    fail: () => void,\n    attempts: number\n  ) => any\n}",
        "function defineAsyncComponent(\n  source: AsyncComponentLoader | AsyncComponentOptions\n): Component\n\ntype AsyncComponentLoader = () => Promise<Component>\n\ninterface AsyncComponentOptions {\n  loader: AsyncComponentLoader\n  loadingComponent?: Component\n  errorComponent?: Component\n  delay?: number\n  timeout?: number\n  suspensible?: boolean\n  onError?: (\n    error: Error,\n    retry: () => void,\n    fail: () => void,\n    attempts: number\n  ) => any\n}"
      ],
      "chunks": [
        {
          "content": "Global API: General version Exposes the current version of Vue Type: stringExamplejsimport { version } from 'vue' console log(version)nextTick() A utility for waiting for the next DOM update flush Typetsfunction nextTick(callback : () = void): PromisevoidDetailsWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_0"
        },
        {
          "content": "nextTick() can be used immediately after a state change to wait for the DOM updates to complete You can either pass a callback as an argument, or await the returned Promise Examplevuescript setup import { ref, nextTick } from 'vue' const count = ref(0) async function increment() { count value++ // DOM not yet updated console log(document getElementById('counter') textContent) // 0 await nextTick() // DOM is now updated console log(document getElementById('counter')",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_1"
        },
        {
          "content": "textContent) // 1 } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templatevuescript import { nextTick } from 'vue' export default { data() { return { count: 0 } }, methods: { async increment() { this count++ // DOM not yet updated console log(document getElementById('counter') textContent) // 0 await nextTick() // DOM is now updated console log(document getElementById('counter')",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_2"
        },
        {
          "content": "textContent) // 1 } } } /script template button id=\"counter\" click=\"increment\"{{ count }}/button /templateSee also this nextTick()defineComponent() A type helper for defining a Vue component with type inference Typets// options syntax function defineComponent( component: ComponentOptions ): ComponentConstructor // function syntax (requires 3 3+) function defineComponent( setup: ComponentOptions['setup'], extraOptions : ComponentOptions ): () = anyType is simplified for readability",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_3"
        },
        {
          "content": "DetailsThe first argument expects a component options object The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options This is used for type inference when the returned type is used as a tag in TSX",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_4"
        },
        {
          "content": "You can extract the instance type of a component (equivalent to the type of this in its options) from the return type of defineComponent() like this:tsconst Foo = defineComponent(/* */) type FooInstance = InstanceTypetypeof FooFunction Signature Only supported in 3 3+defineComponent() also has an alternative signature that is meant to be used with the Composition API and render functions or JSX Instead of passing in an options object, a function is expected instead",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_5"
        },
        {
          "content": "This function works the same as the Composition API setup() function: it receives the props and the setup context The return value should be a render function - both h() and JSX are supported:jsimport { ref, h } from 'vue' const Comp = defineComponent( (props) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return h('div', count value) } }, // extra options, e g declare props and emits { props: { /*",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_6"
        },
        {
          "content": "*/ } } )The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:tsxconst Comp = defineComponent( T extends string  number(props: { msg: T; list: T[] }) = { // use Composition API here like in script setup const count = ref(0) return () = { // render function or JSX return div{count value}/div } }, // manual runtime props declaration is currently still needed",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_7"
        },
        {
          "content": "{ props: ['msg', 'list'] } )In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for defineProps in SFCs) so that the runtime props declaration can be omitted Note on webpack Treeshaking Because defineComponent() is a function call, it could look like it would produce side-effects to some build tools, e g webpack This will prevent the component from being tree-shaken even when the component is never used",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_8"
        },
        {
          "content": "To tell webpack that this function call is safe to be tree-shaken, you can add a /*__PURE__*/ comment notation before the function call:jsexport default /*__PURE__*/ defineComponent(/* */)Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that defineComponent() is in fact side-effect-free without the need for manual annotations",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_9"
        },
        {
          "content": "See also Guide - Using Vue with TypeScriptdefineAsyncComponent() Define an async component which is lazy loaded only when it is rendered The argument can either be a loader function, or an options object for more advanced control of the loading behavior Typetsfunction defineAsyncComponent( source: AsyncComponentLoader  AsyncComponentOptions ): Component type AsyncComponentLoader = () = PromiseComponent interface AsyncComponentOptions { loader: AsyncComponentLoader loadingComponent",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_10"
        },
        {
          "content": ": Component errorComponent : Component delay : number timeout : number suspensible : boolean onError : ( error: Error, retry: () = void, fail: () = void, attempts: number ) = any }See also Guide - Async ComponentsEdit this page on GitHub",
          "url": "https://vuejs.org/api/general#VPContent",
          "library": "vue",
          "chunk_id": "vue_11"
        }
      ],
      "library": "vue"
    }
  ],
  "scraped_at": 9151.883611625
}