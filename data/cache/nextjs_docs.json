{
  "library": "nextjs",
  "base_url": "https://nextjs.org/docs",
  "pages": [
    {
      "url": "https://nextjs.org/docs",
      "title": "Next.js Docs | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhat is Next.js?How to use the docsApp Router and Pages RouterPre-requisite knowledgeAccessibilityJoin our CommunityNext StepsEdit this page on GitHub Scroll to top Next.js DocsWelcome to the Next.js documentation! What is Next.js? Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. It also automatically configures lower-level tools like bundlers and compilers. You can instead focus on building your product and shipping quickly. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. How to use the docs The docs are organized into 4 sections: Getting Started: Step-by-step tutorials to help you create a new application and learn the core Next.js features. Guides: Tutorials on specific use cases, choose what's relevant to you. API Reference: Detailed technical reference for every feature. Use the sidebar to navigate through the sections, or search (Ctrl+K or Cmd+K) to quickly find a page. App Router and Pages Router Next.js has two different routers: App Router: The newer router that supports new React features like Server Components. Pages Router: The original router, still supported and being improved. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router docs. Pre-requisite knowledge Our documentation assumes some familiarity with web development. Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next.js Foundations course that has you building an application as you learn. Accessibility For the best experience when using a screen reader, we recommend using Firefox and NVDA, or Safari and VoiceOver. Join our Community If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions, Discord, X (Twitter), and Reddit.Next StepsCreate your first application and learn the core Next.js features.Getting StartedLearn how to create full-stack web applications with the Next.js App Router.PreviousContribution GuideNextApp RouterWas this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhat is Next js How to use the docsApp Router and Pages RouterPre-requisite knowledgeAccessibilityJoin our CommunityNext StepsEdit this page on GitHub Scroll to top Next js DocsWelcome to the Next js documentation What is Next js Next js is a React framework for building full-stack web applications You use React Components to build user interfaces, and Next js for additional features and optimizations",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "It also automatically configures lower-level tools like bundlers and compilers You can instead focus on building your product and shipping quickly Whether you're an individual developer or part of a larger team, Next js can help you build interactive, dynamic, and fast React applications How to use the docs The docs are organized into 4 sections: Getting Started: Step-by-step tutorials to help you create a new application and learn the core Next js features",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "Guides: Tutorials on specific use cases, choose what's relevant to you API Reference: Detailed technical reference for every feature Use the sidebar to navigate through the sections, or search (Ctrl+K or Cmd+K) to quickly find a page App Router and Pages Router Next js has two different routers: App Router: The newer router that supports new React features like Server Components Pages Router: The original router, still supported and being improved",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router docs Pre-requisite knowledge Our documentation assumes some familiarity with web development Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next js Foundations course that has you building an application as you learn",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Accessibility For the best experience when using a screen reader, we recommend using Firefox and NVDA, or Safari and VoiceOver Join our Community If you have questions about anything related to Next js, you're always welcome to ask our community on GitHub Discussions, Discord, X (Twitter), and Reddit Next StepsCreate your first application and learn the core Next js features Getting StartedLearn how to create full-stack web applications with the Next js App Router",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "PreviousContribution GuideNextApp RouterWas this helpful supported Send",
          "url": "https://nextjs.org/docs",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs#geist-skip-nav",
      "title": "Next.js Docs | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhat is Next.js?How to use the docsApp Router and Pages RouterPre-requisite knowledgeAccessibilityJoin our CommunityNext StepsEdit this page on GitHub Scroll to top Next.js DocsWelcome to the Next.js documentation! What is Next.js? Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. It also automatically configures lower-level tools like bundlers and compilers. You can instead focus on building your product and shipping quickly. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. How to use the docs The docs are organized into 4 sections: Getting Started: Step-by-step tutorials to help you create a new application and learn the core Next.js features. Guides: Tutorials on specific use cases, choose what's relevant to you. API Reference: Detailed technical reference for every feature. Use the sidebar to navigate through the sections, or search (Ctrl+K or Cmd+K) to quickly find a page. App Router and Pages Router Next.js has two different routers: App Router: The newer router that supports new React features like Server Components. Pages Router: The original router, still supported and being improved. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router docs. Pre-requisite knowledge Our documentation assumes some familiarity with web development. Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next.js Foundations course that has you building an application as you learn. Accessibility For the best experience when using a screen reader, we recommend using Firefox and NVDA, or Safari and VoiceOver. Join our Community If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions, Discord, X (Twitter), and Reddit.Next StepsCreate your first application and learn the core Next.js features.Getting StartedLearn how to create full-stack web applications with the Next.js App Router.PreviousContribution GuideNextApp RouterWas this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhat is Next js How to use the docsApp Router and Pages RouterPre-requisite knowledgeAccessibilityJoin our CommunityNext StepsEdit this page on GitHub Scroll to top Next js DocsWelcome to the Next js documentation What is Next js Next js is a React framework for building full-stack web applications You use React Components to build user interfaces, and Next js for additional features and optimizations",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "It also automatically configures lower-level tools like bundlers and compilers You can instead focus on building your product and shipping quickly Whether you're an individual developer or part of a larger team, Next js can help you build interactive, dynamic, and fast React applications How to use the docs The docs are organized into 4 sections: Getting Started: Step-by-step tutorials to help you create a new application and learn the core Next js features",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "Guides: Tutorials on specific use cases, choose what's relevant to you API Reference: Detailed technical reference for every feature Use the sidebar to navigate through the sections, or search (Ctrl+K or Cmd+K) to quickly find a page App Router and Pages Router Next js has two different routers: App Router: The newer router that supports new React features like Server Components Pages Router: The original router, still supported and being improved",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router docs Pre-requisite knowledge Our documentation assumes some familiarity with web development Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next js Foundations course that has you building an application as you learn",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Accessibility For the best experience when using a screen reader, we recommend using Firefox and NVDA, or Safari and VoiceOver Join our Community If you have questions about anything related to Next js, you're always welcome to ask our community on GitHub Discussions, Discord, X (Twitter), and Reddit Next StepsCreate your first application and learn the core Next js features Getting StartedLearn how to create full-stack web applications with the Next js App Router",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "PreviousContribution GuideNextApp RouterWas this helpful supported Send",
          "url": "https://nextjs.org/docs#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn",
      "title": "Learn Next.js | Next.js by Vercel - The React Framework",
      "content": "Start building with Next.jsGo from beginner to expert by learning the foundations of Next.js and building a fully functional demo website that uses all the latest features.Learn Next.jsLearn Next.js16 chapters that take you from React to Next.js.Placeholder React FoundationsNew to React? Learn the foundational concepts to help you go from JavaScript to React.StartNext.js Pages RouterLearn how to build a static blog with the Pages Router.StartHow does the course work?By building a full web application. Step by step.Set up your local environment and initializing the \"ACME\" Next.js project template.Use pre-styled components as part of each chapter that leverage Next.js conventions and patterns.Hook up real application logic and data to bring a fully-fledged demo website to life.At the end youll have a website thats ready to ship and the knowledge to build and deploy your own.Your progress will be synced as you complete chaptersGo at your own pace and pick up where you left offTest your knowledge during each chapterTake quick quizzes to see what youve learnedWhat will I learn?Heres everything thats covered in the course.IntroductionLearn how to build a full-stack web application with the free, Next.js Foundations course.1Getting StartedCreate a new Next.js application using the dashboard starter example and explore the project.2CSS StylingStyle your Next.js application with Tailwind and CSS modules.3Optimizing Fonts and ImagesOptimize fonts and images with the Next.js built-in components.4Creating Layouts and PagesCreate the dashboard routes and a shared layout that can be shared between multiple pages.5Navigating Between PagesLearn how to use the Link component to navigate between pages.6Setting Up Your DatabaseSetup a database for your application and seed it with initial data.7Fetching DataLearn about the different ways to fetch data in Next.js, and fetch data for your dashboard page using Server Components.8Static and Dynamic RenderingUnderstand how rendering works in Next.js, and make your dashboard app dynamic.9StreamingImprove your application's loading experience with streaming and loading skeletons.10Partial PrerenderingAn early look into Partial Prerendering and how it works.11Adding Search and PaginationAdd search and pagination to your dashboard application using Next.js APIs.12Mutating DataMutate data using React Server Actions, and revalidate the Next.js cache.13Handling ErrorsHandle errors gracefully with error.tsx and notFound.14Improving AccessibilityImplement server-side form validation and improve accessibility in your forms.15Adding AuthenticationAdd authentication to protect your dashboard routes using NextAuth.js, Server Actions, and Middleware.16Adding MetadataLearn how to add metadata to your Next.js application.17Next StepsNext.js Dashboard Course ConclusionPlaceholderLooking to go deeper?Continue learning by using our guides.View All GuidesHow to build a fullstack app with Next.js, Prisma and PostgresBuild, Deployment  GitBuild a multi-tenant app with custom domains using Next.jsBuild, Deployment  GitIntegrating Next.js and Contentful for your headless CMSDatabases  CMSBuilding Ecommerce Sites with Next.js and ShopifyDatabases  CMSUsing headless WordPress with Next.js and VercelDatabases  CMSNext.js DocumentationThe complete resource for installing, running, building with, and deploying Next.jsView the Documentation",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Start building with Next jsGo from beginner to expert by learning the foundations of Next js and building a fully functional demo website that uses all the latest features Learn Next jsLearn Next js16 chapters that take you from React to Next js Placeholder React FoundationsNew to React Learn the foundational concepts to help you go from JavaScript to React StartNext js Pages RouterLearn how to build a static blog with the Pages Router StartHow does the course work",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "By building a full web application Step by step Set up your local environment and initializing the \"ACME\" Next js project template Use pre-styled components as part of each chapter that leverage Next js conventions and patterns Hook up real application logic and data to bring a fully-fledged demo website to life At the end youll have a website thats ready to ship and the knowledge to build and deploy your own",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Your progress will be synced as you complete chaptersGo at your own pace and pick up where you left offTest your knowledge during each chapterTake quick quizzes to see what youve learnedWhat will I learn Heres everything thats covered in the course IntroductionLearn how to build a full-stack web application with the free, Next js Foundations course 1Getting StartedCreate a new Next js application using the dashboard starter example and explore the project 2CSS StylingStyle your Next",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "js application with Tailwind and CSS modules 3Optimizing Fonts and ImagesOptimize fonts and images with the Next js built-in components 4Creating Layouts and PagesCreate the dashboard routes and a shared layout that can be shared between multiple pages 5Navigating Between PagesLearn how to use the Link component to navigate between pages 6Setting Up Your DatabaseSetup a database for your application and seed it with initial data 7Fetching DataLearn about the different ways to fetch data in Next",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "js, and fetch data for your dashboard page using Server Components 8Static and Dynamic RenderingUnderstand how rendering works in Next js, and make your dashboard app dynamic 9StreamingImprove your application's loading experience with streaming and loading skeletons 10Partial PrerenderingAn early look into Partial Prerendering and how it works 11Adding Search and PaginationAdd search and pagination to your dashboard application using Next js APIs",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "12Mutating DataMutate data using React Server Actions, and revalidate the Next js cache 13Handling ErrorsHandle errors gracefully with error tsx and notFound 14Improving AccessibilityImplement server-side form validation and improve accessibility in your forms 15Adding AuthenticationAdd authentication to protect your dashboard routes using NextAuth js, Server Actions, and Middleware 16Adding MetadataLearn how to add metadata to your Next js application 17Next StepsNext",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js Dashboard Course ConclusionPlaceholderLooking to go deeper Continue learning by using our guides View All GuidesHow to build a fullstack app with Next js, Prisma and PostgresBuild, Deployment  GitBuild a multi-tenant app with custom domains using Next jsBuild, Deployment  GitIntegrating Next js and Contentful for your headless CMSDatabases  CMSBuilding Ecommerce Sites with Next js and ShopifyDatabases  CMSUsing headless WordPress with Next js and VercelDatabases  CMSNext",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js DocumentationThe complete resource for installing, running, building with, and deploying Next jsView the Documentation",
          "url": "https://nextjs.org/learn",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started",
      "title": "App Router: Getting Started | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pagePre-requisite knowledgeNext StepsEdit this page on GitHub Scroll to top Next.js DocsApp RouterGetting StartedGetting StartedWelcome to the Next.js documentation! This Getting Started section will help you create your first Next.js app and learn the core features you'll use in every project. Pre-requisite knowledge Our documentation assumes some familiarity with web development. Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next.js Foundations course that has you building an application as you learn. Next Steps InstallationLearn how to create a new Next.js application with the `create-next-app` CLI, and set up TypeScript, ESLint, and Module Path Aliases.Project StructureLearn the folder and file conventions in Next.js, and how to organize your project.Layouts and PagesLearn how to create your first pages and layouts, and link between them with the Link component.Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks.Server and Client ComponentsLearn how you can use React Server and Client Components to render parts of your application on the server or the client.Partial PrerenderingLearn how to use Partial Prerendering and combine the benefits of static and dynamic rendering.Fetching DataLearn how to fetch data and stream content that depends on data.Updating DataLearn how to mutate data using Server Functions.Caching and RevalidatingLearn how to cache and revalidate data in your application.Error HandlingLearn how to display expected errors and handle uncaught exceptions.CSSLearn about the different ways to add CSS to your application, including CSS Modules, Global CSS, Tailwind CSS, and more.Image OptimizationLearn how to optimize images in Next.jsFont OptimizationLearn how to optimize fonts in Next.jsMetadata and OG imagesLearn how to add metadata to your pages and create dynamic OG images.Route Handlers and MiddlewareLearn how to use Route Handlers and MiddlewareDeployingLearn how to deploy your Next.js application.UpgradingLearn how to upgrade your Next.js application to the latest version or canary.PreviousApp RouterNextInstallationWas this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pagePre-requisite knowledgeNext StepsEdit this page on GitHub Scroll to top Next js DocsApp RouterGetting StartedGetting StartedWelcome to the Next js documentation This Getting Started section will help you create your first Next js app and learn the core features you'll use in every project Pre-requisite knowledge Our documentation assumes some familiarity with web development",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next js Foundations course that has you building an application as you learn Next Steps InstallationLearn how to create a new Next js application with the `create-next-app` CLI, and set up TypeScript, ESLint, and Module Path Aliases Project StructureLearn the folder and file conventions in Next",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "js, and how to organize your project Layouts and PagesLearn how to create your first pages and layouts, and link between them with the Link component Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Server and Client ComponentsLearn how you can use React Server and Client Components to render parts of your application on the server or the client Partial PrerenderingLearn how to use Partial Prerendering and combine the benefits of static and dynamic rendering Fetching DataLearn how to fetch data and stream content that depends on data Updating DataLearn how to mutate data using Server Functions Caching and RevalidatingLearn how to cache and revalidate data in your application",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Error HandlingLearn how to display expected errors and handle uncaught exceptions CSSLearn about the different ways to add CSS to your application, including CSS Modules, Global CSS, Tailwind CSS, and more Image OptimizationLearn how to optimize images in Next jsFont OptimizationLearn how to optimize fonts in Next jsMetadata and OG imagesLearn how to add metadata to your pages and create dynamic OG images",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "Route Handlers and MiddlewareLearn how to use Route Handlers and MiddlewareDeployingLearn how to deploy your Next js application UpgradingLearn how to upgrade your Next js application to the latest version or canary PreviousApp RouterNextInstallationWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/installation",
      "title": "Getting Started: Installation | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageSystem requirementsAutomatic installationManual installationCreate the app directoryCreate the public folder (optional)Run the development serverSet up TypeScriptIDE PluginSet up ESLintSet up Absolute Imports and Module Path AliasesEdit this page on GitHub Scroll to top App RouterGetting StartedInstallationInstallation System requirements Before you begin, make sure your system meets the following requirements: Node.js 18.18 or later. macOS, Windows (including WSL), or Linux. Automatic installation The quickest way to create a new Next.js app is using create-next-app, which sets up everything automatically for you. To create a project, run: Terminalnpx create-next-applatest On installation, you'll see the following prompts: TerminalWhat is your project named? my-app Would you like to use TypeScript? No / Yes Would you like to use ESLint? No / Yes Would you like to use Tailwind CSS? No / Yes Would you like your code inside a `src/` directory? No / Yes Would you like to use App Router? (recommended) No / Yes Would you like to use Turbopack for `next dev`? No / Yes Would you like to customize the import alias (`/*` by default)? No / Yes What import alias would you like configured? /* After the prompts, create-next-app will create a folder with your project name and install the required dependencies. Manual installation To manually create a new Next.js app, install the required packages: pnpmnpmyarnbunTerminalpnpm i nextlatest reactlatest react-domlatest Then, add the following scripts to your package.json file: package.json{ \"scripts\": { \"dev\": \"next dev\", \"build\": \"next build\", \"start\": \"next start\", \"lint\": \"next lint\" } } These scripts refer to the different stages of developing an application: next dev: Starts the development server. next build: Builds the application for production. next start: Starts the production server. next lint: Runs ESLint. Create the app directory Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files.Create an app folder. Then, inside app, create a layout.tsx file. This file is the root layout. It's required and must contain the html and body tags.app/layout.tsxTypeScriptJavaScriptTypeScriptexport default function RootLayout({ children, }: { children: React.ReactNode }) { return ( html lang=\"en\" body{children}/body /html ) }Create a home page app/page.tsx with some initial content:app/page.tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello, Next.js!/h1 }Both layout.tsx and page.tsx will be rendered when the user visits the root of your application (/). Good to know: If you forget to create the root layout, Next.js will automatically create this file when running the development server with next dev. You can optionally use a src folder in the root of your project to separate your application's code from configuration files. Create the public folder (optional) Create a public folder at the root of your project to store static assets such as images, fonts, etc. Files inside public can then be referenced by your code starting from the base URL (/). You can then reference these assets using the root path (/). For example, public/profile.png can be referenced as /profile.png: app/page.tsxTypeScriptJavaScriptTypeScriptimport Image from 'next/image' export default function Page() { return Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} / } Run the development server Run npm run dev to start the development server. Visit http://localhost:3000 to view your application. Edit the app/page.tsx file and save it to see the updated result in your browser. Set up TypeScript Minimum TypeScript version: v4.5.2 Next.js comes with built-in TypeScript support. To add TypeScript to your project, rename a file to .ts / .tsx and run next dev. Next.js will automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options. IDE Plugin Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.You can enable the plugin in VS Code by: Opening the command palette (Ctrl/ + Shift + P) Searching for \"TypeScript: Select TypeScript Version\" Selecting \"Use Workspace Version\" See the TypeScript reference page for more information. Set up ESLint Next.js comes with built-in ESLint. It automatically installs the necessary packages and configures the proper settings when you create a new project with create-next-app. To manually add ESLint to an existing project, add next lint as a script to package.json: package.json{ \"scripts\": { \"lint\": \"next lint\" } } Then, run npm run lint and you will be guided through the installation and configuration process. Terminalnpm run lint You'll see a prompt like this: ? How would you like to configure ESLint?  Strict (recommended) Base Cancel Strict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time. Base: Includes Next.js' base ESLint configuration. Cancel: Skip configuration. Select this option if you plan on setting up your own custom ESLint configuration. If Strict or Base are selected, Next.js will automatically install eslint and eslint-config-next as dependencies in your application and create an .eslintrc.json file in the root of your project that includes your selected configuration. You can now run next lint every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (next build). Errors will fail the build, while warnings will not. See the ESLint Plugin page for more information. Set up Absolute Imports and Module Path Aliases Next.js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig.json and jsconfig.json files. These options allow you to alias project directories to absolute paths, making it easier and cleaner to import modules. For example: // Before import { Button } from '../../../components/button' // After import { Button } from '/components/button' To configure absolute imports, add the baseUrl configuration option to your tsconfig.json or jsconfig.json file. For example: tsconfig.json or jsconfig.json{ \"compilerOptions\": { \"baseUrl\": \"src/\" } } In addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths. For example, the following configuration maps /components/* to components/*: tsconfig.json or jsconfig.json{ \"compilerOptions\": { \"baseUrl\": \"src/\", \"paths\": { \"/styles/*\": [\"styles/*\"], \"/components/*\": [\"components/*\"] } } } Each of the \"paths\" are relative to the baseUrl location.PreviousGetting StartedNextProject StructureWas this helpful? supported.Send",
      "code_blocks": [
        "create-next-app",
        "npx create-next-app@latest",
        "npx create-next-app@latest",
        "What is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like your code inside a `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)? No / Yes\nWhat import alias would you like configured? @/*",
        "What is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like your code inside a `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)? No / Yes\nWhat import alias would you like configured? @/*",
        "create-next-app",
        "pnpm i next@latest react@latest react-dom@latest",
        "pnpm i next@latest react@latest react-dom@latest",
        "package.json",
        "{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}",
        "{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}",
        "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}",
        "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}",
        "app/page.tsx",
        "export default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}",
        "export default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}",
        "public/profile.png",
        "/profile.png",
        "import Image from 'next/image'\n \nexport default function Page() {\n  return <Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} />\n}",
        "import Image from 'next/image'\n \nexport default function Page() {\n  return <Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} />\n}",
        "npm run dev",
        "http://localhost:3000",
        "app/page.tsx",
        "tsconfig.json",
        "create-next-app",
        "package.json",
        "{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}",
        "{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}",
        "npm run lint",
        "npm run lint",
        "npm run lint",
        "eslint-config-next",
        ".eslintrc.json",
        "tsconfig.json",
        "jsconfig.json",
        "// Before\nimport { Button } from '../../../components/button'\n \n// After\nimport { Button } from '@/components/button'",
        "// Before\nimport { Button } from '../../../components/button'\n \n// After\nimport { Button } from '@/components/button'",
        "tsconfig.json",
        "jsconfig.json",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\"\n  }\n}",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\"\n  }\n}",
        "@/components/*",
        "components/*",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageSystem requirementsAutomatic installationManual installationCreate the app directoryCreate the public folder (optional)Run the development serverSet up TypeScriptIDE PluginSet up ESLintSet up Absolute Imports and Module Path AliasesEdit this page on GitHub Scroll to top App RouterGetting StartedInstallationInstallation System requirements Before you begin, make sure your system meets the following requirements: Node js 18",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "18 or later macOS, Windows (including WSL), or Linux Automatic installation The quickest way to create a new Next js app is using create-next-app, which sets up everything automatically for you To create a project, run: Terminalnpx create-next-applatest On installation, you'll see the following prompts: TerminalWhat is your project named my-app Would you like to use TypeScript No / Yes Would you like to use ESLint No / Yes Would you like to use Tailwind CSS",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "No / Yes Would you like your code inside a `src/` directory No / Yes Would you like to use App Router (recommended) No / Yes Would you like to use Turbopack for `next dev` No / Yes Would you like to customize the import alias (`/*` by default) No / Yes What import alias would you like configured /* After the prompts, create-next-app will create a folder with your project name and install the required dependencies Manual installation To manually create a new Next",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "js app, install the required packages: pnpmnpmyarnbunTerminalpnpm i nextlatest reactlatest react-domlatest Then, add the following scripts to your package json file: package json{ \"scripts\": { \"dev\": \"next dev\", \"build\": \"next build\", \"start\": \"next start\", \"lint\": \"next lint\" } } These scripts refer to the different stages of developing an application: next dev: Starts the development server next build: Builds the application for production next start: Starts the production server",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "next lint: Runs ESLint Create the app directory Next js uses file-system routing, which means the routes in your application are determined by how you structure your files Create an app folder Then, inside app, create a layout tsx file This file is the root layout It's required and must contain the html and body tags app/layout tsxTypeScriptJavaScriptTypeScriptexport default function RootLayout({ children, }: { children: React",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "ReactNode }) { return ( html lang=\"en\" body{children}/body /html ) }Create a home page app/page tsx with some initial content:app/page tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello, Next js /h1 }Both layout tsx and page tsx will be rendered when the user visits the root of your application (/) Good to know: If you forget to create the root layout, Next js will automatically create this file when running the development server with next dev",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "You can optionally use a src folder in the root of your project to separate your application's code from configuration files Create the public folder (optional) Create a public folder at the root of your project to store static assets such as images, fonts, etc Files inside public can then be referenced by your code starting from the base URL (/) You can then reference these assets using the root path (/) For example, public/profile png can be referenced as /profile png: app/page",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptimport Image from 'next/image' export default function Page() { return Image src=\"/profile png\" alt=\"Profile\" width={100} height={100} / } Run the development server Run npm run dev to start the development server Visit http://localhost:3000 to view your application Edit the app/page tsx file and save it to see the updated result in your browser Set up TypeScript Minimum TypeScript version: v4 5 2 Next js comes with built-in TypeScript support",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "To add TypeScript to your project, rename a file to ts / tsx and run next dev Next js will automatically install the necessary dependencies and add a tsconfig json file with the recommended config options IDE Plugin Next js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "You can enable the plugin in VS Code by: Opening the command palette (Ctrl/ + Shift + P) Searching for \"TypeScript: Select TypeScript Version\" Selecting \"Use Workspace Version\" See the TypeScript reference page for more information Set up ESLint Next js comes with built-in ESLint It automatically installs the necessary packages and configures the proper settings when you create a new project with create-next-app To manually add ESLint to an existing project, add next lint as a script to package",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "json: package json{ \"scripts\": { \"lint\": \"next lint\" } } Then, run npm run lint and you will be guided through the installation and configuration process Terminalnpm run lint You'll see a prompt like this: How would you like to configure ESLint Strict (recommended) Base Cancel Strict: Includes Next js' base ESLint configuration along with a stricter Core Web Vitals rule-set This is the recommended configuration for developers setting up ESLint for the first time Base: Includes Next",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "js' base ESLint configuration Cancel: Skip configuration Select this option if you plan on setting up your own custom ESLint configuration If Strict or Base are selected, Next js will automatically install eslint and eslint-config-next as dependencies in your application and create an eslintrc json file in the root of your project that includes your selected configuration You can now run next lint every time you want to run ESLint to catch errors",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "Once ESLint has been set up, it will also automatically run during every build (next build) Errors will fail the build, while warnings will not See the ESLint Plugin page for more information Set up Absolute Imports and Module Path Aliases Next js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig json and jsconfig json files These options allow you to alias project directories to absolute paths, making it easier and cleaner to import modules",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "For example: // Before import { Button } from ' / / /components/button' // After import { Button } from '/components/button' To configure absolute imports, add the baseUrl configuration option to your tsconfig json or jsconfig json file For example: tsconfig json or jsconfig json{ \"compilerOptions\": { \"baseUrl\": \"src/\" } } In addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "For example, the following configuration maps /components/* to components/*: tsconfig json or jsconfig json{ \"compilerOptions\": { \"baseUrl\": \"src/\", \"paths\": { \"/styles/*\": [\"styles/*\"], \"/components/*\": [\"components/*\"] } } } Each of the \"paths\" are relative to the baseUrl location PreviousGetting StartedNextProject StructureWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/installation",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/project-structure",
      "title": "Getting Started: Project Structure | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageFolder and file conventionsTop-level foldersTop-level filesRouting FilesNested routesDynamic routesRoute Groups and private foldersParallel and Intercepted RoutesMetadata file conventionsApp iconsOpen Graph and Twitter imagesSEOOrganizing your projectComponent hierarchyColocationPrivate foldersRoute groupssrc folderExamplesStore project files outside of appStore project files in top-level folders inside of appSplit project files by feature or routeOrganize routes without affecting the URL pathOpting specific segments into a layoutOpting for loading skeletons on a specific routeCreating multiple root layoutsEdit this page on GitHub Scroll to top App RouterGetting StartedProject StructureProject structure and organizationThis page provides an overview of all the folder and file conventions in Next.js, and recommendations for organizing your project. Folder and file conventions Top-level folders Top-level folders are used to organize your application's code and static assets. appApp RouterpagesPages RouterpublicStatic assets to be servedsrcOptional application source folder Top-level files Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables. Next.jsnext.config.jsConfiguration file for Next.jspackage.jsonProject dependencies and scriptsinstrumentation.tsOpenTelemetry and Instrumentation filemiddleware.tsNext.js request middleware.envEnvironment variables.env.localLocal environment variables.env.productionProduction environment variables.env.developmentDevelopment environment variables.eslintrc.jsonConfiguration file for ESLint.gitignoreGit files and folders to ignorenext-env.d.tsTypeScript declaration file for Next.jstsconfig.jsonConfiguration file for TypeScriptjsconfig.jsonConfiguration file for JavaScript Routing Files layout.js .jsx .tsxLayoutpage.js .jsx .tsxPageloading.js .jsx .tsxLoading UInot-found.js .jsx .tsxNot found UIerror.js .jsx .tsxError UIglobal-error.js .jsx .tsxGlobal error UIroute.js .tsAPI endpointtemplate.js .jsx .tsxRe-rendered layoutdefault.js .jsx .tsxParallel route fallback pageNested routes folderRoute segmentfolder/folderNested route segmentDynamic routes [folder]Dynamic route segment[...folder]Catch-all route segment[[...folder]]Optional catch-all route segmentRoute Groups and private folders (folder)Group routes without affecting routing_folderOpt folder and all child segments out of routingParallel and Intercepted Routes folderNamed slot(.)folderIntercept same level(..)folderIntercept one level above(..)(..)folderIntercept two levels above(...)folderIntercept from rootMetadata file conventions App icons favicon.icoFavicon fileicon.ico .jpg .jpeg .png .svgApp Icon fileicon.js .ts .tsxGenerated App Iconapple-icon.jpg .jpeg, .pngApple App Icon fileapple-icon.js .ts .tsxGenerated Apple App IconOpen Graph and Twitter images opengraph-image.jpg .jpeg .png .gifOpen Graph image fileopengraph-image.js .ts .tsxGenerated Open Graph imagetwitter-image.jpg .jpeg .png .gifTwitter image filetwitter-image.js .ts .tsxGenerated Twitter imageSEO sitemap.xmlSitemap filesitemap.js .tsGenerated Sitemaprobots.txtRobots filerobots.js .tsGenerated Robots file Organizing your project Next.js is unopinionated about how you organize and colocate your project files. But it does provide several features to help you organize your project.Component hierarchy The components defined in special files are rendered in a specific hierarchy: layout.js template.js error.js (React error boundary) loading.js (React suspense boundary) not-found.js (React error boundary) page.js or nested layout.js The components are rendered recursively in nested routes, meaning the components of a route segment will be nested inside the components of its parent segment.Colocation In the app directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path.However, even though route structure is defined through folders, a route is not publicly accessible until a page.js or route.js file is added to a route segment.And, even when a route is made publicly accessible, only the content returned by page.js or route.js is sent to the client.This means that project files can be safely colocated inside route segments in the app directory without accidentally being routable. Good to know: While you can colocate your project files in app you don't have to. If you prefer, you can keep them outside the app directory. Private folders Private folders can be created by prefixing a folder with an underscore: _folderNameThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.Since files in the app directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for: Separating UI logic from routing logic. Consistently organizing internal files across a project and the Next.js ecosystem. Sorting and grouping files in code editors. Avoiding potential naming conflicts with future Next.js file conventions. Good to know: While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern. You can create URL segments that start with an underscore by prefixing the folder name with 5F (the URL-encoded form of an underscore): 5FfolderName. If you don't use private folders, it would be helpful to know Next.js special file conventions to prevent unexpected naming conflicts. Route groups Route groups can be created by wrapping a folder in parenthesis: (folderName)This indicates the folder is for organizational purposes and should not be included in the route's URL path.Route groups are useful for: Organizing routes by site section, intent, or team. e.g. marketing pages, admin pages, etc. Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment src folder Next.js supports storing application code (including app) inside an optional src folder. This separates application code from project configuration files which mostly live in the root of a project.Examples The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project. Good to know: In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui, utils, hooks, styles, etc. Store project files outside of app This strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes.Store project files in top-level folders inside of app This strategy stores all application code in shared folders in the root of the app directory.Split project files by feature or route This strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them.Organize routes without affecting the URL path To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. (marketing) or (shop)).Even though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout.js file inside their folders.Opting specific segments into a layout To opt specific routes into a layout, create a new route group (e.g. (shop)) and move the routes that share the same layout into the group (e.g. account and cart). The routes outside of the group will not share the layout (e.g. checkout).Opting for loading skeletons on a specific route To apply a loading skeleton via a loading.js file to a specific route, create a new route group (e.g., /(overview)) and then move your loading.tsx inside that route group.Now, the loading.tsx file will only apply to your dashboard  overview page instead of all your dashboard pages without affecting the URL path structure.Creating multiple root layouts To create multiple root layouts, remove the top-level layout.js file, and add a layout.js file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The html and body tags need to be added to each root layout.In the example above, both (marketing) and (shop) have their own root layout.PreviousInstallationNextLayouts and PagesWas this helpful? supported.Send",
      "code_blocks": [
        "next.config.js",
        "package.json",
        "instrumentation.ts",
        "middleware.ts",
        ".env.production",
        ".env.development",
        ".eslintrc.json",
        "next-env.d.ts",
        "tsconfig.json",
        "jsconfig.json",
        "global-error",
        "folder/folder",
        "[...folder]",
        "[[...folder]]",
        "(..)(..)folder",
        "(...)folder",
        "opengraph-image",
        "opengraph-image",
        "twitter-image",
        "twitter-image",
        "template.js",
        "not-found.js",
        "_folderName",
        "%5FfolderName",
        "(folderName)",
        "(marketing)",
        "(marketing)",
        "/(overview)",
        "loading.tsx",
        "loading.tsx",
        "(marketing)"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageFolder and file conventionsTop-level foldersTop-level filesRouting FilesNested routesDynamic routesRoute Groups and private foldersParallel and Intercepted RoutesMetadata file conventionsApp iconsOpen Graph and Twitter imagesSEOOrganizing your projectComponent hierarchyColocationPrivate foldersRoute groupssrc folderExamplesStore project files outside of appStore project files in top-level folders inside of appSplit project files by feature or routeOrganize routes without affecting the URL pathOpting specific segments into a layoutOpting for loading skeletons on a specific routeCreating multiple root layoutsEdit this page on GitHub Scroll to top App RouterGetting StartedProject StructureProject structure and organizationThis page provides an overview of all the folder and file conventions in Next",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "js, and recommendations for organizing your project Folder and file conventions Top-level folders Top-level folders are used to organize your application's code and static assets appApp RouterpagesPages RouterpublicStatic assets to be servedsrcOptional application source folder Top-level files Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables Next jsnext config jsConfiguration file for Next",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "jspackage jsonProject dependencies and scriptsinstrumentation tsOpenTelemetry and Instrumentation filemiddleware tsNext js request middleware envEnvironment variables env localLocal environment variables env productionProduction environment variables env developmentDevelopment environment variables eslintrc jsonConfiguration file for ESLint gitignoreGit files and folders to ignorenext-env d tsTypeScript declaration file for Next jstsconfig jsonConfiguration file for TypeScriptjsconfig",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "jsonConfiguration file for JavaScript Routing Files layout js jsx tsxLayoutpage js jsx tsxPageloading js jsx tsxLoading UInot-found js jsx tsxNot found UIerror js jsx tsxError UIglobal-error js jsx tsxGlobal error UIroute js tsAPI endpointtemplate js jsx tsxRe-rendered layoutdefault js jsx tsxParallel route fallback pageNested routes folderRoute segmentfolder/folderNested route segmentDynamic routes [folder]Dynamic route segment[ folder]Catch-all route segment[[",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "folder]]Optional catch-all route segmentRoute Groups and private folders (folder)Group routes without affecting routing_folderOpt folder and all child segments out of routingParallel and Intercepted Routes folderNamed slot( )folderIntercept same level( )folderIntercept one level above( )( )folderIntercept two levels above( )folderIntercept from rootMetadata file conventions App icons favicon icoFavicon fileicon ico jpg jpeg png svgApp Icon fileicon js ts tsxGenerated App Iconapple-icon jpg jpeg,",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "pngApple App Icon fileapple-icon js ts tsxGenerated Apple App IconOpen Graph and Twitter images opengraph-image jpg jpeg png gifOpen Graph image fileopengraph-image js ts tsxGenerated Open Graph imagetwitter-image jpg jpeg png gifTwitter image filetwitter-image js ts tsxGenerated Twitter imageSEO sitemap xmlSitemap filesitemap js tsGenerated Sitemaprobots txtRobots filerobots js tsGenerated Robots file Organizing your project Next",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "js is unopinionated about how you organize and colocate your project files But it does provide several features to help you organize your project Component hierarchy The components defined in special files are rendered in a specific hierarchy: layout js template js error js (React error boundary) loading js (React suspense boundary) not-found js (React error boundary) page js or nested layout",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "js The components are rendered recursively in nested routes, meaning the components of a route segment will be nested inside the components of its parent segment Colocation In the app directory, nested folders define route structure Each folder represents a route segment that is mapped to a corresponding segment in a URL path However, even though route structure is defined through folders, a route is not publicly accessible until a page js or route js file is added to a route segment",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "And, even when a route is made publicly accessible, only the content returned by page js or route js is sent to the client This means that project files can be safely colocated inside route segments in the app directory without accidentally being routable Good to know: While you can colocate your project files in app you don't have to If you prefer, you can keep them outside the app directory",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "Private folders Private folders can be created by prefixing a folder with an underscore: _folderNameThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing Since files in the app directory can be safely colocated by default, private folders are not required for colocation However, they can be useful for: Separating UI logic from routing logic",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "Consistently organizing internal files across a project and the Next js ecosystem Sorting and grouping files in code editors Avoiding potential naming conflicts with future Next js file conventions Good to know: While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "You can create URL segments that start with an underscore by prefixing the folder name with 5F (the URL-encoded form of an underscore): 5FfolderName If you don't use private folders, it would be helpful to know Next js special file conventions to prevent unexpected naming conflicts Route groups Route groups can be created by wrapping a folder in parenthesis: (folderName)This indicates the folder is for organizational purposes and should not be included in the route's URL path",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "Route groups are useful for: Organizing routes by site section, intent, or team e g marketing pages, admin pages, etc Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment src folder Next js supports storing application code (including app) inside an optional src folder",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "This separates application code from project configuration files which mostly live in the root of a project Examples The following section lists a very high-level overview of common strategies The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "Good to know: In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui, utils, hooks, styles, etc Store project files outside of app This strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        },
        {
          "content": "Store project files in top-level folders inside of app This strategy stores all application code in shared folders in the root of the app directory Split project files by feature or route This strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them Organize routes without affecting the URL path To organize routes without affecting the URL, create a group to keep related routes together",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_22"
        },
        {
          "content": "The folders in parenthesis will be omitted from the URL (e g (marketing) or (shop)) Even though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout js file inside their folders Opting specific segments into a layout To opt specific routes into a layout, create a new route group (e g (shop)) and move the routes that share the same layout into the group (e g account and cart)",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_23"
        },
        {
          "content": "The routes outside of the group will not share the layout (e g checkout) Opting for loading skeletons on a specific route To apply a loading skeleton via a loading js file to a specific route, create a new route group (e g , /(overview)) and then move your loading tsx inside that route group Now, the loading tsx file will only apply to your dashboard  overview page instead of all your dashboard pages without affecting the URL path structure",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_24"
        },
        {
          "content": "Creating multiple root layouts To create multiple root layouts, remove the top-level layout js file, and add a layout js file inside each route group This is useful for partitioning an application into sections that have a completely different UI or experience The html and body tags need to be added to each root layout In the example above, both (marketing) and (shop) have their own root layout PreviousInstallationNextLayouts and PagesWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_25"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
      "title": "Getting Started: Layouts and Pages | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageCreating a pageCreating a layoutCreating a nested routeNesting layoutsCreating a dynamic segmentLinking between pagesAPI ReferenceEdit this page on GitHub Scroll to top App RouterGetting StartedLayouts and PagesLayouts and PagesNext.js uses file-system based routing, meaning you can use folders and files to define routes. This page will guide you through how to create layouts and pages, and link between them. Creating a page A page is UI that is rendered on a specific route. To create a page, add a page file inside the app directory and default export a React component. For example, to create an index page (/): app/page.tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello Next.js!/h1 } Creating a layout A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender. You can define a layout by default exporting a React component from a layout file. The component should accept a children prop which can be a page or another layout. For example, to create a layout that accepts your index page as child, add a layout file inside the app directory: app/layout.tsxTypeScriptJavaScriptTypeScriptexport default function DashboardLayout({ children, }: { children: React.ReactNode }) { return ( html lang=\"en\" body {/* Layout UI */} {/* Place children where you want to render a page or nested layout */} main{children}/main /body /html ) } The layout above is called a root layout because it's defined at the root of the app directory. The root layout is required and must contain html and body tags. Creating a nested route A nested route is a route composed of multiple URL segments. For example, the /blog/[slug] route is composed of three segments: / (Root Segment) blog (Segment) [slug] (Leaf Segment) In Next.js: Folders are used to define the route segments that map to URL segments. Files (like page and layout) are used to create UI that is shown for a segment. To create nested routes, you can nest folders inside each other. For example, to add a route for /blog, create a folder called blog in the app directory. Then, to make /blog publicly accessible, add a page.tsx file: app/blog/page.tsxTypeScriptJavaScriptTypeScript// Dummy imports import { getPosts } from '/lib/posts' import { Post } from '/ui/post' export default async function Page() { const posts = await getPosts() return ( ul {posts.map((post) = ( Post key={post.id} post={post} / ))} /ul ) } You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file: app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptfunction generateStaticParams() {} export default function Page() { return h1Hello, Blog Post Page!/h1 } Wrapping a folder name in square brackets (e.g. [slug]) creates a dynamic route segment which is used to generate multiple pages from data. e.g. blog posts, product pages, etc. Nesting layouts By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop. You can nest layouts by adding layout inside specific route segments (folders). For example, to create a layout for the /blog route, add a new layout file inside the blog folder. app/blog/layout.tsxTypeScriptJavaScriptTypeScriptexport default function BlogLayout({ children, }: { children: React.ReactNode }) { return section{children}/section } If you were to combine the two layouts above, the root layout (app/layout.js) would wrap the blog layout (app/blog/layout.js), which would wrap the blog (app/blog/page.js) and blog post page (app/blog/[slug]/page.js). Creating a dynamic segment Dynamic segments allow you to create routes that are generated from data. For example, instead of manually creating a route for each individual blog post, you can create a dynamic segment to generate the routes based on blog post data. To create a dynamic segment, wrap the segment (folder) name in square brackets: [segmentName]. For example, in the app/blog/[slug]/page.tsx route, the [slug] is the dynamic segment. app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptexport default async function BlogPostPage({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params const post = await getPost(slug) return ( div h1{post.title}/h1 p{post.content}/p /div ) } Learn more about Dynamic Segments. Linking between pages You can use the Link component to navigate between routes. Link is a built-in Next.js component that extends the HTML a tag to provide prefetching and client-side navigation. For example, to generate a list of blog posts, import Link from next/link and pass a href prop to the component: app/ui/post.tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default async function Post({ post }) { const posts = await getPosts() return ( ul {posts.map((post) = ( li key={post.slug} Link href={`/blog/{post.slug}`}{post.title}/Link /li ))} /ul ) } Good to know: Link is the primary way to navigate between routes in Next.js. You can also use the useRouter hook for more advanced navigation. API ReferenceLearn more about the features mentioned in this page by reading the API Reference.Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks.layout.jsAPI reference for the layout.js file.page.jsAPI reference for the page.js file.Link ComponentEnable fast client-side navigation with the built-in `next/link` component.Dynamic SegmentsDynamic Route Segments can be used to programmatically generate route segments from dynamic data.PreviousProject StructureNextLinking and NavigatingWas this helpful? supported.Send",
      "code_blocks": [
        "export default function Page() {\n  return <h1>Hello Next.js!</h1>\n}",
        "export default function Page() {\n  return <h1>Hello Next.js!</h1>\n}",
        "export default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}",
        "export default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}",
        "/blog/[slug]",
        "// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n \nexport default async function Page() {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}",
        "// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n \nexport default async function Page() {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}",
        "function generateStaticParams() {}\n \nexport default function Page() {\n  return <h1>Hello, Blog Post Page!</h1>\n}",
        "function generateStaticParams() {}\n \nexport default function Page() {\n  return <h1>Hello, Blog Post Page!</h1>\n}",
        "export default function BlogLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}",
        "export default function BlogLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}",
        "app/layout.js",
        "app/blog/layout.js",
        "app/blog/page.js",
        "app/blog/[slug]/page.js",
        "[segmentName]",
        "app/blog/[slug]/page.tsx",
        "export default async function BlogPostPage({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const post = await getPost(slug)\n \n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}",
        "export default async function BlogPostPage({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const post = await getPost(slug)\n \n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}",
        "import Link from 'next/link'\n \nexport default async function Post({ post }) {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.slug}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}",
        "import Link from 'next/link'\n \nexport default async function Post({ post }) {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.slug}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageCreating a pageCreating a layoutCreating a nested routeNesting layoutsCreating a dynamic segmentLinking between pagesAPI ReferenceEdit this page on GitHub Scroll to top App RouterGetting StartedLayouts and PagesLayouts and PagesNext js uses file-system based routing, meaning you can use folders and files to define routes This page will guide you through how to create layouts and pages, and link between them",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Creating a page A page is UI that is rendered on a specific route To create a page, add a page file inside the app directory and default export a React component For example, to create an index page (/): app/page tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello Next js /h1 } Creating a layout A layout is UI that is shared between multiple pages On navigation, layouts preserve state, remain interactive, and do not rerender",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "You can define a layout by default exporting a React component from a layout file The component should accept a children prop which can be a page or another layout For example, to create a layout that accepts your index page as child, add a layout file inside the app directory: app/layout tsxTypeScriptJavaScriptTypeScriptexport default function DashboardLayout({ children, }: { children: React",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "ReactNode }) { return ( html lang=\"en\" body {/* Layout UI */} {/* Place children where you want to render a page or nested layout */} main{children}/main /body /html ) } The layout above is called a root layout because it's defined at the root of the app directory The root layout is required and must contain html and body tags Creating a nested route A nested route is a route composed of multiple URL segments",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "For example, the /blog/[slug] route is composed of three segments: / (Root Segment) blog (Segment) [slug] (Leaf Segment) In Next js: Folders are used to define the route segments that map to URL segments Files (like page and layout) are used to create UI that is shown for a segment To create nested routes, you can nest folders inside each other For example, to add a route for /blog, create a folder called blog in the app directory Then, to make /blog publicly accessible, add a page",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "tsx file: app/blog/page tsxTypeScriptJavaScriptTypeScript// Dummy imports import { getPosts } from '/lib/posts' import { Post } from '/ui/post' export default async function Page() { const posts = await getPosts() return ( ul {posts map((post) = ( Post key={post id} post={post} / ))} /ul ) } You can continue nesting folders to create nested routes For example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file: app/blog/[slug]/page",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptfunction generateStaticParams() {} export default function Page() { return h1Hello, Blog Post Page /h1 } Wrapping a folder name in square brackets (e g [slug]) creates a dynamic route segment which is used to generate multiple pages from data e g blog posts, product pages, etc Nesting layouts By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "You can nest layouts by adding layout inside specific route segments (folders) For example, to create a layout for the /blog route, add a new layout file inside the blog folder app/blog/layout tsxTypeScriptJavaScriptTypeScriptexport default function BlogLayout({ children, }: { children: React ReactNode }) { return section{children}/section } If you were to combine the two layouts above, the root layout (app/layout js) would wrap the blog layout (app/blog/layout",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "js), which would wrap the blog (app/blog/page js) and blog post page (app/blog/[slug]/page js) Creating a dynamic segment Dynamic segments allow you to create routes that are generated from data For example, instead of manually creating a route for each individual blog post, you can create a dynamic segment to generate the routes based on blog post data To create a dynamic segment, wrap the segment (folder) name in square brackets: [segmentName] For example, in the app/blog/[slug]/page",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "tsx route, the [slug] is the dynamic segment app/blog/[slug]/page tsxTypeScriptJavaScriptTypeScriptexport default async function BlogPostPage({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params const post = await getPost(slug) return ( div h1{post title}/h1 p{post content}/p /div ) } Learn more about Dynamic Segments Linking between pages You can use the Link component to navigate between routes Link is a built-in Next",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "js component that extends the HTML a tag to provide prefetching and client-side navigation For example, to generate a list of blog posts, import Link from next/link and pass a href prop to the component: app/ui/post tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default async function Post({ post }) { const posts = await getPosts() return ( ul {posts map((post) = ( li key={post slug} Link href={`/blog/{post slug}`}{post",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "title}/Link /li ))} /ul ) } Good to know: Link is the primary way to navigate between routes in Next js You can also use the useRouter hook for more advanced navigation API ReferenceLearn more about the features mentioned in this page by reading the API Reference Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks layout",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "jsAPI reference for the layout js file page jsAPI reference for the page js file Link ComponentEnable fast client-side navigation with the built-in `next/link` component Dynamic SegmentsDynamic Route Segments can be used to programmatically generate route segments from dynamic data PreviousProject StructureNextLinking and NavigatingWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
      "title": "Getting Started: Linking and Navigating | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow navigation worksServer RenderingPrefetchingStreamingClient-side transitionsWhat can make transitions slow?Dynamic routes without loading.tsxDynamic segments without generateStaticParamsSlow networksDisabling prefetchingHydration not completedExamplesNative History APIwindow.history.pushStatewindow.history.replaceStateNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedLinking and NavigatingLinking and NavigatingIn Next.js, routes are rendered on the server by default. This often means the client has to wait for a server response before a new route can be shown. Next.js comes with built-in prefetching, streaming, and client-side transitions ensuring navigation stays fast and responsive. This guide explains how navigation works in Next.js and how you can optimize it for dynamic routes and slow networks. How navigation works To understand how navigation works in Next.js, it helps to be familiar with the following concepts: Server Rendering Prefetching Streaming Client-side transitions Server Rendering In Next.js, Layouts and Pages are React Server Components by default. On initial and subsequent navigations, the Server Component Payload is generated on the server before being sent to the client. There are two types of server rendering, based on when it happens: Static Rendering (or Prerendering) happens at build time or during revalidation and the result is cached. Dynamic Rendering happens at request time in response to a client request. The trade-off of server rendering is that the client must wait for the server to respond before the new route can be shown. Next.js addresses this delay by prefetching routes the user is likely to visit and performing client-side transitions. Good to know: HTML is also generated for the initial visit. Prefetching Prefetching is the process of loading a route in the background before the user navigates to it. This makes navigation between routes in your application feel instant, because by the time a user clicks on a link, the data to render the next route is already available client side. Next.js automatically prefetches routes linked with the Link component when they enter the user's viewport. app/layout.tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default function Layout({ children }: { children: React.ReactNode }) { return ( html body nav {/* Prefetched when the link is hovered or enters the viewport */} Link href=\"/blog\"Blog/Link {/* No prefetching */} a href=\"/contact\"Contact/a /nav {children} /body /html ) } How much of the route is prefetched depends on whether it's static or dynamic: Static Route: the full route is prefetched. Dynamic Route: prefetching is skipped, or the route is partially prefetched if loading.tsx is present. By skipping or partially prefetching dynamic routes, Next.js avoids unnecessary work on the server for routes the users may never visit. However, waiting for a server response before navigation can give the users the impression that the app is not responding. To improve the navigation experience to dynamic routes, you can use streaming. Streaming Streaming allows the server to send parts of a dynamic route to the client as soon as they're ready, rather than waiting for the entire route to be rendered. This means users see something sooner, even if parts of the page are still loading. For dynamic routes, it means they can be partially prefetched. That is, shared layouts and loading skeletons can be requested ahead of time. To use streaming, create a loading.tsx in your route folder: app/dashboard/loading.tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { // Add fallback UI that will be shown while the route is loading. return LoadingSkeleton / } Behind the scenes, Next.js will automatically wrap the page.tsx contents in a Suspense boundary. The prefetched fallback UI will be shown while the route is loading, and swapped for the actual content once ready. Good to know: You can also use Suspense to create loading UI for nested components. Benefits of loading.tsx: Immediate navigation and visual feedback for the user. Shared layouts remain interactive and navigation is interruptible. Improved Core Web Vitals: TTFB, FCP, and TTI. To further improve the navigation experience, Next.js performs a client-side transition with the Link component. Client-side transitions Traditionally, navigation to a server-rendered page triggers a full page load. This clears state, resets scroll position, and blocks interactivity. Next.js avoids this with client-side transitions using the Link component. Instead of reloading the page, it updates the content dynamically by: Keeping any shared layouts and UI. Replacing the current page with the prefetched loading state or a new page if available. Client-side transitions are what makes a server-rendered apps feel like client-rendered apps. And when paired with prefetching and streaming, it enables fast transitions, even for dynamic routes. What can make transitions slow? These Next.js optimizations make navigation fast and responsive. However, under certain conditions, transitions can still feel slow. Here are some common causes and how to improve the user experience: Dynamic routes without loading.tsx When navigating to a dynamic route, the client must wait for the server response before showing the result. This can give the users the impression that the app is not responding. We recommend adding loading.tsx to dynamic routes to enable partial prefetching, trigger immediate navigation, and display a loading UI while the route renders. app/blog/[slug]/loading.tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { return LoadingSkeleton / } Good to know: In development mode, you can use the Next.js Devtools to identify if the route is static or dynamic. See devIndicators for more information. Dynamic segments without generateStaticParams If a dynamic segment could be prerendered but isn't because it's missing generateStaticParams, the route will fallback to dynamic rendering at request time. Ensure the route is statically generated at build time by adding generateStaticParams: app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptexport async function generateStaticParams() { const posts = await fetch('https://.../posts').then((res) = res.json()) return posts.map((post) = ({ slug: post.slug, })) } export default async function Page({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params // ... } Slow networks On slow or unstable networks, prefetching may not finish before the user clicks a link. This can affect both static and dynamic routes. In these cases, the loading.js fallback may not appear immediately because it hasn't been prefetched yet. To improve perceived performance, you can use the useLinkStatus hook to show inline visual feedback to the user (like spinners or text glimmers on the link) while a transition is in progress. app/ui/loading-indicator.tsxTypeScriptJavaScriptTypeScript'use client' import { useLinkStatus } from 'next/link' export default function LoadingIndicator() { const { pending } = useLinkStatus() return pending ? ( div role=\"status\" aria-label=\"Loading\" className=\"spinner\" / ) : null } You can \"debounce\" the loading indicator by adding an initial animation delay (e.g. 100ms) and starting the animation as invisible (e.g. opacity: 0). This means the loading indicator will only be shown if the navigation takes longer than the specified delay. .spinner { /* ... */ opacity: 0; animation: fadeIn 500ms 100ms forwards, rotate 1s linear infinite; } keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } keyframes rotate { to { transform: rotate(360deg); } } Good to know: You can use other visual feedback patterns like a progress bar. View an example here. Disabling prefetching You can opt out of prefetching by setting the prefetch prop to false on the Link component. This is useful to avoid unnecessary usage of resources when rendering large lists of links (e.g. an infinite scroll table). Link prefetch={false} href=\"/blog\" Blog /Link However, disabling prefetching comes with trade-offs: Static routes will only be fetched when the user clicks the link. Dynamic routes will need to be rendered on the server first before the client can navigate to it. To reduce resource usage without fully disabling prefetch, you can prefetch only on hover. This limits prefetching to routes the user is more likely to visit, rather than all links in the viewport. app/ui/hover-prefetch-link.tsxTypeScriptJavaScriptTypeScript'use client' import Link from 'next/link' import { useState } from 'react' function HoverPrefetchLink({ href, children, }: { href: string children: React.ReactNode }) { const [active, setActive] = useState(false) return ( Link href={href} prefetch={active ? null : false} onMouseEnter={() = setActive(true)}  {children} /Link ) } Hydration not completed Link is a Client Component and must be hydrated before it can prefetch routes. On the initial visit, large JavaScript bundles can delay hydration, preventing prefetching from starting right away. React mitigates this with Selective Hydration and you can further improve this by: Using the next/bundle-analyzer plugin to identify and reduce bundle size by removing large dependencies. Moving logic from the client to the server where possible. See the Server and Client Components docs for guidance. Examples Native History API Next.js allows you to use the native window.history.pushState and window.history.replaceState methods to update the browser's history stack without reloading the page. pushState and replaceState calls integrate into the Next.js Router, allowing you to sync with usePathname and useSearchParams. window.history.pushState Use it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products: 'use client' import { useSearchParams } from 'next/navigation' export default function SortProducts() { const searchParams = useSearchParams() function updateSorting(sortOrder: string) { const params = new URLSearchParams(searchParams.toString()) params.set('sort', sortOrder) window.history.pushState(null, '', `?{params.toString()}`) } return (  button onClick={() = updateSorting('asc')}Sort Ascending/button button onClick={() = updateSorting('desc')}Sort Descending/button / ) } window.history.replaceState Use it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale: 'use client' import { usePathname } from 'next/navigation' export function LocaleSwitcher() { const pathname = usePathname() function switchLocale(locale: string) { // e.g. '/en/about' or '/fr/contact' const newPath = `/{locale}{pathname}` window.history.replaceState(null, '', newPath) } return (  button onClick={() = switchLocale('en')}English/button button onClick={() = switchLocale('fr')}French/button / ) } Next StepsLink ComponentEnable fast client-side navigation with the built-in `next/link` component.loading.jsAPI reference for the loading.js file.PrefetchingLearn how to configure prefetching in Next.jsPreviousLayouts and PagesNextServer and Client ComponentsWas this helpful? supported.Send",
      "code_blocks": [
        "import Link from 'next/link'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <body>\n        <nav>\n          {/* Prefetched when the link is hovered or enters the viewport */}\n          <Link href=\"/blog\">Blog</Link>\n          {/* No prefetching */}\n          <a href=\"/contact\">Contact</a>\n        </nav>\n        {children}\n      </body>\n    </html>\n  )\n}",
        "import Link from 'next/link'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <body>\n        <nav>\n          {/* Prefetched when the link is hovered or enters the viewport */}\n          <Link href=\"/blog\">Blog</Link>\n          {/* No prefetching */}\n          <a href=\"/contact\">Contact</a>\n        </nav>\n        {children}\n      </body>\n    </html>\n  )\n}",
        "loading.tsx",
        "loading.tsx",
        "export default function Loading() {\n  // Add fallback UI that will be shown while the route is loading.\n  return <LoadingSkeleton />\n}",
        "export default function Loading() {\n  // Add fallback UI that will be shown while the route is loading.\n  return <LoadingSkeleton />\n}",
        "loading.tsx",
        "loading.tsx",
        "loading.tsx",
        "export default function Loading() {\n  return <LoadingSkeleton />\n}",
        "export default function Loading() {\n  return <LoadingSkeleton />\n}",
        "devIndicators",
        "generateStaticParams",
        "generateStaticParams",
        "generateStaticParams",
        "export async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n \nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  // ...\n}",
        "export async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n \nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  // ...\n}",
        "useLinkStatus",
        "'use client'\n \nimport { useLinkStatus } from 'next/link'\n \nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role=\"status\" aria-label=\"Loading\" className=\"spinner\" />\n  ) : null\n}",
        "'use client'\n \nimport { useLinkStatus } from 'next/link'\n \nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role=\"status\" aria-label=\"Loading\" className=\"spinner\" />\n  ) : null\n}",
        ".spinner {\n  /* ... */\n  opacity: 0;\n  animation:\n    fadeIn 500ms 100ms forwards,\n    rotate 1s linear infinite;\n}\n \n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n \n@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}",
        ".spinner {\n  /* ... */\n  opacity: 0;\n  animation:\n    fadeIn 500ms 100ms forwards,\n    rotate 1s linear infinite;\n}\n \n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n \n@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}",
        "<Link prefetch={false} href=\"/blog\">\n  Blog\n</Link>",
        "<Link prefetch={false} href=\"/blog\">\n  Blog\n</Link>",
        "'use client'\n \nimport Link from 'next/link'\nimport { useState } from 'react'\n \nfunction HoverPrefetchLink({\n  href,\n  children,\n}: {\n  href: string\n  children: React.ReactNode\n}) {\n  const [active, setActive] = useState(false)\n \n  return (\n    <Link\n      href={href}\n      prefetch={active ? null : false}\n      onMouseEnter={() => setActive(true)}\n    >\n      {children}\n    </Link>\n  )\n}",
        "'use client'\n \nimport Link from 'next/link'\nimport { useState } from 'react'\n \nfunction HoverPrefetchLink({\n  href,\n  children,\n}: {\n  href: string\n  children: React.ReactNode\n}) {\n  const [active, setActive] = useState(false)\n \n  return (\n    <Link\n      href={href}\n      prefetch={active ? null : false}\n      onMouseEnter={() => setActive(true)}\n    >\n      {children}\n    </Link>\n  )\n}",
        "@next/bundle-analyzer",
        "window.history.pushState",
        "window.history.replaceState",
        "replaceState",
        "usePathname",
        "useSearchParams",
        "window.history.pushState",
        "'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}",
        "'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}",
        "window.history.replaceState",
        "'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}",
        "'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow navigation worksServer RenderingPrefetchingStreamingClient-side transitionsWhat can make transitions slow Dynamic routes without loading tsxDynamic segments without generateStaticParamsSlow networksDisabling prefetchingHydration not completedExamplesNative History APIwindow history pushStatewindow history",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "replaceStateNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedLinking and NavigatingLinking and NavigatingIn Next js, routes are rendered on the server by default This often means the client has to wait for a server response before a new route can be shown Next js comes with built-in prefetching, streaming, and client-side transitions ensuring navigation stays fast and responsive This guide explains how navigation works in Next",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "js and how you can optimize it for dynamic routes and slow networks How navigation works To understand how navigation works in Next js, it helps to be familiar with the following concepts: Server Rendering Prefetching Streaming Client-side transitions Server Rendering In Next js, Layouts and Pages are React Server Components by default On initial and subsequent navigations, the Server Component Payload is generated on the server before being sent to the client",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "There are two types of server rendering, based on when it happens: Static Rendering (or Prerendering) happens at build time or during revalidation and the result is cached Dynamic Rendering happens at request time in response to a client request The trade-off of server rendering is that the client must wait for the server to respond before the new route can be shown Next js addresses this delay by prefetching routes the user is likely to visit and performing client-side transitions",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Good to know: HTML is also generated for the initial visit Prefetching Prefetching is the process of loading a route in the background before the user navigates to it This makes navigation between routes in your application feel instant, because by the time a user clicks on a link, the data to render the next route is already available client side Next js automatically prefetches routes linked with the Link component when they enter the user's viewport app/layout",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default function Layout({ children }: { children: React ReactNode }) { return ( html body nav {/* Prefetched when the link is hovered or enters the viewport */} Link href=\"/blog\"Blog/Link {/* No prefetching */} a href=\"/contact\"Contact/a /nav {children} /body /html ) } How much of the route is prefetched depends on whether it's static or dynamic: Static Route: the full route is prefetched",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "Dynamic Route: prefetching is skipped, or the route is partially prefetched if loading tsx is present By skipping or partially prefetching dynamic routes, Next js avoids unnecessary work on the server for routes the users may never visit However, waiting for a server response before navigation can give the users the impression that the app is not responding To improve the navigation experience to dynamic routes, you can use streaming",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "Streaming Streaming allows the server to send parts of a dynamic route to the client as soon as they're ready, rather than waiting for the entire route to be rendered This means users see something sooner, even if parts of the page are still loading For dynamic routes, it means they can be partially prefetched That is, shared layouts and loading skeletons can be requested ahead of time To use streaming, create a loading tsx in your route folder: app/dashboard/loading",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { // Add fallback UI that will be shown while the route is loading return LoadingSkeleton / } Behind the scenes, Next js will automatically wrap the page tsx contents in a Suspense boundary The prefetched fallback UI will be shown while the route is loading, and swapped for the actual content once ready Good to know: You can also use Suspense to create loading UI for nested components Benefits of loading",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "tsx: Immediate navigation and visual feedback for the user Shared layouts remain interactive and navigation is interruptible Improved Core Web Vitals: TTFB, FCP, and TTI To further improve the navigation experience, Next js performs a client-side transition with the Link component Client-side transitions Traditionally, navigation to a server-rendered page triggers a full page load This clears state, resets scroll position, and blocks interactivity Next",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "js avoids this with client-side transitions using the Link component Instead of reloading the page, it updates the content dynamically by: Keeping any shared layouts and UI Replacing the current page with the prefetched loading state or a new page if available Client-side transitions are what makes a server-rendered apps feel like client-rendered apps And when paired with prefetching and streaming, it enables fast transitions, even for dynamic routes What can make transitions slow These Next",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "js optimizations make navigation fast and responsive However, under certain conditions, transitions can still feel slow Here are some common causes and how to improve the user experience: Dynamic routes without loading tsx When navigating to a dynamic route, the client must wait for the server response before showing the result This can give the users the impression that the app is not responding We recommend adding loading",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "tsx to dynamic routes to enable partial prefetching, trigger immediate navigation, and display a loading UI while the route renders app/blog/[slug]/loading tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { return LoadingSkeleton / } Good to know: In development mode, you can use the Next js Devtools to identify if the route is static or dynamic See devIndicators for more information",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "Dynamic segments without generateStaticParams If a dynamic segment could be prerendered but isn't because it's missing generateStaticParams, the route will fallback to dynamic rendering at request time Ensure the route is statically generated at build time by adding generateStaticParams: app/blog/[slug]/page tsxTypeScriptJavaScriptTypeScriptexport async function generateStaticParams() { const posts = await fetch('https:// /posts') then((res) = res json()) return posts map((post) = ({ slug: post",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "slug, })) } export default async function Page({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params // } Slow networks On slow or unstable networks, prefetching may not finish before the user clicks a link This can affect both static and dynamic routes In these cases, the loading js fallback may not appear immediately because it hasn't been prefetched yet",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        },
        {
          "content": "To improve perceived performance, you can use the useLinkStatus hook to show inline visual feedback to the user (like spinners or text glimmers on the link) while a transition is in progress app/ui/loading-indicator tsxTypeScriptJavaScriptTypeScript'use client' import { useLinkStatus } from 'next/link' export default function LoadingIndicator() { const { pending } = useLinkStatus() return pending",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_22"
        },
        {
          "content": "( div role=\"status\" aria-label=\"Loading\" className=\"spinner\" / ) : null } You can \"debounce\" the loading indicator by adding an initial animation delay (e g 100ms) and starting the animation as invisible (e g opacity: 0) This means the loading indicator will only be shown if the navigation takes longer than the specified delay spinner { /*",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_23"
        },
        {
          "content": "*/ opacity: 0; animation: fadeIn 500ms 100ms forwards, rotate 1s linear infinite; } keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } keyframes rotate { to { transform: rotate(360deg); } } Good to know: You can use other visual feedback patterns like a progress bar View an example here Disabling prefetching You can opt out of prefetching by setting the prefetch prop to false on the Link component",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_24"
        },
        {
          "content": "This is useful to avoid unnecessary usage of resources when rendering large lists of links (e g an infinite scroll table) Link prefetch={false} href=\"/blog\" Blog /Link However, disabling prefetching comes with trade-offs: Static routes will only be fetched when the user clicks the link Dynamic routes will need to be rendered on the server first before the client can navigate to it To reduce resource usage without fully disabling prefetch, you can prefetch only on hover",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_25"
        },
        {
          "content": "This limits prefetching to routes the user is more likely to visit, rather than all links in the viewport app/ui/hover-prefetch-link tsxTypeScriptJavaScriptTypeScript'use client' import Link from 'next/link' import { useState } from 'react' function HoverPrefetchLink({ href, children, }: { href: string children: React ReactNode }) { const [active, setActive] = useState(false) return ( Link href={href} prefetch={active",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_26"
        },
        {
          "content": "null : false} onMouseEnter={() = setActive(true)}  {children} /Link ) } Hydration not completed Link is a Client Component and must be hydrated before it can prefetch routes On the initial visit, large JavaScript bundles can delay hydration, preventing prefetching from starting right away React mitigates this with Selective Hydration and you can further improve this by: Using the next/bundle-analyzer plugin to identify and reduce bundle size by removing large dependencies",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_27"
        },
        {
          "content": "Moving logic from the client to the server where possible See the Server and Client Components docs for guidance Examples Native History API Next js allows you to use the native window history pushState and window history replaceState methods to update the browser's history stack without reloading the page pushState and replaceState calls integrate into the Next js Router, allowing you to sync with usePathname and useSearchParams window history",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_28"
        },
        {
          "content": "pushState Use it to add a new entry to the browser's history stack The user can navigate back to the previous state For example, to sort a list of products: 'use client' import { useSearchParams } from 'next/navigation' export default function SortProducts() { const searchParams = useSearchParams() function updateSorting(sortOrder: string) { const params = new URLSearchParams(searchParams toString()) params set('sort', sortOrder) window history pushState(null, '', ` {params",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_29"
        },
        {
          "content": "toString()}`) } return (  button onClick={() = updateSorting('asc')}Sort Ascending/button button onClick={() = updateSorting('desc')}Sort Descending/button / ) } window history replaceState Use it to replace the current entry on the browser's history stack The user is not able to navigate back to the previous state",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_30"
        },
        {
          "content": "For example, to switch the application's locale: 'use client' import { usePathname } from 'next/navigation' export function LocaleSwitcher() { const pathname = usePathname() function switchLocale(locale: string) { // e g '/en/about' or '/fr/contact' const newPath = `/{locale}{pathname}` window history",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_31"
        },
        {
          "content": "replaceState(null, '', newPath) } return (  button onClick={() = switchLocale('en')}English/button button onClick={() = switchLocale('fr')}French/button / ) } Next StepsLink ComponentEnable fast client-side navigation with the built-in `next/link` component loading jsAPI reference for the loading js file PrefetchingLearn how to configure prefetching in Next jsPreviousLayouts and PagesNextServer and Client ComponentsWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating",
          "library": "nextjs",
          "chunk_id": "nextjs_32"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
      "title": "Getting Started: Server and Client Components | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhen to use Server and Client Components?How do Server and Client Components work in Next.js?On the serverOn the client (first load)Subsequent NavigationsExamplesUsing Client ComponentsReducing JS bundle sizePassing data from Server to Client ComponentsInterleaving Server and Client ComponentsContext providersThird-party componentsPreventing environment poisoningNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedServer and Client ComponentsServer and Client ComponentsBy default, layouts and pages are Server Components, which lets you fetch data and render parts of your UI on the server, optionally cache the result, and stream it to the client. When you need interactivity or browser APIs, you can use Client Components to layer in functionality. This page explains how Server and Client Components work in Next.js and when to use them, with examples of how to compose them together in your application. When to use Server and Client Components? The client and server environments have different capabilities. Server and Client components allow you to run logic in each environment depending on your use case. Use Client Components when you need: State and event handlers. E.g. onClick, onChange. Lifecycle logic. E.g. useEffect. Browser-only APIs. E.g. localStorage, window, Navigator.geolocation, etc. Custom hooks. Use Server Components when you need: Fetch data from databases or APIs close to the source. Use API keys, tokens, and other secrets without exposing them to the client. Reduce the amount of JavaScript sent to the browser. Improve the First Contentful Paint (FCP), and stream content progressively to the client. For example, the Page component is a Server Component that fetches data about a post, and passes it as props to the LikeButton which handles client-side interactivity. app/[id]/page.tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params.id) return ( div main h1{post.title}/h1 {/* ... */} LikeButton likes={post.likes} / /main /div ) } app/ui/like-button.tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function LikeButton({ likes }: { likes: number }) { // ... } How do Server and Client Components work in Next.js? On the server On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks, by individual route segments (layouts and pages): Server Components are rendered into a special data format called the React Server Component Payload (RSC Payload). Client Components and the RSC Payload are used to prerender HTML. What is the React Server Component Payload (RSC)? The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains: The rendered result of Server Components Placeholders for where Client Components should be rendered and references to their JavaScript files Any props passed from a Server Component to a Client Component On the client (first load) Then, on the client: HTML is used to immediately show a fast non-interactive preview of the route to the user. RSC Payload is used to reconcile the Client and Server Component trees. JavaScript is used to hydrate Client Components and make the application interactive. What is hydration? Hydration is React's process for attaching event handlers to the DOM, to make the static HTML interactive. Subsequent Navigations On subsequent navigations: The RSC Payload is prefetched and cached for instant navigation. Client Components are rendered entirely on the client, without the server-rendered HTML. Examples Using Client Components You can create a Client Component by adding the \"use client\" directive at the top of the file, above your imports. app/ui/counter.tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function Counter() { const [count, setCount] = useState(0) return ( div p{count} likes/p button onClick={() = setCount(count + 1)}Click me/button /div ) } \"use client\" is used to declare a boundary between the Server and Client module graphs (trees). Once a file is marked with \"use client\", all its imports and child components are considered part of the client bundle. This means you don't need to add the directive to every component that is intended for the client. Reducing JS bundle size To reduce the size of your client JavaScript bundles, add 'use client' to specific interactive components instead of marking large parts of your UI as Client Components. For example, the Layout component contains mostly static elements like a logo and navigation links, but includes an interactive search bar. Search / is interactive and needs to be a Client Component, however, the rest of the layout can remain a Server Component. app/layout.tsxTypeScriptJavaScriptTypeScript// Client Component import Search from './search' // Server Component import Logo from './logo' // Layout is a Server Component by default export default function Layout({ children }: { children: React.ReactNode }) { return (  nav Logo / Search / /nav main{children}/main / ) } app/ui/search.tsxTypeScriptJavaScriptTypeScript'use client' export default function Search() { // ... } Passing data from Server to Client Components You can pass data from Server Components to Client Components using props. app/[id]/page.tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params.id) return LikeButton likes={post.likes} / } app/ui/like-button.tsxTypeScriptJavaScriptTypeScript'use client' export default function LikeButton({ likes }: { likes: number }) { // ... } Alternatively, you can stream data from a Server Component to a Client Component with the use Hook. See an example. Good to know: Props passed to Client Components need to be serializable by React. Interleaving Server and Client Components You can pass Server Components as a prop to a Client Component. This allows you to visually nest server-rendered UI within Client components. A common pattern is to use children to create a slot in a ClientComponent. For example, a Cart component that fetches data on the server, inside a Modal component that uses client state to toggle visibility. app/ui/modal.tsxTypeScriptJavaScriptTypeScript'use client' export default function Modal({ children }: { children: React.ReactNode }) { return div{children}/div } Then, in a parent Server Component (e.g.Page), you can pass a Cart as the child of the Modal: app/page.tsxTypeScriptJavaScriptTypeScriptimport Modal from './ui/modal' import Cart from './ui/cart' export default function Page() { return ( Modal Cart / /Modal ) } In this pattern, all Server Components will be rendered on the server ahead of time, including those as props. The resulting RSC payload will contain references of where Client Components should be rendered within the component tree. Context providers React context is commonly used to share global state like the current theme. However, React context is not supported in Server Components. To use context, create a Client Component that accepts children: app/theme-provider.tsxTypeScriptJavaScriptTypeScript'use client' import { createContext } from 'react' export const ThemeContext = createContext({}) export default function ThemeProvider({ children, }: { children: React.ReactNode }) { return ThemeContext.Provider value=\"dark\"{children}/ThemeContext.Provider } Then, import it into a Server Component (e.g. layout): app/layout.tsxTypeScriptJavaScriptTypeScriptimport ThemeProvider from './theme-provider' export default function RootLayout({ children, }: { children: React.ReactNode }) { return ( html body ThemeProvider{children}/ThemeProvider /body /html ) } Your Server Component will now be able to directly render your provider, and all other Client Components throughout your app will be able to consume this context. Good to know: You should render providers as deep as possible in the tree  notice how ThemeProvider only wraps {children} instead of the entire html document. This makes it easier for Next.js to optimize the static parts of your Server Components. Third-party components When using a third-party component that relies on client-only features, you can wrap it in a Client Component to ensure it works as expected. For example, the Carousel / can be imported from the acme-carousel package. This component uses useState, but it doesn't yet have the \"use client\" directive. If you use Carousel / within a Client Component, it will work as expected: app/gallery.tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' import { Carousel } from 'acme-carousel' export default function Gallery() { const [isOpen, setIsOpen] = useState(false) return ( div button onClick={() = setIsOpen(true)}View pictures/button {/* Works, since Carousel is used within a Client Component */} {isOpen  Carousel /} /div ) } However, if you try to use it directly within a Server Component, you'll see an error. This is because Next.js doesn't know Carousel / is using client-only features. To fix this, you can wrap third-party components that rely on client-only features in your own Client Components: app/carousel.tsxTypeScriptJavaScriptTypeScript'use client' import { Carousel } from 'acme-carousel' export default Carousel Now, you can use Carousel / directly within a Server Component: app/page.tsxTypeScriptJavaScriptTypeScriptimport Carousel from './carousel' export default function Page() { return ( div pView pictures/p {/* Works, since Carousel is a Client Component */} Carousel / /div ) } Advice for Library Authors If youre building a component library, add the \"use client\" directive to entry points that rely on client-only features. This lets your users import components into Server Components without needing to create wrappers. It's worth noting some bundlers might strip out \"use client\" directives. You can find an example of how to configure esbuild to include the \"use client\" directive in the React Wrap Balancer and Vercel Analytics repositories. Preventing environment poisoning JavaScript modules can be shared between both Server and Client Components modules. This means it's possible to accidentally import server-only code into the client. For example, consider the following function: lib/data.tsTypeScriptJavaScriptTypeScriptexport async function getData() { const res = await fetch('https://external-service.com/data', { headers: { authorization: process.env.API_KEY, }, }) return res.json() } This function contains an API_KEY that should never be exposed to the client. In Next.js, only environment variables prefixed with NEXT_PUBLIC_ are included in the client bundle. If variables are not prefixed, Next.js replaces them with an empty string. As a result, even though getData() can be imported and executed on the client, it won't work as expected. To prevent accidental usage in Client Components, you can use the server-only package. Then, import the package into a file that contains server-only code: lib/data.jsimport 'server-only' export async function getData() { const res = await fetch('https://external-service.com/data', { headers: { authorization: process.env.API_KEY, }, }) return res.json() } Now, if you try to import the module into a Client Component, there will be a build-time error. The corresponding client-only package can be used to mark modules that contain client-only logic like code that accesses the window object. In Next.js, installing server-only or client-only is optional. However, if your linting rules flag extraneous dependencies, you may install them to avoid issues. pnpmnpmyarnbunTerminalpnpm add server-only Next.js handles server-only and client-only imports internally to provide clearer error messages when a module is used in the wrong environment. The contents of these packages from NPM are not used by Next.js. Next.js also provides its own type declarations for server-only and client-only, for TypeScript configurations where noUncheckedSideEffectImports is active.Next StepsLearn more about the APIs mentioned in this page.use clientLearn how to use the use client directive to render a component on the client.PreviousLinking and NavigatingNextPartial PrerenderingWas this helpful? supported.Send",
      "code_blocks": [
        "localStorage",
        "Navigator.geolocation",
        "<LikeButton>",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return (\n    <div>\n      <main>\n        <h1>{post.title}</h1>\n        {/* ... */}\n        <LikeButton likes={post.likes} />\n      </main>\n    </div>\n  )\n}",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return (\n    <div>\n      <main>\n        <h1>{post.title}</h1>\n        {/* ... */}\n        <LikeButton likes={post.likes} />\n      </main>\n    </div>\n  )\n}",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "\"use client\"",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function Counter() {\n  const [count, setCount] = useState(0)\n \n  return (\n    <div>\n      <p>{count} likes</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function Counter() {\n  const [count, setCount] = useState(0)\n \n  return (\n    <div>\n      <p>{count} likes</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}",
        "\"use client\"",
        "\"use client\"",
        "'use client'",
        "// Client Component\nimport Search from './search'\n// Server Component\nimport Logo from './logo'\n \n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <Search />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}",
        "// Client Component\nimport Search from './search'\n// Server Component\nimport Logo from './logo'\n \n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <Search />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}",
        "'use client'\n \nexport default function Search() {\n  // ...\n}",
        "'use client'\n \nexport default function Search() {\n  // ...\n}",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return <LikeButton likes={post.likes} />\n}",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return <LikeButton likes={post.likes} />\n}",
        "'use client'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "'use client'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "<ClientComponent>",
        "'use client'\n \nexport default function Modal({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}",
        "'use client'\n \nexport default function Modal({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}",
        "import Modal from './ui/modal'\nimport Cart from './ui/cart'\n \nexport default function Page() {\n  return (\n    <Modal>\n      <Cart />\n    </Modal>\n  )\n}",
        "import Modal from './ui/modal'\nimport Cart from './ui/cart'\n \nexport default function Page() {\n  return (\n    <Modal>\n      <Cart />\n    </Modal>\n  )\n}",
        "'use client'\n \nimport { createContext } from 'react'\n \nexport const ThemeContext = createContext({})\n \nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}",
        "'use client'\n \nimport { createContext } from 'react'\n \nexport const ThemeContext = createContext({})\n \nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}",
        "import ThemeProvider from './theme-provider'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}",
        "import ThemeProvider from './theme-provider'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}",
        "ThemeProvider",
        "<Carousel />",
        "acme-carousel",
        "\"use client\"",
        "<Carousel />",
        "'use client'\n \nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n \nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n \n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}",
        "'use client'\n \nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n \nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n \n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}",
        "<Carousel />",
        "'use client'\n \nimport { Carousel } from 'acme-carousel'\n \nexport default Carousel",
        "'use client'\n \nimport { Carousel } from 'acme-carousel'\n \nexport default Carousel",
        "<Carousel />",
        "import Carousel from './carousel'\n \nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}",
        "import Carousel from './carousel'\n \nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}",
        "\"use client\"",
        "\"use client\"",
        "\"use client\"",
        "export async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "export async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "NEXT_PUBLIC_",
        "server-only",
        "import 'server-only'\n \nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "import 'server-only'\n \nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "client-only",
        "server-only",
        "client-only",
        "pnpm add server-only",
        "pnpm add server-only",
        "server-only",
        "client-only",
        "server-only",
        "client-only",
        "noUncheckedSideEffectImports"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhen to use Server and Client Components How do Server and Client Components work in Next js",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "On the serverOn the client (first load)Subsequent NavigationsExamplesUsing Client ComponentsReducing JS bundle sizePassing data from Server to Client ComponentsInterleaving Server and Client ComponentsContext providersThird-party componentsPreventing environment poisoningNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedServer and Client ComponentsServer and Client ComponentsBy default, layouts and pages are Server Components, which lets you fetch data and render parts of your UI on the server, optionally cache the result, and stream it to the client",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "When you need interactivity or browser APIs, you can use Client Components to layer in functionality This page explains how Server and Client Components work in Next js and when to use them, with examples of how to compose them together in your application When to use Server and Client Components The client and server environments have different capabilities Server and Client components allow you to run logic in each environment depending on your use case",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Use Client Components when you need: State and event handlers E g onClick, onChange Lifecycle logic E g useEffect Browser-only APIs E g localStorage, window, Navigator geolocation, etc Custom hooks Use Server Components when you need: Fetch data from databases or APIs close to the source Use API keys, tokens, and other secrets without exposing them to the client Reduce the amount of JavaScript sent to the browser",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Improve the First Contentful Paint (FCP), and stream content progressively to the client For example, the Page component is a Server Component that fetches data about a post, and passes it as props to the LikeButton which handles client-side interactivity app/[id]/page tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "id) return ( div main h1{post title}/h1 {/* */} LikeButton likes={post likes} / /main /div ) } app/ui/like-button tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function LikeButton({ likes }: { likes: number }) { // } How do Server and Client Components work in Next js On the server On the server, Next js uses React's APIs to orchestrate rendering",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "The rendering work is split into chunks, by individual route segments (layouts and pages): Server Components are rendered into a special data format called the React Server Component Payload (RSC Payload) Client Components and the RSC Payload are used to prerender HTML What is the React Server Component Payload (RSC) The RSC Payload is a compact binary representation of the rendered React Server Components tree It's used by React on the client to update the browser's DOM",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "The RSC Payload contains: The rendered result of Server Components Placeholders for where Client Components should be rendered and references to their JavaScript files Any props passed from a Server Component to a Client Component On the client (first load) Then, on the client: HTML is used to immediately show a fast non-interactive preview of the route to the user RSC Payload is used to reconcile the Client and Server Component trees",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "JavaScript is used to hydrate Client Components and make the application interactive What is hydration Hydration is React's process for attaching event handlers to the DOM, to make the static HTML interactive Subsequent Navigations On subsequent navigations: The RSC Payload is prefetched and cached for instant navigation Client Components are rendered entirely on the client, without the server-rendered HTML",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "Examples Using Client Components You can create a Client Component by adding the \"use client\" directive at the top of the file, above your imports app/ui/counter",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function Counter() { const [count, setCount] = useState(0) return ( div p{count} likes/p button onClick={() = setCount(count + 1)}Click me/button /div ) } \"use client\" is used to declare a boundary between the Server and Client module graphs (trees) Once a file is marked with \"use client\", all its imports and child components are considered part of the client bundle",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "This means you don't need to add the directive to every component that is intended for the client Reducing JS bundle size To reduce the size of your client JavaScript bundles, add 'use client' to specific interactive components instead of marking large parts of your UI as Client Components For example, the Layout component contains mostly static elements like a logo and navigation links, but includes an interactive search bar",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "Search / is interactive and needs to be a Client Component, however, the rest of the layout can remain a Server Component app/layout tsxTypeScriptJavaScriptTypeScript// Client Component import Search from ' /search' // Server Component import Logo from ' /logo' // Layout is a Server Component by default export default function Layout({ children }: { children: React ReactNode }) { return (  nav Logo / Search / /nav main{children}/main / ) } app/ui/search",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScript'use client' export default function Search() { // } Passing data from Server to Client Components You can pass data from Server Components to Client Components using props app/[id]/page tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params id) return LikeButton likes={post",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "likes} / } app/ui/like-button tsxTypeScriptJavaScriptTypeScript'use client' export default function LikeButton({ likes }: { likes: number }) { // } Alternatively, you can stream data from a Server Component to a Client Component with the use Hook See an example Good to know: Props passed to Client Components need to be serializable by React Interleaving Server and Client Components You can pass Server Components as a prop to a Client Component",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        },
        {
          "content": "This allows you to visually nest server-rendered UI within Client components A common pattern is to use children to create a slot in a ClientComponent For example, a Cart component that fetches data on the server, inside a Modal component that uses client state to toggle visibility app/ui/modal tsxTypeScriptJavaScriptTypeScript'use client' export default function Modal({ children }: { children: React ReactNode }) { return div{children}/div } Then, in a parent Server Component (e g",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_22"
        },
        {
          "content": "Page), you can pass a Cart as the child of the Modal: app/page tsxTypeScriptJavaScriptTypeScriptimport Modal from ' /ui/modal' import Cart from ' /ui/cart' export default function Page() { return ( Modal Cart / /Modal ) } In this pattern, all Server Components will be rendered on the server ahead of time, including those as props The resulting RSC payload will contain references of where Client Components should be rendered within the component tree",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_23"
        },
        {
          "content": "Context providers React context is commonly used to share global state like the current theme However, React context is not supported in Server Components To use context, create a Client Component that accepts children: app/theme-provider tsxTypeScriptJavaScriptTypeScript'use client' import { createContext } from 'react' export const ThemeContext = createContext({}) export default function ThemeProvider({ children, }: { children: React ReactNode }) { return ThemeContext",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_24"
        },
        {
          "content": "Provider value=\"dark\"{children}/ThemeContext Provider } Then, import it into a Server Component (e g layout): app/layout tsxTypeScriptJavaScriptTypeScriptimport ThemeProvider from ' /theme-provider' export default function RootLayout({ children, }: { children: React",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_25"
        },
        {
          "content": "ReactNode }) { return ( html body ThemeProvider{children}/ThemeProvider /body /html ) } Your Server Component will now be able to directly render your provider, and all other Client Components throughout your app will be able to consume this context Good to know: You should render providers as deep as possible in the tree  notice how ThemeProvider only wraps {children} instead of the entire html document This makes it easier for Next js to optimize the static parts of your Server Components",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_26"
        },
        {
          "content": "Third-party components When using a third-party component that relies on client-only features, you can wrap it in a Client Component to ensure it works as expected For example, the Carousel / can be imported from the acme-carousel package This component uses useState, but it doesn't yet have the \"use client\" directive If you use Carousel / within a Client Component, it will work as expected: app/gallery",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_27"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' import { Carousel } from 'acme-carousel' export default function Gallery() { const [isOpen, setIsOpen] = useState(false) return ( div button onClick={() = setIsOpen(true)}View pictures/button {/* Works, since Carousel is used within a Client Component */} {isOpen  Carousel /} /div ) } However, if you try to use it directly within a Server Component, you'll see an error This is because Next",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_28"
        },
        {
          "content": "js doesn't know Carousel / is using client-only features To fix this, you can wrap third-party components that rely on client-only features in your own Client Components: app/carousel tsxTypeScriptJavaScriptTypeScript'use client' import { Carousel } from 'acme-carousel' export default Carousel Now, you can use Carousel / directly within a Server Component: app/page tsxTypeScriptJavaScriptTypeScriptimport Carousel from '",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_29"
        },
        {
          "content": "/carousel' export default function Page() { return ( div pView pictures/p {/* Works, since Carousel is a Client Component */} Carousel / /div ) } Advice for Library Authors If youre building a component library, add the \"use client\" directive to entry points that rely on client-only features This lets your users import components into Server Components without needing to create wrappers It's worth noting some bundlers might strip out \"use client\" directives",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_30"
        },
        {
          "content": "You can find an example of how to configure esbuild to include the \"use client\" directive in the React Wrap Balancer and Vercel Analytics repositories Preventing environment poisoning JavaScript modules can be shared between both Server and Client Components modules This means it's possible to accidentally import server-only code into the client For example, consider the following function: lib/data",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_31"
        },
        {
          "content": "tsTypeScriptJavaScriptTypeScriptexport async function getData() { const res = await fetch('https://external-service com/data', { headers: { authorization: process env API_KEY, }, }) return res json() } This function contains an API_KEY that should never be exposed to the client In Next js, only environment variables prefixed with NEXT_PUBLIC_ are included in the client bundle If variables are not prefixed, Next js replaces them with an empty string",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_32"
        },
        {
          "content": "As a result, even though getData() can be imported and executed on the client, it won't work as expected To prevent accidental usage in Client Components, you can use the server-only package Then, import the package into a file that contains server-only code: lib/data jsimport 'server-only' export async function getData() { const res = await fetch('https://external-service com/data', { headers: { authorization: process env API_KEY, }, }) return res",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_33"
        },
        {
          "content": "json() } Now, if you try to import the module into a Client Component, there will be a build-time error The corresponding client-only package can be used to mark modules that contain client-only logic like code that accesses the window object In Next js, installing server-only or client-only is optional However, if your linting rules flag extraneous dependencies, you may install them to avoid issues pnpmnpmyarnbunTerminalpnpm add server-only Next",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_34"
        },
        {
          "content": "js handles server-only and client-only imports internally to provide clearer error messages when a module is used in the wrong environment The contents of these packages from NPM are not used by Next js Next js also provides its own type declarations for server-only and client-only, for TypeScript configurations where noUncheckedSideEffectImports is active Next StepsLearn more about the APIs mentioned in this page",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_35"
        },
        {
          "content": "use clientLearn how to use the use client directive to render a component on the client PreviousLinking and NavigatingNextPartial PrerenderingWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components",
          "library": "nextjs",
          "chunk_id": "nextjs_36"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
      "title": "Getting Started: Partial Prerendering | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow does Partial Prerendering work?Static RenderingDynamic RenderingSuspenseStreamingEnabling Partial PrerenderingExamplesDynamic APIsPassing dynamic propsNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedPartial PrerenderingPartial PrerenderingThis feature is currently experimental and subject to change, it's not recommended for production. Try it out and share your feedback on GitHub.Partial Prerendering (PPR) is a rendering strategy that allows you to combine static and dynamic content in the same route. This improves the initial page performance while still supporting personalized, dynamic data. When a user visits a route: The server sends a shell containing the static content, ensuring a fast initial load. The shell leaves holes for the dynamic content that will load in asynchronously. The dynamic holes are streamed in parallel, reducing the overall load time of the page.  Watch: Why PPR and how it works  YouTube (10 minutes). How does Partial Prerendering work? To understand Partial Prerendering, it helps to be familiar with the rendering strategies available in Next.js. Static Rendering With Static Rendering, HTML is generated ahead of timeeither at build time or through revalidation. The result is cached and shared across users and requests. In Partial Prerendering, Next.js prerenders a static shell for a route. This can include the layout and any other components that don't depend on request-time data. Dynamic Rendering With Dynamic Rendering, HTML is generated at request time. This allows you to serve personalized content based on request-time data. A component becomes dynamic if it uses the following APIs: cookies headers connection draftMode searchParams prop unstable_noStore fetch with { cache: 'no-store' } In Partial Prerendering, using these APIs throws a special React error that informs Next.js the component cannot be statically rendered, causing a build error. You can use a Suspense boundary to wrap your component to defer rendering until runtime. Suspense React Suspense is used to defer rendering parts of your application until some condition is met. In Partial Prerendering, Suspense is used to mark dynamic boundaries in your component tree. At build time, Next.js prerenders the static content and the fallback UI. The dynamic content is postponed until the user requests the route. Wrapping a component in Suspense doesn't make the component itself dynamic (your API usage does), but rather Suspense is used as a boundary that encapsulates dynamic content and enable streaming app/page.jsimport { Suspense } from 'react' import StaticComponent from './StaticComponent' import DynamicComponent from './DynamicComponent' import Fallback from './Fallback' export const experimental_ppr = true export default function Page() { return (  StaticComponent / Suspense fallback={Fallback /} DynamicComponent / /Suspense / ) } Streaming Streaming splits the route into chunks and progressively streams them to the client as they become ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering. In Partial Prerendering, dynamic components wrapped in Suspense start streaming from the server in parallel. To reduce network overhead, the full responseincluding static HTML and streamed dynamic partsis sent in a single HTTP request. This avoids extra roundtrips and improves both initial load and overall performance. Enabling Partial Prerendering You can enable PPR by adding the ppr option to your next.config.ts file: next.config.tsTypeScriptJavaScriptTypeScriptimport type { NextConfig } from 'next' const nextConfig: NextConfig = { experimental: { ppr: 'incremental', }, } export default nextConfig The 'incremental' value allows you to adopt PPR for specific routes: /app/dashboard/layout.tsxexport const experimental_ppr = true export default function Layout({ children }: { children: React.ReactNode }) { // ... } /app/dashboard/layout.jsexport const experimental_ppr = true export default function Layout({ children }) { // ... } Routes that don't have experimental_ppr will default to false and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route. Good to know: experimental_ppr will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route. To disable PPR for children segments, you can set experimental_ppr to false in the child segment. Examples Dynamic APIs When using Dynamic APIs that require looking at the incoming request, Next.js will opt into dynamic rendering for the route. To continue using PPR, wrap the component with Suspense. For example, the User / component is dynamic because it uses the cookies API: app/user.tsxTypeScriptJavaScriptTypeScriptimport { cookies } from 'next/headers' export async function User() { const session = (await cookies()).get('session')?.value return '...' } The User / component will be streamed while any other content inside Page / will be prerendered and become part of the static shell. app/page.tsxTypeScriptJavaScriptTypeScriptimport { Suspense } from 'react' import { User, AvatarSkeleton } from './user' export const experimental_ppr = true export default function Page() { return ( section h1This will be prerendered/h1 Suspense fallback={AvatarSkeleton /} User / /Suspense /section ) } Passing dynamic props Components only opt into dynamic rendering when the value is accessed. For example, if you are reading searchParams from a Page / component, you can forward this value to another component as a prop: app/page.tsxTypeScriptJavaScriptTypeScriptimport { Table, TableSkeleton } from './table' import { Suspense } from 'react' export default function Page({ searchParams, }: { searchParams: Promise{ sort: string } }) { return ( section h1This will be prerendered/h1 Suspense fallback={TableSkeleton /} Table searchParams={searchParams} / /Suspense /section ) } Inside of the table component, accessing the value from searchParams will make the component dynamic while the rest of the page will be prerendered. app/table.tsxTypeScriptJavaScriptTypeScriptexport async function Table({ searchParams, }: { searchParams: Promise{ sort: string } }) { const sort = (await searchParams).sort === 'true' return '...' } Next StepsLearn more about the config option for Partial Prerendering.pprLearn how to enable Partial Prerendering in Next.js.PreviousServer and Client ComponentsNextFetching DataWas this helpful? supported.Send",
      "code_blocks": [
        "searchParams",
        "unstable_noStore",
        "{ cache: 'no-store' }",
        "import { Suspense } from 'react'\nimport StaticComponent from './StaticComponent'\nimport DynamicComponent from './DynamicComponent'\nimport Fallback from './Fallback'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n    </>\n  )\n}",
        "import { Suspense } from 'react'\nimport StaticComponent from './StaticComponent'\nimport DynamicComponent from './DynamicComponent'\nimport Fallback from './Fallback'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n    </>\n  )\n}",
        "next.config.ts",
        "import type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n \nexport default nextConfig",
        "import type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n \nexport default nextConfig",
        "'incremental'",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  // ...\n}",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  // ...\n}",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }) {\n  // ...\n}",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }) {\n  // ...\n}",
        "experimental_ppr",
        "experimental_ppr",
        "experimental_ppr",
        "import { cookies } from 'next/headers'\n \nexport async function User() {\n  const session = (await cookies()).get('session')?.value\n  return '...'\n}",
        "import { cookies } from 'next/headers'\n \nexport async function User() {\n  const session = (await cookies()).get('session')?.value\n  return '...'\n}",
        "import { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}",
        "import { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}",
        "searchParams",
        "import { Table, TableSkeleton } from './table'\nimport { Suspense } from 'react'\n \nexport default function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<TableSkeleton />}>\n        <Table searchParams={searchParams} />\n      </Suspense>\n    </section>\n  )\n}",
        "import { Table, TableSkeleton } from './table'\nimport { Suspense } from 'react'\n \nexport default function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<TableSkeleton />}>\n        <Table searchParams={searchParams} />\n      </Suspense>\n    </section>\n  )\n}",
        "searchParams",
        "export async function Table({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  const sort = (await searchParams).sort === 'true'\n  return '...'\n}",
        "export async function Table({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  const sort = (await searchParams).sort === 'true'\n  return '...'\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow does Partial Prerendering work Static RenderingDynamic RenderingSuspenseStreamingEnabling Partial PrerenderingExamplesDynamic APIsPassing dynamic propsNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedPartial PrerenderingPartial PrerenderingThis feature is currently experimental and subject to change, it's not recommended for production Try it out and share your feedback on GitHub",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Partial Prerendering (PPR) is a rendering strategy that allows you to combine static and dynamic content in the same route This improves the initial page performance while still supporting personalized, dynamic data When a user visits a route: The server sends a shell containing the static content, ensuring a fast initial load The shell leaves holes for the dynamic content that will load in asynchronously The dynamic holes are streamed in parallel, reducing the overall load time of the page",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "Watch: Why PPR and how it works  YouTube (10 minutes) How does Partial Prerendering work To understand Partial Prerendering, it helps to be familiar with the rendering strategies available in Next js Static Rendering With Static Rendering, HTML is generated ahead of timeeither at build time or through revalidation The result is cached and shared across users and requests In Partial Prerendering, Next js prerenders a static shell for a route",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "This can include the layout and any other components that don't depend on request-time data Dynamic Rendering With Dynamic Rendering, HTML is generated at request time This allows you to serve personalized content based on request-time data A component becomes dynamic if it uses the following APIs: cookies headers connection draftMode searchParams prop unstable_noStore fetch with { cache: 'no-store' } In Partial Prerendering, using these APIs throws a special React error that informs Next",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js the component cannot be statically rendered, causing a build error You can use a Suspense boundary to wrap your component to defer rendering until runtime Suspense React Suspense is used to defer rendering parts of your application until some condition is met In Partial Prerendering, Suspense is used to mark dynamic boundaries in your component tree At build time, Next js prerenders the static content and the fallback UI The dynamic content is postponed until the user requests the route",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "Wrapping a component in Suspense doesn't make the component itself dynamic (your API usage does), but rather Suspense is used as a boundary that encapsulates dynamic content and enable streaming app/page jsimport { Suspense } from 'react' import StaticComponent from ' /StaticComponent' import DynamicComponent from ' /DynamicComponent' import Fallback from '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "/Fallback' export const experimental_ppr = true export default function Page() { return (  StaticComponent / Suspense fallback={Fallback /} DynamicComponent / /Suspense / ) } Streaming Streaming splits the route into chunks and progressively streams them to the client as they become ready This allows the user to see parts of the page immediately, before the entire content has finished rendering",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "In Partial Prerendering, dynamic components wrapped in Suspense start streaming from the server in parallel To reduce network overhead, the full responseincluding static HTML and streamed dynamic partsis sent in a single HTTP request This avoids extra roundtrips and improves both initial load and overall performance Enabling Partial Prerendering You can enable PPR by adding the ppr option to your next config ts file: next config",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "tsTypeScriptJavaScriptTypeScriptimport type { NextConfig } from 'next' const nextConfig: NextConfig = { experimental: { ppr: 'incremental', }, } export default nextConfig The 'incremental' value allows you to adopt PPR for specific routes: /app/dashboard/layout tsxexport const experimental_ppr = true export default function Layout({ children }: { children: React ReactNode }) { // } /app/dashboard/layout jsexport const experimental_ppr = true export default function Layout({ children }) { //",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "} Routes that don't have experimental_ppr will default to false and will not be prerendered using PPR You need to explicitly opt-in to PPR for each route Good to know: experimental_ppr will apply to all children of the route segment, including nested layouts and pages You don't have to add it to every file, only the top segment of a route To disable PPR for children segments, you can set experimental_ppr to false in the child segment",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "Examples Dynamic APIs When using Dynamic APIs that require looking at the incoming request, Next js will opt into dynamic rendering for the route To continue using PPR, wrap the component with Suspense For example, the User / component is dynamic because it uses the cookies API: app/user tsxTypeScriptJavaScriptTypeScriptimport { cookies } from 'next/headers' export async function User() { const session = (await cookies()) get('session') value return '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "' } The User / component will be streamed while any other content inside Page / will be prerendered and become part of the static shell app/page tsxTypeScriptJavaScriptTypeScriptimport { Suspense } from 'react' import { User, AvatarSkeleton } from '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "/user' export const experimental_ppr = true export default function Page() { return ( section h1This will be prerendered/h1 Suspense fallback={AvatarSkeleton /} User / /Suspense /section ) } Passing dynamic props Components only opt into dynamic rendering when the value is accessed For example, if you are reading searchParams from a Page / component, you can forward this value to another component as a prop: app/page tsxTypeScriptJavaScriptTypeScriptimport { Table, TableSkeleton } from '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "/table' import { Suspense } from 'react' export default function Page({ searchParams, }: { searchParams: Promise{ sort: string } }) { return ( section h1This will be prerendered/h1 Suspense fallback={TableSkeleton /} Table searchParams={searchParams} / /Suspense /section ) } Inside of the table component, accessing the value from searchParams will make the component dynamic while the rest of the page will be prerendered app/table",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptexport async function Table({ searchParams, }: { searchParams: Promise{ sort: string } }) { const sort = (await searchParams) sort === 'true' return ' ' } Next StepsLearn more about the config option for Partial Prerendering pprLearn how to enable Partial Prerendering in Next js PreviousServer and Client ComponentsNextFetching DataWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn#geist-skip-nav",
      "title": "Learn Next.js | Next.js by Vercel - The React Framework",
      "content": "Start building with Next.jsGo from beginner to expert by learning the foundations of Next.js and building a fully functional demo website that uses all the latest features.Learn Next.jsLearn Next.js16 chapters that take you from React to Next.js.Placeholder React FoundationsNew to React? Learn the foundational concepts to help you go from JavaScript to React.StartNext.js Pages RouterLearn how to build a static blog with the Pages Router.StartHow does the course work?By building a full web application. Step by step.Set up your local environment and initializing the \"ACME\" Next.js project template.Use pre-styled components as part of each chapter that leverage Next.js conventions and patterns.Hook up real application logic and data to bring a fully-fledged demo website to life.At the end youll have a website thats ready to ship and the knowledge to build and deploy your own.Your progress will be synced as you complete chaptersGo at your own pace and pick up where you left offTest your knowledge during each chapterTake quick quizzes to see what youve learnedWhat will I learn?Heres everything thats covered in the course.IntroductionLearn how to build a full-stack web application with the free, Next.js Foundations course.1Getting StartedCreate a new Next.js application using the dashboard starter example and explore the project.2CSS StylingStyle your Next.js application with Tailwind and CSS modules.3Optimizing Fonts and ImagesOptimize fonts and images with the Next.js built-in components.4Creating Layouts and PagesCreate the dashboard routes and a shared layout that can be shared between multiple pages.5Navigating Between PagesLearn how to use the Link component to navigate between pages.6Setting Up Your DatabaseSetup a database for your application and seed it with initial data.7Fetching DataLearn about the different ways to fetch data in Next.js, and fetch data for your dashboard page using Server Components.8Static and Dynamic RenderingUnderstand how rendering works in Next.js, and make your dashboard app dynamic.9StreamingImprove your application's loading experience with streaming and loading skeletons.10Partial PrerenderingAn early look into Partial Prerendering and how it works.11Adding Search and PaginationAdd search and pagination to your dashboard application using Next.js APIs.12Mutating DataMutate data using React Server Actions, and revalidate the Next.js cache.13Handling ErrorsHandle errors gracefully with error.tsx and notFound.14Improving AccessibilityImplement server-side form validation and improve accessibility in your forms.15Adding AuthenticationAdd authentication to protect your dashboard routes using NextAuth.js, Server Actions, and Middleware.16Adding MetadataLearn how to add metadata to your Next.js application.17Next StepsNext.js Dashboard Course ConclusionPlaceholderLooking to go deeper?Continue learning by using our guides.View All GuidesHow to build a fullstack app with Next.js, Prisma and PostgresBuild, Deployment  GitBuild a multi-tenant app with custom domains using Next.jsBuild, Deployment  GitIntegrating Next.js and Contentful for your headless CMSDatabases  CMSBuilding Ecommerce Sites with Next.js and ShopifyDatabases  CMSUsing headless WordPress with Next.js and VercelDatabases  CMSNext.js DocumentationThe complete resource for installing, running, building with, and deploying Next.jsView the Documentation",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Start building with Next jsGo from beginner to expert by learning the foundations of Next js and building a fully functional demo website that uses all the latest features Learn Next jsLearn Next js16 chapters that take you from React to Next js Placeholder React FoundationsNew to React Learn the foundational concepts to help you go from JavaScript to React StartNext js Pages RouterLearn how to build a static blog with the Pages Router StartHow does the course work",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "By building a full web application Step by step Set up your local environment and initializing the \"ACME\" Next js project template Use pre-styled components as part of each chapter that leverage Next js conventions and patterns Hook up real application logic and data to bring a fully-fledged demo website to life At the end youll have a website thats ready to ship and the knowledge to build and deploy your own",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Your progress will be synced as you complete chaptersGo at your own pace and pick up where you left offTest your knowledge during each chapterTake quick quizzes to see what youve learnedWhat will I learn Heres everything thats covered in the course IntroductionLearn how to build a full-stack web application with the free, Next js Foundations course 1Getting StartedCreate a new Next js application using the dashboard starter example and explore the project 2CSS StylingStyle your Next",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "js application with Tailwind and CSS modules 3Optimizing Fonts and ImagesOptimize fonts and images with the Next js built-in components 4Creating Layouts and PagesCreate the dashboard routes and a shared layout that can be shared between multiple pages 5Navigating Between PagesLearn how to use the Link component to navigate between pages 6Setting Up Your DatabaseSetup a database for your application and seed it with initial data 7Fetching DataLearn about the different ways to fetch data in Next",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "js, and fetch data for your dashboard page using Server Components 8Static and Dynamic RenderingUnderstand how rendering works in Next js, and make your dashboard app dynamic 9StreamingImprove your application's loading experience with streaming and loading skeletons 10Partial PrerenderingAn early look into Partial Prerendering and how it works 11Adding Search and PaginationAdd search and pagination to your dashboard application using Next js APIs",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "12Mutating DataMutate data using React Server Actions, and revalidate the Next js cache 13Handling ErrorsHandle errors gracefully with error tsx and notFound 14Improving AccessibilityImplement server-side form validation and improve accessibility in your forms 15Adding AuthenticationAdd authentication to protect your dashboard routes using NextAuth js, Server Actions, and Middleware 16Adding MetadataLearn how to add metadata to your Next js application 17Next StepsNext",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js Dashboard Course ConclusionPlaceholderLooking to go deeper Continue learning by using our guides View All GuidesHow to build a fullstack app with Next js, Prisma and PostgresBuild, Deployment  GitBuild a multi-tenant app with custom domains using Next jsBuild, Deployment  GitIntegrating Next js and Contentful for your headless CMSDatabases  CMSBuilding Ecommerce Sites with Next js and ShopifyDatabases  CMSUsing headless WordPress with Next js and VercelDatabases  CMSNext",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js DocumentationThe complete resource for installing, running, building with, and deploying Next jsView the Documentation",
          "url": "https://nextjs.org/learn#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/react-foundations",
      "title": "React Foundations | Next.js",
      "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next.js, it helps to be familiar with JavaScript, React, and related web development concepts. But JavaScript and React are vast topics. How do you know when you're ready to start using Next.js? Welcome to the React Foundations course! This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next.js. You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next.js. Each section builds on the previous one, so you can choose where to start depending on what you already know. Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React. If you're already familiar with React, you can skip to the From React to Next.js chapter or take Dashboard App course. System requirements Before you start this course, make sure you have the following installed: Node.js 20.12.0 or later installed. Operating systems: macOS, Windows (including WSL), or Linux. VSCode or another text editor of your choice. Join the conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: About React and Next.jsLearn what React and Next.js are, and how they can help you build modern web applications.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next js, it helps to be familiar with JavaScript, React, and related web development concepts But JavaScript and React are vast topics How do you know when you're ready to start using Next js Welcome to the React Foundations course This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next js",
          "url": "https://nextjs.org/learn/react-foundations",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next js Each section builds on the previous one, so you can choose where to start depending on what you already know Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React If you're already familiar with React, you can skip to the From React to Next js chapter or take Dashboard App course",
          "url": "https://nextjs.org/learn/react-foundations",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "System requirements Before you start this course, make sure you have the following installed: Node js 20 12 0 or later installed Operating systems: macOS, Windows (including WSL), or Linux VSCode or another text editor of your choice Join the conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Ready to get started Now that you've been introduced to the course, let's dive in Next Up1: About React and Next",
          "url": "https://nextjs.org/learn/react-foundations",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "jsLearn what React and Next js are, and how they can help you build modern web applications Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/react-foundations",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/pages-router",
      "title": "Pages Router | Next.js",
      "content": "Sign inSign in to save progressPages Router New App Router Course: You're currently viewing the Pages Router course. View the new App Router course here. To build a complete web application with React from scratch, there are many important details you need to consider: Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel. You need to do production optimizations such as code splitting. You might want to statically pre-render some pages for performance and SEO. You might also want to use server-side rendering or client-side rendering. You might have to write some server-side code to connect your React app to your data store. A framework can solve these problems. But such a framework must have the right level of abstraction  otherwise it wont be very useful. It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code. Next.js: The React Framework Enter Next.js, the React Framework. Next.js provides a solution to all of the above problems. But more importantly, it puts you and your team in the pit of success when building React applications. Next.js aims to have best-in-class developer experience and many built-in features, such as: An intuitive page-based routing system (with support for dynamic routes) Pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported on a per-page basis Automatic code splitting for faster page loads Client-side routing with optimized prefetching Built-in CSS and Sass support, and support for any CSS-in-JS library Development environment with Fast Refresh support API routes to build API endpoints with Serverless Functions Fully extendable Next.js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands. About This Tutorial This free interactive course will guide you through how to get started with Next.js. In this tutorial, youll learn Next.js basics by creating a very simple blog app. Heres an example of the final result: https://next-learn-starter.vercel.app (source) This tutorial assumes basic knowledge of JavaScript and React. If youve never written React code, you should go through the official React tutorial first. If youre looking for documentation instead, visit the Next.js documentation. Join the Conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord. Lets get started!Ready to get started?Next Up1: Set up a new Next.js appStart Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressPages Router New App Router Course: You're currently viewing the Pages Router course View the new App Router course here To build a complete web application with React from scratch, there are many important details you need to consider: Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel You need to do production optimizations such as code splitting You might want to statically pre-render some pages for performance and SEO",
          "url": "https://nextjs.org/learn/pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You might also want to use server-side rendering or client-side rendering You might have to write some server-side code to connect your React app to your data store A framework can solve these problems But such a framework must have the right level of abstraction  otherwise it wont be very useful It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code Next js: The React Framework Enter Next js, the React Framework Next",
          "url": "https://nextjs.org/learn/pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "js provides a solution to all of the above problems But more importantly, it puts you and your team in the pit of success when building React applications Next",
          "url": "https://nextjs.org/learn/pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "js aims to have best-in-class developer experience and many built-in features, such as: An intuitive page-based routing system (with support for dynamic routes) Pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported on a per-page basis Automatic code splitting for faster page loads Client-side routing with optimized prefetching Built-in CSS and Sass support, and support for any CSS-in-JS library Development environment with Fast Refresh support API routes to build API endpoints with Serverless Functions Fully extendable Next",
          "url": "https://nextjs.org/learn/pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands About This Tutorial This free interactive course will guide you through how to get started with Next js In this tutorial, youll learn Next js basics by creating a very simple blog app Heres an example of the final result: https://next-learn-starter vercel app (source) This tutorial assumes basic knowledge of JavaScript and React",
          "url": "https://nextjs.org/learn/pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "If youve never written React code, you should go through the official React tutorial first If youre looking for documentation instead, visit the Next js documentation Join the Conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Lets get started Ready to get started Next Up1: Set up a new Next js appStart Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app",
      "title": "App Router | Next.js",
      "content": "Sign inSign in to save progressApp RouterWelcome to the Next.js Foundations course! In this free interactive course, you'll learn the main features of Next.js by building a full-stack web application. What we'll be building For this course, we'll build a financial dashboard that has: A public home page. A login page. Dashboard pages that are protected by authentication. The ability for users to add, edit, and delete invoices. The dashboard will also have an accompanying database, which you'll set up in a later chapter. By the end of the course, you'll have the essential skills needed to start building full-stack Next.js applications. Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next.js. Optimizations: How to optimize images, links, and fonts. Routing: How to create nested layouts and pages using file-system routing. Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming. Search and Pagination: How to implement search and pagination using URL search params. Mutating Data: How to mutate data using React Server Actions, and revalidate the Next.js cache. Error Handling: How to handle general and 404 not found errors. Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility. Authentication: How to add authentication to your application using NextAuth.js and Middleware. Metadata: How to add metadata and prepare your application for social sharing. Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript. If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense. System requirements Before you start this course, make sure your system meets the following requirements: Node.js 18.18.0 or later installed. Download here. Operating systems: macOS, Windows (including WSL), or Linux. In addition, you'll also need a GitHub Account and a Vercel Account. Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: Getting StartedLearn how to create a Next.js application and run your local development server.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [
        "NextAuth.js"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progressApp RouterWelcome to the Next js Foundations course In this free interactive course, you'll learn the main features of Next js by building a full-stack web application What we'll be building For this course, we'll build a financial dashboard that has: A public home page A login page Dashboard pages that are protected by authentication The ability for users to add, edit, and delete invoices",
          "url": "https://nextjs.org/learn/dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "The dashboard will also have an accompanying database, which you'll set up in a later chapter By the end of the course, you'll have the essential skills needed to start building full-stack Next js applications Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next js Optimizations: How to optimize images, links, and fonts Routing: How to create nested layouts and pages using file-system routing",
          "url": "https://nextjs.org/learn/dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming Search and Pagination: How to implement search and pagination using URL search params Mutating Data: How to mutate data using React Server Actions, and revalidate the Next js cache Error Handling: How to handle general and 404 not found errors Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility",
          "url": "https://nextjs.org/learn/dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Authentication: How to add authentication to your application using NextAuth js and Middleware Metadata: How to add metadata and prepare your application for social sharing Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense",
          "url": "https://nextjs.org/learn/dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "System requirements Before you start this course, make sure your system meets the following requirements: Node js 18 18 0 or later installed Download here Operating systems: macOS, Windows (including WSL), or Linux In addition, you'll also need a GitHub Account and a Vercel Account Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub Ready to get started",
          "url": "https://nextjs.org/learn/dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Now that you've been introduced to the course, let's dive in Next Up1: Getting StartedLearn how to create a Next js application and run your local development server Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/getting-started",
      "title": "App Router: Getting Started | Next.js",
      "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn. If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next.js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the --example flag with the starter example for this course. Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases. Our goal is to help you focus on learning the main features of Next.js, without having to write all the application code. After installation, open the project in your code editor and navigate to nextjs-dashboard. Terminalcd nextjs-dashboard Let's spend some time exploring the project. Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from. /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions. /app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you. /public: Contains all the static assets for your application, such as images. Config Files: You'll also notice config files such as next.config.ts at the root of your application. Most of these files are created and pre-configured when you start a new project using create-next-app. You will not need to modify them in this course. Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet. Placeholder data When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects. Use a 3rd party service like mockAPI. For this project, we've provided some placeholder data in app/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table: /app/lib/placeholder-data.tsconst invoices = [ { customer_id: customers[0].id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1].id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ... ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data). TypeScript You may also notice most files have a .ts or .tsx suffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape. It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required. For now, take a look at the /app/lib/definitions.ts file. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types: /app/lib/definitions.tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type. // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'. status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount. If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema. Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety. Running the development server Run pnpm i to install the project's packages. Terminalpnpm i Followed by pnpm dev to start the development server. Terminalpnpm dev pnpm dev starts your Next.js development server on port 3000. Let's check to see if it's working. Open http://localhost:3000 on your browser. Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations! You've created a Next.js application using the starter example and ran the development server.Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application.Start Chapter 2Was this helpful? supported.Send",
      "code_blocks": [
        "npm install -g pnpm",
        "npm install -g pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "create-next-app",
        "nextjs-dashboard",
        "cd nextjs-dashboard",
        "cd nextjs-dashboard",
        "next.config.ts",
        "create-next-app",
        "app/lib/placeholder-data.ts",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "/app/lib/definitions.ts",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next js application for you In the command above, you're also using the --example flag with the starter example for this course Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This better reflects real-world development, where you'll likely be working with existing codebases Our goal is to help you focus on learning the main features of Next js, without having to write all the application code After installation, open the project in your code editor and navigate to nextjs-dashboard Terminalcd nextjs-dashboard Let's spend some time exploring the project",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions /app/ui: Contains all the UI components for your application, such as cards, tables, and forms To save time, we've pre-styled these components for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "/public: Contains all the static assets for your application, such as images Config Files: You'll also notice config files such as next config ts at the root of your application Most of these files are created and pre-configured when you start a new project using create-next-app You will not need to modify them in this course Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Placeholder data When you're building user interfaces, it helps to have some placeholder data If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects Use a 3rd party service like mockAPI For this project, we've provided some placeholder data in app/lib/placeholder-data ts Each JavaScript object in the file represents a table in your database For example, for the invoices table: /app/lib/placeholder-data",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "tsconst invoices = [ { customer_id: customers[0] id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1] id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data) TypeScript You may also notice most files have a ts or tsx suffix This is because the project is written in TypeScript",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "We wanted to create a course that reflects the modern web landscape It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required For now, take a look at the /app/lib/definitions ts file Here, we manually define the types that will be returned from the database For example, the invoices table has the following types: /app/lib/definitions",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid' status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema Next js detects if your project uses TypeScript and automatically installs the necessary packages and configuration Next js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Running the development server Run pnpm i to install the project's packages Terminalpnpm i Followed by pnpm dev to start the development server Terminalpnpm dev pnpm dev starts your Next js development server on port 3000 Let's check to see if it's working Open http://localhost:3000 on your browser Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations You've created a Next",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js application using the starter example and ran the development server Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application Start Chapter 2Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/css-styling",
      "title": "App Router: CSS Styling | Next.js",
      "content": "Sign inSign in to save progress2Chapter 2CSS StylingCurrently, your home page doesn't have any styles. Let's look at the different ways you can style your Next.js application. In this chapter...Here are the topics well coverHow to add a global CSS file to your application.Two different ways of styling: Tailwind and CSS modules.How to conditionally add class names with the clsx utility package. Global styles If you look inside the /app/ui folder, you'll see a file called global.css. You can use this file to add CSS rules to all the routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more. You can import global.css in any component in your application, but it's usually good practice to add it to your top-level component. In Next.js, this is the root layout (more on this later). Add global styles to your application by navigating to /app/layout.tsx and importing the global.css file: /app/layout.tsximport '/app/ui/global.css'; export default function RootLayout({ children, }: { children: React.ReactNode; }) { return ( html lang=\"en\" body{children}/body /html ); } With the development server still running, save your changes and preview them in the browser. Your home page should now look like this: But wait a second, you didn't add any CSS rules, where did the styles come from? If you take a look inside global.css, you'll notice some tailwind directives: /app/ui/global.csstailwind base; tailwind components; tailwind utilities; Tailwind Tailwind is a CSS framework that speeds up the development process by allowing you to quickly write utility classes directly in your React code. In Tailwind, you style elements by adding class names. For example, adding \"text-blue-500\" will turn the h1 text blue: h1 className=\"text-blue-500\"I'm blue!/h1 Although the CSS styles are shared globally, each class is singularly applied to each element. This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales. When you use create-next-app to start a new project, Next.js will ask if you want to use Tailwind. If you select yes, Next.js will automatically install the necessary packages and configure Tailwind in your application. If you look at /app/page.tsx, you'll see that we're using Tailwind classes in the example. /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; export default function Page() { return ( // These are Tailwind classes: main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" // ... ) } Don't worry if this is your first time using Tailwind. To save time, we've already styled all the components you'll be using. Let's play with Tailwind! Copy the code below and paste it above the p element in /app/page.tsx: /app/page.tsxdiv className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\" / If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative. CSS Modules CSS Modules allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well. We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules. Inside /app/ui, create a new file called home.module.css and add the following CSS rules: /app/ui/home.module.css.shape { height: 0; width: 0; border-bottom: 30px solid black; border-left: 20px solid transparent; border-right: 20px solid transparent; } Then, inside your /app/page.tsx file import the styles and replace the Tailwind class names from the div you've added with styles.shape: /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import styles from '/app/ui/home.module.css'; export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className={styles.shape} / // ... ) } Save your changes and preview them in the browser. You should see the same shape as before. Tailwind and CSS modules are the two most common ways of styling Next.js applications. Whether you use one or the other is a matter of preference - you can even use both in the same application! Using the clsx library to toggle class names There may be cases where you may need to conditionally style an element based on state or some other condition. clsx is a library that lets you toggle class names easily. We recommend taking a look at documentation for more details, but here's the basic usage: Suppose that you want to create an InvoiceStatus component which accepts status. The status can be 'pending' or 'paid'. If it's 'paid', you want the color to be green. If it's 'pending', you want the color to be gray. You can use clsx to conditionally apply the classes, like this: /app/ui/invoices/status.tsximport clsx from 'clsx'; export default function InvoiceStatus({ status }: { status: string }) { return ( span className={clsx( 'inline-flex items-center rounded-full px-2 py-1 text-sm', { 'bg-gray-100 text-gray-500': status === 'pending', 'bg-green-500 text-white': status === 'paid', }, )}  // ... )} Other styling solutions In addition to the approaches we've discussed, you can also style your Next.js application with: Sass which allows you to import .css and .scss files. CSS-in-JS libraries such as styled-jsx, styled-components, and emotion. Take a look at the CSS documentation for more information.2You've Completed Chapter 2Well done! You've learned about the different ways of styling a Next.js application.Next Up3: Optimizing Fonts and ImagesContinue working on your home page by adding a hero image and a custom font.Start Chapter 3Was this helpful? supported.Send",
      "code_blocks": [
        "/app/layout.tsx",
        "import '@/app/ui/global.css';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}",
        "import '@/app/ui/global.css';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}",
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
        "\"text-blue-500\"",
        "<h1 className=\"text-blue-500\">I'm blue!</h1>",
        "<h1 className=\"text-blue-500\">I'm blue!</h1>",
        "create-next-app",
        "/app/page.tsx",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n \nexport default function Page() {\n  return (\n    // These are Tailwind classes:\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n    // ...\n  )\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n \nexport default function Page() {\n  return (\n    // These are Tailwind classes:\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n    // ...\n  )\n}",
        "/app/page.tsx",
        "<div\n  className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"\n/>",
        "<div\n  className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"\n/>",
        "home.module.css",
        ".shape {\n  height: 0;\n  width: 0;\n  border-bottom: 30px solid black;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n}",
        ".shape {\n  height: 0;\n  width: 0;\n  border-bottom: 30px solid black;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n}",
        "/app/page.tsx",
        "styles.shape",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport styles from '@/app/ui/home.module.css';\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className={styles.shape} />\n    // ...\n  )\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport styles from '@/app/ui/home.module.css';\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className={styles.shape} />\n    // ...\n  )\n}",
        "InvoiceStatus",
        "import clsx from 'clsx';\n \nexport default function InvoiceStatus({ status }: { status: string }) {\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center rounded-full px-2 py-1 text-sm',\n        {\n          'bg-gray-100 text-gray-500': status === 'pending',\n          'bg-green-500 text-white': status === 'paid',\n        },\n      )}\n    >\n    // ...\n)}",
        "import clsx from 'clsx';\n \nexport default function InvoiceStatus({ status }: { status: string }) {\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center rounded-full px-2 py-1 text-sm',\n        {\n          'bg-gray-100 text-gray-500': status === 'pending',\n          'bg-green-500 text-white': status === 'paid',\n        },\n      )}\n    >\n    // ...\n)}"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress2Chapter 2CSS StylingCurrently, your home page doesn't have any styles Let's look at the different ways you can style your Next js application In this chapter Here are the topics well coverHow to add a global CSS file to your application Two different ways of styling: Tailwind and CSS modules How to conditionally add class names with the clsx utility package Global styles If you look inside the /app/ui folder, you'll see a file called global css",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You can use this file to add CSS rules to all the routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more You can import global css in any component in your application, but it's usually good practice to add it to your top-level component In Next js, this is the root layout (more on this later) Add global styles to your application by navigating to /app/layout tsx and importing the global css file: /app/layout tsximport '/app/ui/global",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "css'; export default function RootLayout({ children, }: { children: React ReactNode; }) { return ( html lang=\"en\" body{children}/body /html ); } With the development server still running, save your changes and preview them in the browser Your home page should now look like this: But wait a second, you didn't add any CSS rules, where did the styles come from If you take a look inside global css, you'll notice some tailwind directives: /app/ui/global",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "csstailwind base; tailwind components; tailwind utilities; Tailwind Tailwind is a CSS framework that speeds up the development process by allowing you to quickly write utility classes directly in your React code In Tailwind, you style elements by adding class names For example, adding \"text-blue-500\" will turn the h1 text blue: h1 className=\"text-blue-500\"I'm blue /h1 Although the CSS styles are shared globally, each class is singularly applied to each element",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales When you use create-next-app to start a new project, Next js will ask if you want to use Tailwind If you select yes, Next js will automatically install the necessary packages and configure Tailwind in your application If you look at /app/page tsx, you'll see that we're using Tailwind classes in the example",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "/app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; export default function Page() { return ( // These are Tailwind classes: main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" // ) } Don't worry if this is your first time using Tailwind To save time, we've already styled all the components you'll be using",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "Let's play with Tailwind Copy the code below and paste it above the p element in /app/page tsx: /app/page tsxdiv className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\" / If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "CSS Modules CSS Modules allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules Inside /app/ui, create a new file called home module css and add the following CSS rules: /app/ui/home module css",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "shape { height: 0; width: 0; border-bottom: 30px solid black; border-left: 20px solid transparent; border-right: 20px solid transparent; } Then, inside your /app/page tsx file import the styles and replace the Tailwind class names from the div you've added with styles shape: /app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import styles from '/app/ui/home module",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "css'; export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className={styles shape} / // ) } Save your changes and preview them in the browser You should see the same shape as before Tailwind and CSS modules are the two most common ways of styling Next js applications Whether you use one or the other is a matter of preference - you can even use both in the same application",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Using the clsx library to toggle class names There may be cases where you may need to conditionally style an element based on state or some other condition clsx is a library that lets you toggle class names easily We recommend taking a look at documentation for more details, but here's the basic usage: Suppose that you want to create an InvoiceStatus component which accepts status The status can be 'pending' or 'paid' If it's 'paid', you want the color to be green",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "If it's 'pending', you want the color to be gray You can use clsx to conditionally apply the classes, like this: /app/ui/invoices/status tsximport clsx from 'clsx'; export default function InvoiceStatus({ status }: { status: string }) { return ( span className={clsx( 'inline-flex items-center rounded-full px-2 py-1 text-sm', { 'bg-gray-100 text-gray-500': status === 'pending', 'bg-green-500 text-white': status === 'paid', }, )}  //",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": ")} Other styling solutions In addition to the approaches we've discussed, you can also style your Next js application with: Sass which allows you to import css and scss files CSS-in-JS libraries such as styled-jsx, styled-components, and emotion Take a look at the CSS documentation for more information 2You've Completed Chapter 2Well done You've learned about the different ways of styling a Next js application",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "Next Up3: Optimizing Fonts and ImagesContinue working on your home page by adding a hero image and a custom font Start Chapter 3Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
      "title": "App Router: Optimizing Fonts and Images | Next.js",
      "content": "Sign inSign in to save progress3Chapter 3Optimizing Fonts and ImagesIn the previous chapter, you learned how to style your Next.js application. Let's continue working on your home page by adding a custom font and a hero image. In this chapter...Here are the topics well coverHow to add custom fonts with next/font.How to add images with next/image.How fonts and images are optimized in Next.js. Why optimize fonts? Fonts play a significant role in the design of a website, but using custom fonts in your project can affect performance if the font files need to be fetched and loaded. Cumulative Layout Shift is a metric used by Google to evaluate the performance and user experience of a website. With fonts, layout shift happens when the browser initially renders text in a fallback or system font and then swaps it out for a custom font once it has loaded. This swap can cause the text size, spacing, or layout to change, shifting elements around it. Next.js automatically optimizes fonts in the application when you use the next/font module. It downloads font files at build time and hosts them with your other static assets. This means when a user visits your application, there are no additional network requests for fonts which would impact performance. Adding a primary font Let's add a custom Google font to your application to see how this works. In your /app/ui folder, create a new file called fonts.ts. You'll use this file to keep the fonts that will be used throughout your application. Import the Inter font from the next/font/google module - this will be your primary font. Then, specify what subset you'd like to load. In this case, 'latin': /app/ui/fonts.tsimport { Inter } from 'next/font/google'; export const inter = Inter({ subsets: ['latin'] }); Finally, add the font to the body element in /app/layout.tsx: /app/layout.tsximport '/app/ui/global.css'; import { inter } from '/app/ui/fonts'; export default function RootLayout({ children, }: { children: React.ReactNode; }) { return ( html lang=\"en\" body className={`{inter.className} antialiased`}{children}/body /html ); } By adding Inter to the body element, the font will be applied throughout your application. Here, you're also adding the Tailwind antialiased class which smooths out the font. It's not necessary to use this class, but it adds a nice touch. Navigate to your browser, open dev tools and select the body element. You should see Inter and Inter_Fallback are now applied under styles. Practice: Adding a secondary font You can also add fonts to specific elements of your application. Now it's your turn! In your fonts.ts file, import a secondary font called Lusitana and pass it to the p element in your /app/page.tsx file. In addition to specifying a subset like you did before, you should also specify different font weights. For example, 400 (normal) and 700 (bold). Once you're ready, expand the code snippet below to see the solution. Hints: If you're unsure what weight options to pass to a font, check the TypeScript errors in your code editor. Visit the Google Fonts website and search for Lusitana to see what options are available. See the documentation for adding multiple fonts and the full list of options. Reveal the solution Finally, the AcmeLogo / component also uses Lusitana. It was commented out to prevent errors, you can now uncomment it: /app/page.tsx// ... export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" AcmeLogo / {/* ... */} /div /main ); } Great, you've added two custom fonts to your application! Next, let's add a hero image to the home page. Why optimize images? Next.js can serve static assets, like images, under the top-level /public folder. Files inside /public can be referenced in your application. With regular HTML, you would add an image as follows: img src=\"/hero.png\" alt=\"Screenshots of the dashboard project showing desktop version\" / However, this means you have to manually: Ensure your image is responsive on different screen sizes. Specify image sizes for different devices. Prevent layout shift as the images load. Lazy load images that are outside the user's viewport. Image Optimization is a large topic in web development that could be considered a specialization in itself. Instead of manually implementing these optimizations, you can use the next/image component to automatically optimize your images. The Image component The Image Component is an extension of the HTML img tag, and comes with automatic image optimization, such as: Preventing layout shift automatically when images are loading. Resizing images to avoid shipping large images to devices with a smaller viewport. Lazy loading images by default (images load as they enter the viewport). Serving images in modern formats, like WebP and AVIF, when the browser supports it. Adding the desktop hero image Let's use the Image component. If you look inside the /public folder, you'll see there are two images: hero-desktop.png and hero-mobile.png. These two images are completely different, and they'll be shown depending if the user's device is a desktop or mobile. In your /app/page.tsx file, import the component from next/image. Then, add the image under the comment: /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import { lusitana } from '/app/ui/fonts'; import Image from 'next/image'; export default function Page() { return ( // ... div className=\"flex items-center justify-center p-6 md:w-3/5 md:px-28 md:py-12\" {/* Add Hero Images Here */} Image src=\"/hero-desktop.png\" width={1000} height={760} className=\"hidden md:block\" alt=\"Screenshots of the dashboard project showing desktop version\" / /div //... ); } Here, you're setting the width to 1000 and height to 760 pixels. It's good practice to set the width and height of your images to avoid layout shift, these should be an aspect ratio identical to the source image. These values are not the size the image is rendered, but instead the size of the actual image file used to understand the aspect ratio. You'll also notice the class hidden to remove the image from the DOM on mobile screens, and md:block to show the image on desktop screens. This is what your home page should look like now: Practice: Adding the mobile hero image Now it's your turn! Under the image you've just added, add another Image component for hero-mobile.png. The image should have a width of 560 and height of 620 pixels. It should be shown on mobile screens, and hidden on desktop - you can use dev tools to check if the desktop and mobile images are swapped correctly. Once you're ready, expand the code snippet below to see the solution. Reveal the solution Great! Your home page now has a custom font and hero images. Recommended reading There's a lot more to learn about these topics, including optimizing remote images and using local font files. If you'd like to dive deeper into fonts and images, see: Image Optimization Docs Font Optimization Docs Improving Web Performance with Images (MDN) Web Fonts (MDN) How Core Web Vitals Affect SEO How Google handles JavaScript throughout the indexing process 3You've Completed Chapter 3You've learned how to optimize fonts and images using Next.js.Next Up4: Creating Layouts and PagesLet's create your dashboard routes using nested layouts and pages!Start Chapter 4Was this helpful? supported.Send",
      "code_blocks": [
        "next/font/google",
        "import { Inter } from 'next/font/google';\n \nexport const inter = Inter({ subsets: ['latin'] });",
        "import { Inter } from 'next/font/google';\n \nexport const inter = Inter({ subsets: ['latin'] });",
        "/app/layout.tsx",
        "import '@/app/ui/global.css';\nimport { inter } from '@/app/ui/fonts';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={`${inter.className} antialiased`}>{children}</body>\n    </html>\n  );\n}",
        "import '@/app/ui/global.css';\nimport { inter } from '@/app/ui/fonts';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={`${inter.className} antialiased`}>{children}</body>\n    </html>\n  );\n}",
        "antialiased",
        "Inter_Fallback",
        "/app/page.tsx",
        "<AcmeLogo />",
        "// ...\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n        <AcmeLogo />\n        {/* ... */}\n      </div>\n    </main>\n  );\n}",
        "// ...\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n        <AcmeLogo />\n        {/* ... */}\n      </div>\n    </main>\n  );\n}",
        "<img\n  src=\"/hero.png\"\n  alt=\"Screenshots of the dashboard project showing desktop version\"\n/>",
        "<img\n  src=\"/hero.png\"\n  alt=\"Screenshots of the dashboard project showing desktop version\"\n/>",
        "hero-desktop.png",
        "hero-mobile.png",
        "/app/page.tsx",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport { lusitana } from '@/app/ui/fonts';\nimport Image from 'next/image';\n \nexport default function Page() {\n  return (\n    // ...\n    <div className=\"flex items-center justify-center p-6 md:w-3/5 md:px-28 md:py-12\">\n      {/* Add Hero Images Here */}\n      <Image\n        src=\"/hero-desktop.png\"\n        width={1000}\n        height={760}\n        className=\"hidden md:block\"\n        alt=\"Screenshots of the dashboard project showing desktop version\"\n      />\n    </div>\n    //...\n  );\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport { lusitana } from '@/app/ui/fonts';\nimport Image from 'next/image';\n \nexport default function Page() {\n  return (\n    // ...\n    <div className=\"flex items-center justify-center p-6 md:w-3/5 md:px-28 md:py-12\">\n      {/* Add Hero Images Here */}\n      <Image\n        src=\"/hero-desktop.png\"\n        width={1000}\n        height={760}\n        className=\"hidden md:block\"\n        alt=\"Screenshots of the dashboard project showing desktop version\"\n      />\n    </div>\n    //...\n  );\n}",
        "hero-mobile.png"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress3Chapter 3Optimizing Fonts and ImagesIn the previous chapter, you learned how to style your Next js application Let's continue working on your home page by adding a custom font and a hero image In this chapter Here are the topics well coverHow to add custom fonts with next/font How to add images with next/image How fonts and images are optimized in Next js Why optimize fonts",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "Fonts play a significant role in the design of a website, but using custom fonts in your project can affect performance if the font files need to be fetched and loaded Cumulative Layout Shift is a metric used by Google to evaluate the performance and user experience of a website With fonts, layout shift happens when the browser initially renders text in a fallback or system font and then swaps it out for a custom font once it has loaded",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This swap can cause the text size, spacing, or layout to change, shifting elements around it Next js automatically optimizes fonts in the application when you use the next/font module It downloads font files at build time and hosts them with your other static assets This means when a user visits your application, there are no additional network requests for fonts which would impact performance Adding a primary font Let's add a custom Google font to your application to see how this works",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "In your /app/ui folder, create a new file called fonts ts You'll use this file to keep the fonts that will be used throughout your application Import the Inter font from the next/font/google module - this will be your primary font Then, specify what subset you'd like to load In this case, 'latin': /app/ui/fonts tsimport { Inter } from 'next/font/google'; export const inter = Inter({ subsets: ['latin'] }); Finally, add the font to the body element in /app/layout tsx: /app/layout",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "tsximport '/app/ui/global css'; import { inter } from '/app/ui/fonts'; export default function RootLayout({ children, }: { children: React ReactNode; }) { return ( html lang=\"en\" body className={`{inter className} antialiased`}{children}/body /html ); } By adding Inter to the body element, the font will be applied throughout your application Here, you're also adding the Tailwind antialiased class which smooths out the font It's not necessary to use this class, but it adds a nice touch",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Navigate to your browser, open dev tools and select the body element You should see Inter and Inter_Fallback are now applied under styles Practice: Adding a secondary font You can also add fonts to specific elements of your application Now it's your turn In your fonts ts file, import a secondary font called Lusitana and pass it to the p element in your /app/page tsx file In addition to specifying a subset like you did before, you should also specify different font weights",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "For example, 400 (normal) and 700 (bold) Once you're ready, expand the code snippet below to see the solution Hints: If you're unsure what weight options to pass to a font, check the TypeScript errors in your code editor Visit the Google Fonts website and search for Lusitana to see what options are available See the documentation for adding multiple fonts and the full list of options Reveal the solution Finally, the AcmeLogo / component also uses Lusitana",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "It was commented out to prevent errors, you can now uncomment it: /app/page tsx// export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" AcmeLogo / {/* */} /div /main ); } Great, you've added two custom fonts to your application Next, let's add a hero image to the home page Why optimize images Next js can serve static assets, like images, under the top-level /public folder",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Files inside /public can be referenced in your application With regular HTML, you would add an image as follows: img src=\"/hero png\" alt=\"Screenshots of the dashboard project showing desktop version\" / However, this means you have to manually: Ensure your image is responsive on different screen sizes Specify image sizes for different devices Prevent layout shift as the images load Lazy load images that are outside the user's viewport",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "Image Optimization is a large topic in web development that could be considered a specialization in itself Instead of manually implementing these optimizations, you can use the next/image component to automatically optimize your images The Image component The Image Component is an extension of the HTML img tag, and comes with automatic image optimization, such as: Preventing layout shift automatically when images are loading",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Resizing images to avoid shipping large images to devices with a smaller viewport Lazy loading images by default (images load as they enter the viewport) Serving images in modern formats, like WebP and AVIF, when the browser supports it Adding the desktop hero image Let's use the Image component If you look inside the /public folder, you'll see there are two images: hero-desktop png and hero-mobile png",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "These two images are completely different, and they'll be shown depending if the user's device is a desktop or mobile In your /app/page tsx file, import the component from next/image Then, add the image under the comment: /app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import { lusitana } from '/app/ui/fonts'; import Image from 'next/image'; export default function Page() { return ( //",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "div className=\"flex items-center justify-center p-6 md:w-3/5 md:px-28 md:py-12\" {/* Add Hero Images Here */} Image src=\"/hero-desktop png\" width={1000} height={760} className=\"hidden md:block\" alt=\"Screenshots of the dashboard project showing desktop version\" / /div // ); } Here, you're setting the width to 1000 and height to 760 pixels It's good practice to set the width and height of your images to avoid layout shift, these should be an aspect ratio identical to the source image",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "These values are not the size the image is rendered, but instead the size of the actual image file used to understand the aspect ratio You'll also notice the class hidden to remove the image from the DOM on mobile screens, and md:block to show the image on desktop screens This is what your home page should look like now: Practice: Adding the mobile hero image Now it's your turn Under the image you've just added, add another Image component for hero-mobile png",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "The image should have a width of 560 and height of 620 pixels It should be shown on mobile screens, and hidden on desktop - you can use dev tools to check if the desktop and mobile images are swapped correctly Once you're ready, expand the code snippet below to see the solution Reveal the solution Great Your home page now has a custom font and hero images Recommended reading There's a lot more to learn about these topics, including optimizing remote images and using local font files",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "If you'd like to dive deeper into fonts and images, see: Image Optimization Docs Font Optimization Docs Improving Web Performance with Images (MDN) Web Fonts (MDN) How Core Web Vitals Affect SEO How Google handles JavaScript throughout the indexing process 3You've Completed Chapter 3You've learned how to optimize fonts and images using Next js Next Up4: Creating Layouts and PagesLet's create your dashboard routes using nested layouts and pages Start Chapter 4Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
      "title": "App Router: Getting Started | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pagePre-requisite knowledgeNext StepsEdit this page on GitHub Scroll to top Next.js DocsApp RouterGetting StartedGetting StartedWelcome to the Next.js documentation! This Getting Started section will help you create your first Next.js app and learn the core features you'll use in every project. Pre-requisite knowledge Our documentation assumes some familiarity with web development. Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next.js Foundations course that has you building an application as you learn. Next Steps InstallationLearn how to create a new Next.js application with the `create-next-app` CLI, and set up TypeScript, ESLint, and Module Path Aliases.Project StructureLearn the folder and file conventions in Next.js, and how to organize your project.Layouts and PagesLearn how to create your first pages and layouts, and link between them with the Link component.Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks.Server and Client ComponentsLearn how you can use React Server and Client Components to render parts of your application on the server or the client.Partial PrerenderingLearn how to use Partial Prerendering and combine the benefits of static and dynamic rendering.Fetching DataLearn how to fetch data and stream content that depends on data.Updating DataLearn how to mutate data using Server Functions.Caching and RevalidatingLearn how to cache and revalidate data in your application.Error HandlingLearn how to display expected errors and handle uncaught exceptions.CSSLearn about the different ways to add CSS to your application, including CSS Modules, Global CSS, Tailwind CSS, and more.Image OptimizationLearn how to optimize images in Next.jsFont OptimizationLearn how to optimize fonts in Next.jsMetadata and OG imagesLearn how to add metadata to your pages and create dynamic OG images.Route Handlers and MiddlewareLearn how to use Route Handlers and MiddlewareDeployingLearn how to deploy your Next.js application.UpgradingLearn how to upgrade your Next.js application to the latest version or canary.PreviousApp RouterNextInstallationWas this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pagePre-requisite knowledgeNext StepsEdit this page on GitHub Scroll to top Next js DocsApp RouterGetting StartedGetting StartedWelcome to the Next js documentation This Getting Started section will help you create your first Next js app and learn the core features you'll use in every project Pre-requisite knowledge Our documentation assumes some familiarity with web development",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Before getting started, it'll help if you're comfortable with: HTML CSS JavaScript React If you're new to React or need a refresher, we recommend starting with our React Foundations course, and the Next js Foundations course that has you building an application as you learn Next Steps InstallationLearn how to create a new Next js application with the `create-next-app` CLI, and set up TypeScript, ESLint, and Module Path Aliases Project StructureLearn the folder and file conventions in Next",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "js, and how to organize your project Layouts and PagesLearn how to create your first pages and layouts, and link between them with the Link component Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Server and Client ComponentsLearn how you can use React Server and Client Components to render parts of your application on the server or the client Partial PrerenderingLearn how to use Partial Prerendering and combine the benefits of static and dynamic rendering Fetching DataLearn how to fetch data and stream content that depends on data Updating DataLearn how to mutate data using Server Functions Caching and RevalidatingLearn how to cache and revalidate data in your application",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Error HandlingLearn how to display expected errors and handle uncaught exceptions CSSLearn about the different ways to add CSS to your application, including CSS Modules, Global CSS, Tailwind CSS, and more Image OptimizationLearn how to optimize images in Next jsFont OptimizationLearn how to optimize fonts in Next jsMetadata and OG imagesLearn how to add metadata to your pages and create dynamic OG images",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "Route Handlers and MiddlewareLearn how to use Route Handlers and MiddlewareDeployingLearn how to deploy your Next js application UpgradingLearn how to upgrade your Next js application to the latest version or canary PreviousApp RouterNextInstallationWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
      "title": "Getting Started: Installation | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageSystem requirementsAutomatic installationManual installationCreate the app directoryCreate the public folder (optional)Run the development serverSet up TypeScriptIDE PluginSet up ESLintSet up Absolute Imports and Module Path AliasesEdit this page on GitHub Scroll to top App RouterGetting StartedInstallationInstallation System requirements Before you begin, make sure your system meets the following requirements: Node.js 18.18 or later. macOS, Windows (including WSL), or Linux. Automatic installation The quickest way to create a new Next.js app is using create-next-app, which sets up everything automatically for you. To create a project, run: Terminalnpx create-next-applatest On installation, you'll see the following prompts: TerminalWhat is your project named? my-app Would you like to use TypeScript? No / Yes Would you like to use ESLint? No / Yes Would you like to use Tailwind CSS? No / Yes Would you like your code inside a `src/` directory? No / Yes Would you like to use App Router? (recommended) No / Yes Would you like to use Turbopack for `next dev`? No / Yes Would you like to customize the import alias (`/*` by default)? No / Yes What import alias would you like configured? /* After the prompts, create-next-app will create a folder with your project name and install the required dependencies. Manual installation To manually create a new Next.js app, install the required packages: pnpmnpmyarnbunTerminalpnpm i nextlatest reactlatest react-domlatest Then, add the following scripts to your package.json file: package.json{ \"scripts\": { \"dev\": \"next dev\", \"build\": \"next build\", \"start\": \"next start\", \"lint\": \"next lint\" } } These scripts refer to the different stages of developing an application: next dev: Starts the development server. next build: Builds the application for production. next start: Starts the production server. next lint: Runs ESLint. Create the app directory Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files.Create an app folder. Then, inside app, create a layout.tsx file. This file is the root layout. It's required and must contain the html and body tags.app/layout.tsxTypeScriptJavaScriptTypeScriptexport default function RootLayout({ children, }: { children: React.ReactNode }) { return ( html lang=\"en\" body{children}/body /html ) }Create a home page app/page.tsx with some initial content:app/page.tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello, Next.js!/h1 }Both layout.tsx and page.tsx will be rendered when the user visits the root of your application (/). Good to know: If you forget to create the root layout, Next.js will automatically create this file when running the development server with next dev. You can optionally use a src folder in the root of your project to separate your application's code from configuration files. Create the public folder (optional) Create a public folder at the root of your project to store static assets such as images, fonts, etc. Files inside public can then be referenced by your code starting from the base URL (/). You can then reference these assets using the root path (/). For example, public/profile.png can be referenced as /profile.png: app/page.tsxTypeScriptJavaScriptTypeScriptimport Image from 'next/image' export default function Page() { return Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} / } Run the development server Run npm run dev to start the development server. Visit http://localhost:3000 to view your application. Edit the app/page.tsx file and save it to see the updated result in your browser. Set up TypeScript Minimum TypeScript version: v4.5.2 Next.js comes with built-in TypeScript support. To add TypeScript to your project, rename a file to .ts / .tsx and run next dev. Next.js will automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options. IDE Plugin Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.You can enable the plugin in VS Code by: Opening the command palette (Ctrl/ + Shift + P) Searching for \"TypeScript: Select TypeScript Version\" Selecting \"Use Workspace Version\" See the TypeScript reference page for more information. Set up ESLint Next.js comes with built-in ESLint. It automatically installs the necessary packages and configures the proper settings when you create a new project with create-next-app. To manually add ESLint to an existing project, add next lint as a script to package.json: package.json{ \"scripts\": { \"lint\": \"next lint\" } } Then, run npm run lint and you will be guided through the installation and configuration process. Terminalnpm run lint You'll see a prompt like this: ? How would you like to configure ESLint?  Strict (recommended) Base Cancel Strict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time. Base: Includes Next.js' base ESLint configuration. Cancel: Skip configuration. Select this option if you plan on setting up your own custom ESLint configuration. If Strict or Base are selected, Next.js will automatically install eslint and eslint-config-next as dependencies in your application and create an .eslintrc.json file in the root of your project that includes your selected configuration. You can now run next lint every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (next build). Errors will fail the build, while warnings will not. See the ESLint Plugin page for more information. Set up Absolute Imports and Module Path Aliases Next.js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig.json and jsconfig.json files. These options allow you to alias project directories to absolute paths, making it easier and cleaner to import modules. For example: // Before import { Button } from '../../../components/button' // After import { Button } from '/components/button' To configure absolute imports, add the baseUrl configuration option to your tsconfig.json or jsconfig.json file. For example: tsconfig.json or jsconfig.json{ \"compilerOptions\": { \"baseUrl\": \"src/\" } } In addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths. For example, the following configuration maps /components/* to components/*: tsconfig.json or jsconfig.json{ \"compilerOptions\": { \"baseUrl\": \"src/\", \"paths\": { \"/styles/*\": [\"styles/*\"], \"/components/*\": [\"components/*\"] } } } Each of the \"paths\" are relative to the baseUrl location.PreviousGetting StartedNextProject StructureWas this helpful? supported.Send",
      "code_blocks": [
        "create-next-app",
        "npx create-next-app@latest",
        "npx create-next-app@latest",
        "What is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like your code inside a `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)? No / Yes\nWhat import alias would you like configured? @/*",
        "What is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like your code inside a `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)? No / Yes\nWhat import alias would you like configured? @/*",
        "create-next-app",
        "pnpm i next@latest react@latest react-dom@latest",
        "pnpm i next@latest react@latest react-dom@latest",
        "package.json",
        "{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}",
        "{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}",
        "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}",
        "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}",
        "app/page.tsx",
        "export default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}",
        "export default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}",
        "public/profile.png",
        "/profile.png",
        "import Image from 'next/image'\n \nexport default function Page() {\n  return <Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} />\n}",
        "import Image from 'next/image'\n \nexport default function Page() {\n  return <Image src=\"/profile.png\" alt=\"Profile\" width={100} height={100} />\n}",
        "npm run dev",
        "http://localhost:3000",
        "app/page.tsx",
        "tsconfig.json",
        "create-next-app",
        "package.json",
        "{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}",
        "{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}",
        "npm run lint",
        "npm run lint",
        "npm run lint",
        "eslint-config-next",
        ".eslintrc.json",
        "tsconfig.json",
        "jsconfig.json",
        "// Before\nimport { Button } from '../../../components/button'\n \n// After\nimport { Button } from '@/components/button'",
        "// Before\nimport { Button } from '../../../components/button'\n \n// After\nimport { Button } from '@/components/button'",
        "tsconfig.json",
        "jsconfig.json",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\"\n  }\n}",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\"\n  }\n}",
        "@/components/*",
        "components/*",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}",
        "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageSystem requirementsAutomatic installationManual installationCreate the app directoryCreate the public folder (optional)Run the development serverSet up TypeScriptIDE PluginSet up ESLintSet up Absolute Imports and Module Path AliasesEdit this page on GitHub Scroll to top App RouterGetting StartedInstallationInstallation System requirements Before you begin, make sure your system meets the following requirements: Node js 18",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "18 or later macOS, Windows (including WSL), or Linux Automatic installation The quickest way to create a new Next js app is using create-next-app, which sets up everything automatically for you To create a project, run: Terminalnpx create-next-applatest On installation, you'll see the following prompts: TerminalWhat is your project named my-app Would you like to use TypeScript No / Yes Would you like to use ESLint No / Yes Would you like to use Tailwind CSS",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "No / Yes Would you like your code inside a `src/` directory No / Yes Would you like to use App Router (recommended) No / Yes Would you like to use Turbopack for `next dev` No / Yes Would you like to customize the import alias (`/*` by default) No / Yes What import alias would you like configured /* After the prompts, create-next-app will create a folder with your project name and install the required dependencies Manual installation To manually create a new Next",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "js app, install the required packages: pnpmnpmyarnbunTerminalpnpm i nextlatest reactlatest react-domlatest Then, add the following scripts to your package json file: package json{ \"scripts\": { \"dev\": \"next dev\", \"build\": \"next build\", \"start\": \"next start\", \"lint\": \"next lint\" } } These scripts refer to the different stages of developing an application: next dev: Starts the development server next build: Builds the application for production next start: Starts the production server",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "next lint: Runs ESLint Create the app directory Next js uses file-system routing, which means the routes in your application are determined by how you structure your files Create an app folder Then, inside app, create a layout tsx file This file is the root layout It's required and must contain the html and body tags app/layout tsxTypeScriptJavaScriptTypeScriptexport default function RootLayout({ children, }: { children: React",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "ReactNode }) { return ( html lang=\"en\" body{children}/body /html ) }Create a home page app/page tsx with some initial content:app/page tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello, Next js /h1 }Both layout tsx and page tsx will be rendered when the user visits the root of your application (/) Good to know: If you forget to create the root layout, Next js will automatically create this file when running the development server with next dev",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "You can optionally use a src folder in the root of your project to separate your application's code from configuration files Create the public folder (optional) Create a public folder at the root of your project to store static assets such as images, fonts, etc Files inside public can then be referenced by your code starting from the base URL (/) You can then reference these assets using the root path (/) For example, public/profile png can be referenced as /profile png: app/page",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptimport Image from 'next/image' export default function Page() { return Image src=\"/profile png\" alt=\"Profile\" width={100} height={100} / } Run the development server Run npm run dev to start the development server Visit http://localhost:3000 to view your application Edit the app/page tsx file and save it to see the updated result in your browser Set up TypeScript Minimum TypeScript version: v4 5 2 Next js comes with built-in TypeScript support",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "To add TypeScript to your project, rename a file to ts / tsx and run next dev Next js will automatically install the necessary dependencies and add a tsconfig json file with the recommended config options IDE Plugin Next js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "You can enable the plugin in VS Code by: Opening the command palette (Ctrl/ + Shift + P) Searching for \"TypeScript: Select TypeScript Version\" Selecting \"Use Workspace Version\" See the TypeScript reference page for more information Set up ESLint Next js comes with built-in ESLint It automatically installs the necessary packages and configures the proper settings when you create a new project with create-next-app To manually add ESLint to an existing project, add next lint as a script to package",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "json: package json{ \"scripts\": { \"lint\": \"next lint\" } } Then, run npm run lint and you will be guided through the installation and configuration process Terminalnpm run lint You'll see a prompt like this: How would you like to configure ESLint Strict (recommended) Base Cancel Strict: Includes Next js' base ESLint configuration along with a stricter Core Web Vitals rule-set This is the recommended configuration for developers setting up ESLint for the first time Base: Includes Next",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "js' base ESLint configuration Cancel: Skip configuration Select this option if you plan on setting up your own custom ESLint configuration If Strict or Base are selected, Next js will automatically install eslint and eslint-config-next as dependencies in your application and create an eslintrc json file in the root of your project that includes your selected configuration You can now run next lint every time you want to run ESLint to catch errors",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "Once ESLint has been set up, it will also automatically run during every build (next build) Errors will fail the build, while warnings will not See the ESLint Plugin page for more information Set up Absolute Imports and Module Path Aliases Next js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig json and jsconfig json files These options allow you to alias project directories to absolute paths, making it easier and cleaner to import modules",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "For example: // Before import { Button } from ' / / /components/button' // After import { Button } from '/components/button' To configure absolute imports, add the baseUrl configuration option to your tsconfig json or jsconfig json file For example: tsconfig json or jsconfig json{ \"compilerOptions\": { \"baseUrl\": \"src/\" } } In addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "For example, the following configuration maps /components/* to components/*: tsconfig json or jsconfig json{ \"compilerOptions\": { \"baseUrl\": \"src/\", \"paths\": { \"/styles/*\": [\"styles/*\"], \"/components/*\": [\"components/*\"] } } } Each of the \"paths\" are relative to the baseUrl location PreviousGetting StartedNextProject StructureWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/installation#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
      "title": "Getting Started: Project Structure | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageFolder and file conventionsTop-level foldersTop-level filesRouting FilesNested routesDynamic routesRoute Groups and private foldersParallel and Intercepted RoutesMetadata file conventionsApp iconsOpen Graph and Twitter imagesSEOOrganizing your projectComponent hierarchyColocationPrivate foldersRoute groupssrc folderExamplesStore project files outside of appStore project files in top-level folders inside of appSplit project files by feature or routeOrganize routes without affecting the URL pathOpting specific segments into a layoutOpting for loading skeletons on a specific routeCreating multiple root layoutsEdit this page on GitHub Scroll to top App RouterGetting StartedProject StructureProject structure and organizationThis page provides an overview of all the folder and file conventions in Next.js, and recommendations for organizing your project. Folder and file conventions Top-level folders Top-level folders are used to organize your application's code and static assets. appApp RouterpagesPages RouterpublicStatic assets to be servedsrcOptional application source folder Top-level files Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables. Next.jsnext.config.jsConfiguration file for Next.jspackage.jsonProject dependencies and scriptsinstrumentation.tsOpenTelemetry and Instrumentation filemiddleware.tsNext.js request middleware.envEnvironment variables.env.localLocal environment variables.env.productionProduction environment variables.env.developmentDevelopment environment variables.eslintrc.jsonConfiguration file for ESLint.gitignoreGit files and folders to ignorenext-env.d.tsTypeScript declaration file for Next.jstsconfig.jsonConfiguration file for TypeScriptjsconfig.jsonConfiguration file for JavaScript Routing Files layout.js .jsx .tsxLayoutpage.js .jsx .tsxPageloading.js .jsx .tsxLoading UInot-found.js .jsx .tsxNot found UIerror.js .jsx .tsxError UIglobal-error.js .jsx .tsxGlobal error UIroute.js .tsAPI endpointtemplate.js .jsx .tsxRe-rendered layoutdefault.js .jsx .tsxParallel route fallback pageNested routes folderRoute segmentfolder/folderNested route segmentDynamic routes [folder]Dynamic route segment[...folder]Catch-all route segment[[...folder]]Optional catch-all route segmentRoute Groups and private folders (folder)Group routes without affecting routing_folderOpt folder and all child segments out of routingParallel and Intercepted Routes folderNamed slot(.)folderIntercept same level(..)folderIntercept one level above(..)(..)folderIntercept two levels above(...)folderIntercept from rootMetadata file conventions App icons favicon.icoFavicon fileicon.ico .jpg .jpeg .png .svgApp Icon fileicon.js .ts .tsxGenerated App Iconapple-icon.jpg .jpeg, .pngApple App Icon fileapple-icon.js .ts .tsxGenerated Apple App IconOpen Graph and Twitter images opengraph-image.jpg .jpeg .png .gifOpen Graph image fileopengraph-image.js .ts .tsxGenerated Open Graph imagetwitter-image.jpg .jpeg .png .gifTwitter image filetwitter-image.js .ts .tsxGenerated Twitter imageSEO sitemap.xmlSitemap filesitemap.js .tsGenerated Sitemaprobots.txtRobots filerobots.js .tsGenerated Robots file Organizing your project Next.js is unopinionated about how you organize and colocate your project files. But it does provide several features to help you organize your project.Component hierarchy The components defined in special files are rendered in a specific hierarchy: layout.js template.js error.js (React error boundary) loading.js (React suspense boundary) not-found.js (React error boundary) page.js or nested layout.js The components are rendered recursively in nested routes, meaning the components of a route segment will be nested inside the components of its parent segment.Colocation In the app directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path.However, even though route structure is defined through folders, a route is not publicly accessible until a page.js or route.js file is added to a route segment.And, even when a route is made publicly accessible, only the content returned by page.js or route.js is sent to the client.This means that project files can be safely colocated inside route segments in the app directory without accidentally being routable. Good to know: While you can colocate your project files in app you don't have to. If you prefer, you can keep them outside the app directory. Private folders Private folders can be created by prefixing a folder with an underscore: _folderNameThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.Since files in the app directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for: Separating UI logic from routing logic. Consistently organizing internal files across a project and the Next.js ecosystem. Sorting and grouping files in code editors. Avoiding potential naming conflicts with future Next.js file conventions. Good to know: While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern. You can create URL segments that start with an underscore by prefixing the folder name with 5F (the URL-encoded form of an underscore): 5FfolderName. If you don't use private folders, it would be helpful to know Next.js special file conventions to prevent unexpected naming conflicts. Route groups Route groups can be created by wrapping a folder in parenthesis: (folderName)This indicates the folder is for organizational purposes and should not be included in the route's URL path.Route groups are useful for: Organizing routes by site section, intent, or team. e.g. marketing pages, admin pages, etc. Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment src folder Next.js supports storing application code (including app) inside an optional src folder. This separates application code from project configuration files which mostly live in the root of a project.Examples The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project. Good to know: In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui, utils, hooks, styles, etc. Store project files outside of app This strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes.Store project files in top-level folders inside of app This strategy stores all application code in shared folders in the root of the app directory.Split project files by feature or route This strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them.Organize routes without affecting the URL path To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. (marketing) or (shop)).Even though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout.js file inside their folders.Opting specific segments into a layout To opt specific routes into a layout, create a new route group (e.g. (shop)) and move the routes that share the same layout into the group (e.g. account and cart). The routes outside of the group will not share the layout (e.g. checkout).Opting for loading skeletons on a specific route To apply a loading skeleton via a loading.js file to a specific route, create a new route group (e.g., /(overview)) and then move your loading.tsx inside that route group.Now, the loading.tsx file will only apply to your dashboard  overview page instead of all your dashboard pages without affecting the URL path structure.Creating multiple root layouts To create multiple root layouts, remove the top-level layout.js file, and add a layout.js file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The html and body tags need to be added to each root layout.In the example above, both (marketing) and (shop) have their own root layout.PreviousInstallationNextLayouts and PagesWas this helpful? supported.Send",
      "code_blocks": [
        "next.config.js",
        "package.json",
        "instrumentation.ts",
        "middleware.ts",
        ".env.production",
        ".env.development",
        ".eslintrc.json",
        "next-env.d.ts",
        "tsconfig.json",
        "jsconfig.json",
        "global-error",
        "folder/folder",
        "[...folder]",
        "[[...folder]]",
        "(..)(..)folder",
        "(...)folder",
        "opengraph-image",
        "opengraph-image",
        "twitter-image",
        "twitter-image",
        "template.js",
        "not-found.js",
        "_folderName",
        "%5FfolderName",
        "(folderName)",
        "(marketing)",
        "(marketing)",
        "/(overview)",
        "loading.tsx",
        "loading.tsx",
        "(marketing)"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageFolder and file conventionsTop-level foldersTop-level filesRouting FilesNested routesDynamic routesRoute Groups and private foldersParallel and Intercepted RoutesMetadata file conventionsApp iconsOpen Graph and Twitter imagesSEOOrganizing your projectComponent hierarchyColocationPrivate foldersRoute groupssrc folderExamplesStore project files outside of appStore project files in top-level folders inside of appSplit project files by feature or routeOrganize routes without affecting the URL pathOpting specific segments into a layoutOpting for loading skeletons on a specific routeCreating multiple root layoutsEdit this page on GitHub Scroll to top App RouterGetting StartedProject StructureProject structure and organizationThis page provides an overview of all the folder and file conventions in Next",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "js, and recommendations for organizing your project Folder and file conventions Top-level folders Top-level folders are used to organize your application's code and static assets appApp RouterpagesPages RouterpublicStatic assets to be servedsrcOptional application source folder Top-level files Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables Next jsnext config jsConfiguration file for Next",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "jspackage jsonProject dependencies and scriptsinstrumentation tsOpenTelemetry and Instrumentation filemiddleware tsNext js request middleware envEnvironment variables env localLocal environment variables env productionProduction environment variables env developmentDevelopment environment variables eslintrc jsonConfiguration file for ESLint gitignoreGit files and folders to ignorenext-env d tsTypeScript declaration file for Next jstsconfig jsonConfiguration file for TypeScriptjsconfig",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "jsonConfiguration file for JavaScript Routing Files layout js jsx tsxLayoutpage js jsx tsxPageloading js jsx tsxLoading UInot-found js jsx tsxNot found UIerror js jsx tsxError UIglobal-error js jsx tsxGlobal error UIroute js tsAPI endpointtemplate js jsx tsxRe-rendered layoutdefault js jsx tsxParallel route fallback pageNested routes folderRoute segmentfolder/folderNested route segmentDynamic routes [folder]Dynamic route segment[ folder]Catch-all route segment[[",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "folder]]Optional catch-all route segmentRoute Groups and private folders (folder)Group routes without affecting routing_folderOpt folder and all child segments out of routingParallel and Intercepted Routes folderNamed slot( )folderIntercept same level( )folderIntercept one level above( )( )folderIntercept two levels above( )folderIntercept from rootMetadata file conventions App icons favicon icoFavicon fileicon ico jpg jpeg png svgApp Icon fileicon js ts tsxGenerated App Iconapple-icon jpg jpeg,",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "pngApple App Icon fileapple-icon js ts tsxGenerated Apple App IconOpen Graph and Twitter images opengraph-image jpg jpeg png gifOpen Graph image fileopengraph-image js ts tsxGenerated Open Graph imagetwitter-image jpg jpeg png gifTwitter image filetwitter-image js ts tsxGenerated Twitter imageSEO sitemap xmlSitemap filesitemap js tsGenerated Sitemaprobots txtRobots filerobots js tsGenerated Robots file Organizing your project Next",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "js is unopinionated about how you organize and colocate your project files But it does provide several features to help you organize your project Component hierarchy The components defined in special files are rendered in a specific hierarchy: layout js template js error js (React error boundary) loading js (React suspense boundary) not-found js (React error boundary) page js or nested layout",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "js The components are rendered recursively in nested routes, meaning the components of a route segment will be nested inside the components of its parent segment Colocation In the app directory, nested folders define route structure Each folder represents a route segment that is mapped to a corresponding segment in a URL path However, even though route structure is defined through folders, a route is not publicly accessible until a page js or route js file is added to a route segment",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "And, even when a route is made publicly accessible, only the content returned by page js or route js is sent to the client This means that project files can be safely colocated inside route segments in the app directory without accidentally being routable Good to know: While you can colocate your project files in app you don't have to If you prefer, you can keep them outside the app directory",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "Private folders Private folders can be created by prefixing a folder with an underscore: _folderNameThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing Since files in the app directory can be safely colocated by default, private folders are not required for colocation However, they can be useful for: Separating UI logic from routing logic",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "Consistently organizing internal files across a project and the Next js ecosystem Sorting and grouping files in code editors Avoiding potential naming conflicts with future Next js file conventions Good to know: While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "You can create URL segments that start with an underscore by prefixing the folder name with 5F (the URL-encoded form of an underscore): 5FfolderName If you don't use private folders, it would be helpful to know Next js special file conventions to prevent unexpected naming conflicts Route groups Route groups can be created by wrapping a folder in parenthesis: (folderName)This indicates the folder is for organizational purposes and should not be included in the route's URL path",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "Route groups are useful for: Organizing routes by site section, intent, or team e g marketing pages, admin pages, etc Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment src folder Next js supports storing application code (including app) inside an optional src folder",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "This separates application code from project configuration files which mostly live in the root of a project Examples The following section lists a very high-level overview of common strategies The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "Good to know: In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui, utils, hooks, styles, etc Store project files outside of app This strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        },
        {
          "content": "Store project files in top-level folders inside of app This strategy stores all application code in shared folders in the root of the app directory Split project files by feature or route This strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them Organize routes without affecting the URL path To organize routes without affecting the URL, create a group to keep related routes together",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_22"
        },
        {
          "content": "The folders in parenthesis will be omitted from the URL (e g (marketing) or (shop)) Even though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout js file inside their folders Opting specific segments into a layout To opt specific routes into a layout, create a new route group (e g (shop)) and move the routes that share the same layout into the group (e g account and cart)",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_23"
        },
        {
          "content": "The routes outside of the group will not share the layout (e g checkout) Opting for loading skeletons on a specific route To apply a loading skeleton via a loading js file to a specific route, create a new route group (e g , /(overview)) and then move your loading tsx inside that route group Now, the loading tsx file will only apply to your dashboard  overview page instead of all your dashboard pages without affecting the URL path structure",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_24"
        },
        {
          "content": "Creating multiple root layouts To create multiple root layouts, remove the top-level layout js file, and add a layout js file inside each route group This is useful for partitioning an application into sections that have a completely different UI or experience The html and body tags need to be added to each root layout In the example above, both (marketing) and (shop) have their own root layout PreviousInstallationNextLayouts and PagesWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/project-structure#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_25"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
      "title": "Getting Started: Layouts and Pages | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageCreating a pageCreating a layoutCreating a nested routeNesting layoutsCreating a dynamic segmentLinking between pagesAPI ReferenceEdit this page on GitHub Scroll to top App RouterGetting StartedLayouts and PagesLayouts and PagesNext.js uses file-system based routing, meaning you can use folders and files to define routes. This page will guide you through how to create layouts and pages, and link between them. Creating a page A page is UI that is rendered on a specific route. To create a page, add a page file inside the app directory and default export a React component. For example, to create an index page (/): app/page.tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello Next.js!/h1 } Creating a layout A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender. You can define a layout by default exporting a React component from a layout file. The component should accept a children prop which can be a page or another layout. For example, to create a layout that accepts your index page as child, add a layout file inside the app directory: app/layout.tsxTypeScriptJavaScriptTypeScriptexport default function DashboardLayout({ children, }: { children: React.ReactNode }) { return ( html lang=\"en\" body {/* Layout UI */} {/* Place children where you want to render a page or nested layout */} main{children}/main /body /html ) } The layout above is called a root layout because it's defined at the root of the app directory. The root layout is required and must contain html and body tags. Creating a nested route A nested route is a route composed of multiple URL segments. For example, the /blog/[slug] route is composed of three segments: / (Root Segment) blog (Segment) [slug] (Leaf Segment) In Next.js: Folders are used to define the route segments that map to URL segments. Files (like page and layout) are used to create UI that is shown for a segment. To create nested routes, you can nest folders inside each other. For example, to add a route for /blog, create a folder called blog in the app directory. Then, to make /blog publicly accessible, add a page.tsx file: app/blog/page.tsxTypeScriptJavaScriptTypeScript// Dummy imports import { getPosts } from '/lib/posts' import { Post } from '/ui/post' export default async function Page() { const posts = await getPosts() return ( ul {posts.map((post) = ( Post key={post.id} post={post} / ))} /ul ) } You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file: app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptfunction generateStaticParams() {} export default function Page() { return h1Hello, Blog Post Page!/h1 } Wrapping a folder name in square brackets (e.g. [slug]) creates a dynamic route segment which is used to generate multiple pages from data. e.g. blog posts, product pages, etc. Nesting layouts By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop. You can nest layouts by adding layout inside specific route segments (folders). For example, to create a layout for the /blog route, add a new layout file inside the blog folder. app/blog/layout.tsxTypeScriptJavaScriptTypeScriptexport default function BlogLayout({ children, }: { children: React.ReactNode }) { return section{children}/section } If you were to combine the two layouts above, the root layout (app/layout.js) would wrap the blog layout (app/blog/layout.js), which would wrap the blog (app/blog/page.js) and blog post page (app/blog/[slug]/page.js). Creating a dynamic segment Dynamic segments allow you to create routes that are generated from data. For example, instead of manually creating a route for each individual blog post, you can create a dynamic segment to generate the routes based on blog post data. To create a dynamic segment, wrap the segment (folder) name in square brackets: [segmentName]. For example, in the app/blog/[slug]/page.tsx route, the [slug] is the dynamic segment. app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptexport default async function BlogPostPage({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params const post = await getPost(slug) return ( div h1{post.title}/h1 p{post.content}/p /div ) } Learn more about Dynamic Segments. Linking between pages You can use the Link component to navigate between routes. Link is a built-in Next.js component that extends the HTML a tag to provide prefetching and client-side navigation. For example, to generate a list of blog posts, import Link from next/link and pass a href prop to the component: app/ui/post.tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default async function Post({ post }) { const posts = await getPosts() return ( ul {posts.map((post) = ( li key={post.slug} Link href={`/blog/{post.slug}`}{post.title}/Link /li ))} /ul ) } Good to know: Link is the primary way to navigate between routes in Next.js. You can also use the useRouter hook for more advanced navigation. API ReferenceLearn more about the features mentioned in this page by reading the API Reference.Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks.layout.jsAPI reference for the layout.js file.page.jsAPI reference for the page.js file.Link ComponentEnable fast client-side navigation with the built-in `next/link` component.Dynamic SegmentsDynamic Route Segments can be used to programmatically generate route segments from dynamic data.PreviousProject StructureNextLinking and NavigatingWas this helpful? supported.Send",
      "code_blocks": [
        "export default function Page() {\n  return <h1>Hello Next.js!</h1>\n}",
        "export default function Page() {\n  return <h1>Hello Next.js!</h1>\n}",
        "export default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}",
        "export default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}",
        "/blog/[slug]",
        "// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n \nexport default async function Page() {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}",
        "// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n \nexport default async function Page() {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}",
        "function generateStaticParams() {}\n \nexport default function Page() {\n  return <h1>Hello, Blog Post Page!</h1>\n}",
        "function generateStaticParams() {}\n \nexport default function Page() {\n  return <h1>Hello, Blog Post Page!</h1>\n}",
        "export default function BlogLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}",
        "export default function BlogLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}",
        "app/layout.js",
        "app/blog/layout.js",
        "app/blog/page.js",
        "app/blog/[slug]/page.js",
        "[segmentName]",
        "app/blog/[slug]/page.tsx",
        "export default async function BlogPostPage({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const post = await getPost(slug)\n \n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}",
        "export default async function BlogPostPage({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const post = await getPost(slug)\n \n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}",
        "import Link from 'next/link'\n \nexport default async function Post({ post }) {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.slug}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}",
        "import Link from 'next/link'\n \nexport default async function Post({ post }) {\n  const posts = await getPosts()\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.slug}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageCreating a pageCreating a layoutCreating a nested routeNesting layoutsCreating a dynamic segmentLinking between pagesAPI ReferenceEdit this page on GitHub Scroll to top App RouterGetting StartedLayouts and PagesLayouts and PagesNext js uses file-system based routing, meaning you can use folders and files to define routes This page will guide you through how to create layouts and pages, and link between them",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Creating a page A page is UI that is rendered on a specific route To create a page, add a page file inside the app directory and default export a React component For example, to create an index page (/): app/page tsxTypeScriptJavaScriptTypeScriptexport default function Page() { return h1Hello Next js /h1 } Creating a layout A layout is UI that is shared between multiple pages On navigation, layouts preserve state, remain interactive, and do not rerender",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "You can define a layout by default exporting a React component from a layout file The component should accept a children prop which can be a page or another layout For example, to create a layout that accepts your index page as child, add a layout file inside the app directory: app/layout tsxTypeScriptJavaScriptTypeScriptexport default function DashboardLayout({ children, }: { children: React",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "ReactNode }) { return ( html lang=\"en\" body {/* Layout UI */} {/* Place children where you want to render a page or nested layout */} main{children}/main /body /html ) } The layout above is called a root layout because it's defined at the root of the app directory The root layout is required and must contain html and body tags Creating a nested route A nested route is a route composed of multiple URL segments",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "For example, the /blog/[slug] route is composed of three segments: / (Root Segment) blog (Segment) [slug] (Leaf Segment) In Next js: Folders are used to define the route segments that map to URL segments Files (like page and layout) are used to create UI that is shown for a segment To create nested routes, you can nest folders inside each other For example, to add a route for /blog, create a folder called blog in the app directory Then, to make /blog publicly accessible, add a page",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "tsx file: app/blog/page tsxTypeScriptJavaScriptTypeScript// Dummy imports import { getPosts } from '/lib/posts' import { Post } from '/ui/post' export default async function Page() { const posts = await getPosts() return ( ul {posts map((post) = ( Post key={post id} post={post} / ))} /ul ) } You can continue nesting folders to create nested routes For example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file: app/blog/[slug]/page",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptfunction generateStaticParams() {} export default function Page() { return h1Hello, Blog Post Page /h1 } Wrapping a folder name in square brackets (e g [slug]) creates a dynamic route segment which is used to generate multiple pages from data e g blog posts, product pages, etc Nesting layouts By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "You can nest layouts by adding layout inside specific route segments (folders) For example, to create a layout for the /blog route, add a new layout file inside the blog folder app/blog/layout tsxTypeScriptJavaScriptTypeScriptexport default function BlogLayout({ children, }: { children: React ReactNode }) { return section{children}/section } If you were to combine the two layouts above, the root layout (app/layout js) would wrap the blog layout (app/blog/layout",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "js), which would wrap the blog (app/blog/page js) and blog post page (app/blog/[slug]/page js) Creating a dynamic segment Dynamic segments allow you to create routes that are generated from data For example, instead of manually creating a route for each individual blog post, you can create a dynamic segment to generate the routes based on blog post data To create a dynamic segment, wrap the segment (folder) name in square brackets: [segmentName] For example, in the app/blog/[slug]/page",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "tsx route, the [slug] is the dynamic segment app/blog/[slug]/page tsxTypeScriptJavaScriptTypeScriptexport default async function BlogPostPage({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params const post = await getPost(slug) return ( div h1{post title}/h1 p{post content}/p /div ) } Learn more about Dynamic Segments Linking between pages You can use the Link component to navigate between routes Link is a built-in Next",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "js component that extends the HTML a tag to provide prefetching and client-side navigation For example, to generate a list of blog posts, import Link from next/link and pass a href prop to the component: app/ui/post tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default async function Post({ post }) { const posts = await getPosts() return ( ul {posts map((post) = ( li key={post slug} Link href={`/blog/{post slug}`}{post",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "title}/Link /li ))} /ul ) } Good to know: Link is the primary way to navigate between routes in Next js You can also use the useRouter hook for more advanced navigation API ReferenceLearn more about the features mentioned in this page by reading the API Reference Linking and NavigatingLearn how the built-in navigation optimizations work, including prefetching, prerendering, and client-side navigation, and how to optimize navigation for dynamic routes and slow networks layout",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "jsAPI reference for the layout js file page jsAPI reference for the page js file Link ComponentEnable fast client-side navigation with the built-in `next/link` component Dynamic SegmentsDynamic Route Segments can be used to programmatically generate route segments from dynamic data PreviousProject StructureNextLinking and NavigatingWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/layouts-and-pages#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
      "title": "Getting Started: Linking and Navigating | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow navigation worksServer RenderingPrefetchingStreamingClient-side transitionsWhat can make transitions slow?Dynamic routes without loading.tsxDynamic segments without generateStaticParamsSlow networksDisabling prefetchingHydration not completedExamplesNative History APIwindow.history.pushStatewindow.history.replaceStateNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedLinking and NavigatingLinking and NavigatingIn Next.js, routes are rendered on the server by default. This often means the client has to wait for a server response before a new route can be shown. Next.js comes with built-in prefetching, streaming, and client-side transitions ensuring navigation stays fast and responsive. This guide explains how navigation works in Next.js and how you can optimize it for dynamic routes and slow networks. How navigation works To understand how navigation works in Next.js, it helps to be familiar with the following concepts: Server Rendering Prefetching Streaming Client-side transitions Server Rendering In Next.js, Layouts and Pages are React Server Components by default. On initial and subsequent navigations, the Server Component Payload is generated on the server before being sent to the client. There are two types of server rendering, based on when it happens: Static Rendering (or Prerendering) happens at build time or during revalidation and the result is cached. Dynamic Rendering happens at request time in response to a client request. The trade-off of server rendering is that the client must wait for the server to respond before the new route can be shown. Next.js addresses this delay by prefetching routes the user is likely to visit and performing client-side transitions. Good to know: HTML is also generated for the initial visit. Prefetching Prefetching is the process of loading a route in the background before the user navigates to it. This makes navigation between routes in your application feel instant, because by the time a user clicks on a link, the data to render the next route is already available client side. Next.js automatically prefetches routes linked with the Link component when they enter the user's viewport. app/layout.tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default function Layout({ children }: { children: React.ReactNode }) { return ( html body nav {/* Prefetched when the link is hovered or enters the viewport */} Link href=\"/blog\"Blog/Link {/* No prefetching */} a href=\"/contact\"Contact/a /nav {children} /body /html ) } How much of the route is prefetched depends on whether it's static or dynamic: Static Route: the full route is prefetched. Dynamic Route: prefetching is skipped, or the route is partially prefetched if loading.tsx is present. By skipping or partially prefetching dynamic routes, Next.js avoids unnecessary work on the server for routes the users may never visit. However, waiting for a server response before navigation can give the users the impression that the app is not responding. To improve the navigation experience to dynamic routes, you can use streaming. Streaming Streaming allows the server to send parts of a dynamic route to the client as soon as they're ready, rather than waiting for the entire route to be rendered. This means users see something sooner, even if parts of the page are still loading. For dynamic routes, it means they can be partially prefetched. That is, shared layouts and loading skeletons can be requested ahead of time. To use streaming, create a loading.tsx in your route folder: app/dashboard/loading.tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { // Add fallback UI that will be shown while the route is loading. return LoadingSkeleton / } Behind the scenes, Next.js will automatically wrap the page.tsx contents in a Suspense boundary. The prefetched fallback UI will be shown while the route is loading, and swapped for the actual content once ready. Good to know: You can also use Suspense to create loading UI for nested components. Benefits of loading.tsx: Immediate navigation and visual feedback for the user. Shared layouts remain interactive and navigation is interruptible. Improved Core Web Vitals: TTFB, FCP, and TTI. To further improve the navigation experience, Next.js performs a client-side transition with the Link component. Client-side transitions Traditionally, navigation to a server-rendered page triggers a full page load. This clears state, resets scroll position, and blocks interactivity. Next.js avoids this with client-side transitions using the Link component. Instead of reloading the page, it updates the content dynamically by: Keeping any shared layouts and UI. Replacing the current page with the prefetched loading state or a new page if available. Client-side transitions are what makes a server-rendered apps feel like client-rendered apps. And when paired with prefetching and streaming, it enables fast transitions, even for dynamic routes. What can make transitions slow? These Next.js optimizations make navigation fast and responsive. However, under certain conditions, transitions can still feel slow. Here are some common causes and how to improve the user experience: Dynamic routes without loading.tsx When navigating to a dynamic route, the client must wait for the server response before showing the result. This can give the users the impression that the app is not responding. We recommend adding loading.tsx to dynamic routes to enable partial prefetching, trigger immediate navigation, and display a loading UI while the route renders. app/blog/[slug]/loading.tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { return LoadingSkeleton / } Good to know: In development mode, you can use the Next.js Devtools to identify if the route is static or dynamic. See devIndicators for more information. Dynamic segments without generateStaticParams If a dynamic segment could be prerendered but isn't because it's missing generateStaticParams, the route will fallback to dynamic rendering at request time. Ensure the route is statically generated at build time by adding generateStaticParams: app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptexport async function generateStaticParams() { const posts = await fetch('https://.../posts').then((res) = res.json()) return posts.map((post) = ({ slug: post.slug, })) } export default async function Page({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params // ... } Slow networks On slow or unstable networks, prefetching may not finish before the user clicks a link. This can affect both static and dynamic routes. In these cases, the loading.js fallback may not appear immediately because it hasn't been prefetched yet. To improve perceived performance, you can use the useLinkStatus hook to show inline visual feedback to the user (like spinners or text glimmers on the link) while a transition is in progress. app/ui/loading-indicator.tsxTypeScriptJavaScriptTypeScript'use client' import { useLinkStatus } from 'next/link' export default function LoadingIndicator() { const { pending } = useLinkStatus() return pending ? ( div role=\"status\" aria-label=\"Loading\" className=\"spinner\" / ) : null } You can \"debounce\" the loading indicator by adding an initial animation delay (e.g. 100ms) and starting the animation as invisible (e.g. opacity: 0). This means the loading indicator will only be shown if the navigation takes longer than the specified delay. .spinner { /* ... */ opacity: 0; animation: fadeIn 500ms 100ms forwards, rotate 1s linear infinite; } keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } keyframes rotate { to { transform: rotate(360deg); } } Good to know: You can use other visual feedback patterns like a progress bar. View an example here. Disabling prefetching You can opt out of prefetching by setting the prefetch prop to false on the Link component. This is useful to avoid unnecessary usage of resources when rendering large lists of links (e.g. an infinite scroll table). Link prefetch={false} href=\"/blog\" Blog /Link However, disabling prefetching comes with trade-offs: Static routes will only be fetched when the user clicks the link. Dynamic routes will need to be rendered on the server first before the client can navigate to it. To reduce resource usage without fully disabling prefetch, you can prefetch only on hover. This limits prefetching to routes the user is more likely to visit, rather than all links in the viewport. app/ui/hover-prefetch-link.tsxTypeScriptJavaScriptTypeScript'use client' import Link from 'next/link' import { useState } from 'react' function HoverPrefetchLink({ href, children, }: { href: string children: React.ReactNode }) { const [active, setActive] = useState(false) return ( Link href={href} prefetch={active ? null : false} onMouseEnter={() = setActive(true)}  {children} /Link ) } Hydration not completed Link is a Client Component and must be hydrated before it can prefetch routes. On the initial visit, large JavaScript bundles can delay hydration, preventing prefetching from starting right away. React mitigates this with Selective Hydration and you can further improve this by: Using the next/bundle-analyzer plugin to identify and reduce bundle size by removing large dependencies. Moving logic from the client to the server where possible. See the Server and Client Components docs for guidance. Examples Native History API Next.js allows you to use the native window.history.pushState and window.history.replaceState methods to update the browser's history stack without reloading the page. pushState and replaceState calls integrate into the Next.js Router, allowing you to sync with usePathname and useSearchParams. window.history.pushState Use it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products: 'use client' import { useSearchParams } from 'next/navigation' export default function SortProducts() { const searchParams = useSearchParams() function updateSorting(sortOrder: string) { const params = new URLSearchParams(searchParams.toString()) params.set('sort', sortOrder) window.history.pushState(null, '', `?{params.toString()}`) } return (  button onClick={() = updateSorting('asc')}Sort Ascending/button button onClick={() = updateSorting('desc')}Sort Descending/button / ) } window.history.replaceState Use it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale: 'use client' import { usePathname } from 'next/navigation' export function LocaleSwitcher() { const pathname = usePathname() function switchLocale(locale: string) { // e.g. '/en/about' or '/fr/contact' const newPath = `/{locale}{pathname}` window.history.replaceState(null, '', newPath) } return (  button onClick={() = switchLocale('en')}English/button button onClick={() = switchLocale('fr')}French/button / ) } Next StepsLink ComponentEnable fast client-side navigation with the built-in `next/link` component.loading.jsAPI reference for the loading.js file.PrefetchingLearn how to configure prefetching in Next.jsPreviousLayouts and PagesNextServer and Client ComponentsWas this helpful? supported.Send",
      "code_blocks": [
        "import Link from 'next/link'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <body>\n        <nav>\n          {/* Prefetched when the link is hovered or enters the viewport */}\n          <Link href=\"/blog\">Blog</Link>\n          {/* No prefetching */}\n          <a href=\"/contact\">Contact</a>\n        </nav>\n        {children}\n      </body>\n    </html>\n  )\n}",
        "import Link from 'next/link'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <body>\n        <nav>\n          {/* Prefetched when the link is hovered or enters the viewport */}\n          <Link href=\"/blog\">Blog</Link>\n          {/* No prefetching */}\n          <a href=\"/contact\">Contact</a>\n        </nav>\n        {children}\n      </body>\n    </html>\n  )\n}",
        "loading.tsx",
        "loading.tsx",
        "export default function Loading() {\n  // Add fallback UI that will be shown while the route is loading.\n  return <LoadingSkeleton />\n}",
        "export default function Loading() {\n  // Add fallback UI that will be shown while the route is loading.\n  return <LoadingSkeleton />\n}",
        "loading.tsx",
        "loading.tsx",
        "loading.tsx",
        "export default function Loading() {\n  return <LoadingSkeleton />\n}",
        "export default function Loading() {\n  return <LoadingSkeleton />\n}",
        "devIndicators",
        "generateStaticParams",
        "generateStaticParams",
        "generateStaticParams",
        "export async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n \nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  // ...\n}",
        "export async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n \nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  // ...\n}",
        "useLinkStatus",
        "'use client'\n \nimport { useLinkStatus } from 'next/link'\n \nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role=\"status\" aria-label=\"Loading\" className=\"spinner\" />\n  ) : null\n}",
        "'use client'\n \nimport { useLinkStatus } from 'next/link'\n \nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role=\"status\" aria-label=\"Loading\" className=\"spinner\" />\n  ) : null\n}",
        ".spinner {\n  /* ... */\n  opacity: 0;\n  animation:\n    fadeIn 500ms 100ms forwards,\n    rotate 1s linear infinite;\n}\n \n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n \n@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}",
        ".spinner {\n  /* ... */\n  opacity: 0;\n  animation:\n    fadeIn 500ms 100ms forwards,\n    rotate 1s linear infinite;\n}\n \n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n \n@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}",
        "<Link prefetch={false} href=\"/blog\">\n  Blog\n</Link>",
        "<Link prefetch={false} href=\"/blog\">\n  Blog\n</Link>",
        "'use client'\n \nimport Link from 'next/link'\nimport { useState } from 'react'\n \nfunction HoverPrefetchLink({\n  href,\n  children,\n}: {\n  href: string\n  children: React.ReactNode\n}) {\n  const [active, setActive] = useState(false)\n \n  return (\n    <Link\n      href={href}\n      prefetch={active ? null : false}\n      onMouseEnter={() => setActive(true)}\n    >\n      {children}\n    </Link>\n  )\n}",
        "'use client'\n \nimport Link from 'next/link'\nimport { useState } from 'react'\n \nfunction HoverPrefetchLink({\n  href,\n  children,\n}: {\n  href: string\n  children: React.ReactNode\n}) {\n  const [active, setActive] = useState(false)\n \n  return (\n    <Link\n      href={href}\n      prefetch={active ? null : false}\n      onMouseEnter={() => setActive(true)}\n    >\n      {children}\n    </Link>\n  )\n}",
        "@next/bundle-analyzer",
        "window.history.pushState",
        "window.history.replaceState",
        "replaceState",
        "usePathname",
        "useSearchParams",
        "window.history.pushState",
        "'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}",
        "'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}",
        "window.history.replaceState",
        "'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}",
        "'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow navigation worksServer RenderingPrefetchingStreamingClient-side transitionsWhat can make transitions slow Dynamic routes without loading tsxDynamic segments without generateStaticParamsSlow networksDisabling prefetchingHydration not completedExamplesNative History APIwindow history pushStatewindow history",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "replaceStateNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedLinking and NavigatingLinking and NavigatingIn Next js, routes are rendered on the server by default This often means the client has to wait for a server response before a new route can be shown Next js comes with built-in prefetching, streaming, and client-side transitions ensuring navigation stays fast and responsive This guide explains how navigation works in Next",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "js and how you can optimize it for dynamic routes and slow networks How navigation works To understand how navigation works in Next js, it helps to be familiar with the following concepts: Server Rendering Prefetching Streaming Client-side transitions Server Rendering In Next js, Layouts and Pages are React Server Components by default On initial and subsequent navigations, the Server Component Payload is generated on the server before being sent to the client",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "There are two types of server rendering, based on when it happens: Static Rendering (or Prerendering) happens at build time or during revalidation and the result is cached Dynamic Rendering happens at request time in response to a client request The trade-off of server rendering is that the client must wait for the server to respond before the new route can be shown Next js addresses this delay by prefetching routes the user is likely to visit and performing client-side transitions",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Good to know: HTML is also generated for the initial visit Prefetching Prefetching is the process of loading a route in the background before the user navigates to it This makes navigation between routes in your application feel instant, because by the time a user clicks on a link, the data to render the next route is already available client side Next js automatically prefetches routes linked with the Link component when they enter the user's viewport app/layout",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptimport Link from 'next/link' export default function Layout({ children }: { children: React ReactNode }) { return ( html body nav {/* Prefetched when the link is hovered or enters the viewport */} Link href=\"/blog\"Blog/Link {/* No prefetching */} a href=\"/contact\"Contact/a /nav {children} /body /html ) } How much of the route is prefetched depends on whether it's static or dynamic: Static Route: the full route is prefetched",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "Dynamic Route: prefetching is skipped, or the route is partially prefetched if loading tsx is present By skipping or partially prefetching dynamic routes, Next js avoids unnecessary work on the server for routes the users may never visit However, waiting for a server response before navigation can give the users the impression that the app is not responding To improve the navigation experience to dynamic routes, you can use streaming",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "Streaming Streaming allows the server to send parts of a dynamic route to the client as soon as they're ready, rather than waiting for the entire route to be rendered This means users see something sooner, even if parts of the page are still loading For dynamic routes, it means they can be partially prefetched That is, shared layouts and loading skeletons can be requested ahead of time To use streaming, create a loading tsx in your route folder: app/dashboard/loading",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { // Add fallback UI that will be shown while the route is loading return LoadingSkeleton / } Behind the scenes, Next js will automatically wrap the page tsx contents in a Suspense boundary The prefetched fallback UI will be shown while the route is loading, and swapped for the actual content once ready Good to know: You can also use Suspense to create loading UI for nested components Benefits of loading",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "tsx: Immediate navigation and visual feedback for the user Shared layouts remain interactive and navigation is interruptible Improved Core Web Vitals: TTFB, FCP, and TTI To further improve the navigation experience, Next js performs a client-side transition with the Link component Client-side transitions Traditionally, navigation to a server-rendered page triggers a full page load This clears state, resets scroll position, and blocks interactivity Next",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "js avoids this with client-side transitions using the Link component Instead of reloading the page, it updates the content dynamically by: Keeping any shared layouts and UI Replacing the current page with the prefetched loading state or a new page if available Client-side transitions are what makes a server-rendered apps feel like client-rendered apps And when paired with prefetching and streaming, it enables fast transitions, even for dynamic routes What can make transitions slow These Next",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "js optimizations make navigation fast and responsive However, under certain conditions, transitions can still feel slow Here are some common causes and how to improve the user experience: Dynamic routes without loading tsx When navigating to a dynamic route, the client must wait for the server response before showing the result This can give the users the impression that the app is not responding We recommend adding loading",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "tsx to dynamic routes to enable partial prefetching, trigger immediate navigation, and display a loading UI while the route renders app/blog/[slug]/loading tsxTypeScriptJavaScriptTypeScriptexport default function Loading() { return LoadingSkeleton / } Good to know: In development mode, you can use the Next js Devtools to identify if the route is static or dynamic See devIndicators for more information",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "Dynamic segments without generateStaticParams If a dynamic segment could be prerendered but isn't because it's missing generateStaticParams, the route will fallback to dynamic rendering at request time Ensure the route is statically generated at build time by adding generateStaticParams: app/blog/[slug]/page tsxTypeScriptJavaScriptTypeScriptexport async function generateStaticParams() { const posts = await fetch('https:// /posts') then((res) = res json()) return posts map((post) = ({ slug: post",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "slug, })) } export default async function Page({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params // } Slow networks On slow or unstable networks, prefetching may not finish before the user clicks a link This can affect both static and dynamic routes In these cases, the loading js fallback may not appear immediately because it hasn't been prefetched yet",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        },
        {
          "content": "To improve perceived performance, you can use the useLinkStatus hook to show inline visual feedback to the user (like spinners or text glimmers on the link) while a transition is in progress app/ui/loading-indicator tsxTypeScriptJavaScriptTypeScript'use client' import { useLinkStatus } from 'next/link' export default function LoadingIndicator() { const { pending } = useLinkStatus() return pending",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_22"
        },
        {
          "content": "( div role=\"status\" aria-label=\"Loading\" className=\"spinner\" / ) : null } You can \"debounce\" the loading indicator by adding an initial animation delay (e g 100ms) and starting the animation as invisible (e g opacity: 0) This means the loading indicator will only be shown if the navigation takes longer than the specified delay spinner { /*",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_23"
        },
        {
          "content": "*/ opacity: 0; animation: fadeIn 500ms 100ms forwards, rotate 1s linear infinite; } keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } keyframes rotate { to { transform: rotate(360deg); } } Good to know: You can use other visual feedback patterns like a progress bar View an example here Disabling prefetching You can opt out of prefetching by setting the prefetch prop to false on the Link component",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_24"
        },
        {
          "content": "This is useful to avoid unnecessary usage of resources when rendering large lists of links (e g an infinite scroll table) Link prefetch={false} href=\"/blog\" Blog /Link However, disabling prefetching comes with trade-offs: Static routes will only be fetched when the user clicks the link Dynamic routes will need to be rendered on the server first before the client can navigate to it To reduce resource usage without fully disabling prefetch, you can prefetch only on hover",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_25"
        },
        {
          "content": "This limits prefetching to routes the user is more likely to visit, rather than all links in the viewport app/ui/hover-prefetch-link tsxTypeScriptJavaScriptTypeScript'use client' import Link from 'next/link' import { useState } from 'react' function HoverPrefetchLink({ href, children, }: { href: string children: React ReactNode }) { const [active, setActive] = useState(false) return ( Link href={href} prefetch={active",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_26"
        },
        {
          "content": "null : false} onMouseEnter={() = setActive(true)}  {children} /Link ) } Hydration not completed Link is a Client Component and must be hydrated before it can prefetch routes On the initial visit, large JavaScript bundles can delay hydration, preventing prefetching from starting right away React mitigates this with Selective Hydration and you can further improve this by: Using the next/bundle-analyzer plugin to identify and reduce bundle size by removing large dependencies",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_27"
        },
        {
          "content": "Moving logic from the client to the server where possible See the Server and Client Components docs for guidance Examples Native History API Next js allows you to use the native window history pushState and window history replaceState methods to update the browser's history stack without reloading the page pushState and replaceState calls integrate into the Next js Router, allowing you to sync with usePathname and useSearchParams window history",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_28"
        },
        {
          "content": "pushState Use it to add a new entry to the browser's history stack The user can navigate back to the previous state For example, to sort a list of products: 'use client' import { useSearchParams } from 'next/navigation' export default function SortProducts() { const searchParams = useSearchParams() function updateSorting(sortOrder: string) { const params = new URLSearchParams(searchParams toString()) params set('sort', sortOrder) window history pushState(null, '', ` {params",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_29"
        },
        {
          "content": "toString()}`) } return (  button onClick={() = updateSorting('asc')}Sort Ascending/button button onClick={() = updateSorting('desc')}Sort Descending/button / ) } window history replaceState Use it to replace the current entry on the browser's history stack The user is not able to navigate back to the previous state",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_30"
        },
        {
          "content": "For example, to switch the application's locale: 'use client' import { usePathname } from 'next/navigation' export function LocaleSwitcher() { const pathname = usePathname() function switchLocale(locale: string) { // e g '/en/about' or '/fr/contact' const newPath = `/{locale}{pathname}` window history",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_31"
        },
        {
          "content": "replaceState(null, '', newPath) } return (  button onClick={() = switchLocale('en')}English/button button onClick={() = switchLocale('fr')}French/button / ) } Next StepsLink ComponentEnable fast client-side navigation with the built-in `next/link` component loading jsAPI reference for the loading js file PrefetchingLearn how to configure prefetching in Next jsPreviousLayouts and PagesNextServer and Client ComponentsWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/linking-and-navigating#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_32"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
      "title": "Getting Started: Server and Client Components | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhen to use Server and Client Components?How do Server and Client Components work in Next.js?On the serverOn the client (first load)Subsequent NavigationsExamplesUsing Client ComponentsReducing JS bundle sizePassing data from Server to Client ComponentsInterleaving Server and Client ComponentsContext providersThird-party componentsPreventing environment poisoningNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedServer and Client ComponentsServer and Client ComponentsBy default, layouts and pages are Server Components, which lets you fetch data and render parts of your UI on the server, optionally cache the result, and stream it to the client. When you need interactivity or browser APIs, you can use Client Components to layer in functionality. This page explains how Server and Client Components work in Next.js and when to use them, with examples of how to compose them together in your application. When to use Server and Client Components? The client and server environments have different capabilities. Server and Client components allow you to run logic in each environment depending on your use case. Use Client Components when you need: State and event handlers. E.g. onClick, onChange. Lifecycle logic. E.g. useEffect. Browser-only APIs. E.g. localStorage, window, Navigator.geolocation, etc. Custom hooks. Use Server Components when you need: Fetch data from databases or APIs close to the source. Use API keys, tokens, and other secrets without exposing them to the client. Reduce the amount of JavaScript sent to the browser. Improve the First Contentful Paint (FCP), and stream content progressively to the client. For example, the Page component is a Server Component that fetches data about a post, and passes it as props to the LikeButton which handles client-side interactivity. app/[id]/page.tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params.id) return ( div main h1{post.title}/h1 {/* ... */} LikeButton likes={post.likes} / /main /div ) } app/ui/like-button.tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function LikeButton({ likes }: { likes: number }) { // ... } How do Server and Client Components work in Next.js? On the server On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks, by individual route segments (layouts and pages): Server Components are rendered into a special data format called the React Server Component Payload (RSC Payload). Client Components and the RSC Payload are used to prerender HTML. What is the React Server Component Payload (RSC)? The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains: The rendered result of Server Components Placeholders for where Client Components should be rendered and references to their JavaScript files Any props passed from a Server Component to a Client Component On the client (first load) Then, on the client: HTML is used to immediately show a fast non-interactive preview of the route to the user. RSC Payload is used to reconcile the Client and Server Component trees. JavaScript is used to hydrate Client Components and make the application interactive. What is hydration? Hydration is React's process for attaching event handlers to the DOM, to make the static HTML interactive. Subsequent Navigations On subsequent navigations: The RSC Payload is prefetched and cached for instant navigation. Client Components are rendered entirely on the client, without the server-rendered HTML. Examples Using Client Components You can create a Client Component by adding the \"use client\" directive at the top of the file, above your imports. app/ui/counter.tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function Counter() { const [count, setCount] = useState(0) return ( div p{count} likes/p button onClick={() = setCount(count + 1)}Click me/button /div ) } \"use client\" is used to declare a boundary between the Server and Client module graphs (trees). Once a file is marked with \"use client\", all its imports and child components are considered part of the client bundle. This means you don't need to add the directive to every component that is intended for the client. Reducing JS bundle size To reduce the size of your client JavaScript bundles, add 'use client' to specific interactive components instead of marking large parts of your UI as Client Components. For example, the Layout component contains mostly static elements like a logo and navigation links, but includes an interactive search bar. Search / is interactive and needs to be a Client Component, however, the rest of the layout can remain a Server Component. app/layout.tsxTypeScriptJavaScriptTypeScript// Client Component import Search from './search' // Server Component import Logo from './logo' // Layout is a Server Component by default export default function Layout({ children }: { children: React.ReactNode }) { return (  nav Logo / Search / /nav main{children}/main / ) } app/ui/search.tsxTypeScriptJavaScriptTypeScript'use client' export default function Search() { // ... } Passing data from Server to Client Components You can pass data from Server Components to Client Components using props. app/[id]/page.tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params.id) return LikeButton likes={post.likes} / } app/ui/like-button.tsxTypeScriptJavaScriptTypeScript'use client' export default function LikeButton({ likes }: { likes: number }) { // ... } Alternatively, you can stream data from a Server Component to a Client Component with the use Hook. See an example. Good to know: Props passed to Client Components need to be serializable by React. Interleaving Server and Client Components You can pass Server Components as a prop to a Client Component. This allows you to visually nest server-rendered UI within Client components. A common pattern is to use children to create a slot in a ClientComponent. For example, a Cart component that fetches data on the server, inside a Modal component that uses client state to toggle visibility. app/ui/modal.tsxTypeScriptJavaScriptTypeScript'use client' export default function Modal({ children }: { children: React.ReactNode }) { return div{children}/div } Then, in a parent Server Component (e.g.Page), you can pass a Cart as the child of the Modal: app/page.tsxTypeScriptJavaScriptTypeScriptimport Modal from './ui/modal' import Cart from './ui/cart' export default function Page() { return ( Modal Cart / /Modal ) } In this pattern, all Server Components will be rendered on the server ahead of time, including those as props. The resulting RSC payload will contain references of where Client Components should be rendered within the component tree. Context providers React context is commonly used to share global state like the current theme. However, React context is not supported in Server Components. To use context, create a Client Component that accepts children: app/theme-provider.tsxTypeScriptJavaScriptTypeScript'use client' import { createContext } from 'react' export const ThemeContext = createContext({}) export default function ThemeProvider({ children, }: { children: React.ReactNode }) { return ThemeContext.Provider value=\"dark\"{children}/ThemeContext.Provider } Then, import it into a Server Component (e.g. layout): app/layout.tsxTypeScriptJavaScriptTypeScriptimport ThemeProvider from './theme-provider' export default function RootLayout({ children, }: { children: React.ReactNode }) { return ( html body ThemeProvider{children}/ThemeProvider /body /html ) } Your Server Component will now be able to directly render your provider, and all other Client Components throughout your app will be able to consume this context. Good to know: You should render providers as deep as possible in the tree  notice how ThemeProvider only wraps {children} instead of the entire html document. This makes it easier for Next.js to optimize the static parts of your Server Components. Third-party components When using a third-party component that relies on client-only features, you can wrap it in a Client Component to ensure it works as expected. For example, the Carousel / can be imported from the acme-carousel package. This component uses useState, but it doesn't yet have the \"use client\" directive. If you use Carousel / within a Client Component, it will work as expected: app/gallery.tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' import { Carousel } from 'acme-carousel' export default function Gallery() { const [isOpen, setIsOpen] = useState(false) return ( div button onClick={() = setIsOpen(true)}View pictures/button {/* Works, since Carousel is used within a Client Component */} {isOpen  Carousel /} /div ) } However, if you try to use it directly within a Server Component, you'll see an error. This is because Next.js doesn't know Carousel / is using client-only features. To fix this, you can wrap third-party components that rely on client-only features in your own Client Components: app/carousel.tsxTypeScriptJavaScriptTypeScript'use client' import { Carousel } from 'acme-carousel' export default Carousel Now, you can use Carousel / directly within a Server Component: app/page.tsxTypeScriptJavaScriptTypeScriptimport Carousel from './carousel' export default function Page() { return ( div pView pictures/p {/* Works, since Carousel is a Client Component */} Carousel / /div ) } Advice for Library Authors If youre building a component library, add the \"use client\" directive to entry points that rely on client-only features. This lets your users import components into Server Components without needing to create wrappers. It's worth noting some bundlers might strip out \"use client\" directives. You can find an example of how to configure esbuild to include the \"use client\" directive in the React Wrap Balancer and Vercel Analytics repositories. Preventing environment poisoning JavaScript modules can be shared between both Server and Client Components modules. This means it's possible to accidentally import server-only code into the client. For example, consider the following function: lib/data.tsTypeScriptJavaScriptTypeScriptexport async function getData() { const res = await fetch('https://external-service.com/data', { headers: { authorization: process.env.API_KEY, }, }) return res.json() } This function contains an API_KEY that should never be exposed to the client. In Next.js, only environment variables prefixed with NEXT_PUBLIC_ are included in the client bundle. If variables are not prefixed, Next.js replaces them with an empty string. As a result, even though getData() can be imported and executed on the client, it won't work as expected. To prevent accidental usage in Client Components, you can use the server-only package. Then, import the package into a file that contains server-only code: lib/data.jsimport 'server-only' export async function getData() { const res = await fetch('https://external-service.com/data', { headers: { authorization: process.env.API_KEY, }, }) return res.json() } Now, if you try to import the module into a Client Component, there will be a build-time error. The corresponding client-only package can be used to mark modules that contain client-only logic like code that accesses the window object. In Next.js, installing server-only or client-only is optional. However, if your linting rules flag extraneous dependencies, you may install them to avoid issues. pnpmnpmyarnbunTerminalpnpm add server-only Next.js handles server-only and client-only imports internally to provide clearer error messages when a module is used in the wrong environment. The contents of these packages from NPM are not used by Next.js. Next.js also provides its own type declarations for server-only and client-only, for TypeScript configurations where noUncheckedSideEffectImports is active.Next StepsLearn more about the APIs mentioned in this page.use clientLearn how to use the use client directive to render a component on the client.PreviousLinking and NavigatingNextPartial PrerenderingWas this helpful? supported.Send",
      "code_blocks": [
        "localStorage",
        "Navigator.geolocation",
        "<LikeButton>",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return (\n    <div>\n      <main>\n        <h1>{post.title}</h1>\n        {/* ... */}\n        <LikeButton likes={post.likes} />\n      </main>\n    </div>\n  )\n}",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return (\n    <div>\n      <main>\n        <h1>{post.title}</h1>\n        {/* ... */}\n        <LikeButton likes={post.likes} />\n      </main>\n    </div>\n  )\n}",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "\"use client\"",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function Counter() {\n  const [count, setCount] = useState(0)\n \n  return (\n    <div>\n      <p>{count} likes</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}",
        "'use client'\n \nimport { useState } from 'react'\n \nexport default function Counter() {\n  const [count, setCount] = useState(0)\n \n  return (\n    <div>\n      <p>{count} likes</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}",
        "\"use client\"",
        "\"use client\"",
        "'use client'",
        "// Client Component\nimport Search from './search'\n// Server Component\nimport Logo from './logo'\n \n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <Search />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}",
        "// Client Component\nimport Search from './search'\n// Server Component\nimport Logo from './logo'\n \n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <Search />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}",
        "'use client'\n \nexport default function Search() {\n  // ...\n}",
        "'use client'\n \nexport default function Search() {\n  // ...\n}",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return <LikeButton likes={post.likes} />\n}",
        "import LikeButton from '@/app/ui/like-button'\nimport { getPost } from '@/lib/data'\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n \n  return <LikeButton likes={post.likes} />\n}",
        "'use client'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "'use client'\n \nexport default function LikeButton({ likes }: { likes: number }) {\n  // ...\n}",
        "<ClientComponent>",
        "'use client'\n \nexport default function Modal({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}",
        "'use client'\n \nexport default function Modal({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}",
        "import Modal from './ui/modal'\nimport Cart from './ui/cart'\n \nexport default function Page() {\n  return (\n    <Modal>\n      <Cart />\n    </Modal>\n  )\n}",
        "import Modal from './ui/modal'\nimport Cart from './ui/cart'\n \nexport default function Page() {\n  return (\n    <Modal>\n      <Cart />\n    </Modal>\n  )\n}",
        "'use client'\n \nimport { createContext } from 'react'\n \nexport const ThemeContext = createContext({})\n \nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}",
        "'use client'\n \nimport { createContext } from 'react'\n \nexport const ThemeContext = createContext({})\n \nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}",
        "import ThemeProvider from './theme-provider'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}",
        "import ThemeProvider from './theme-provider'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}",
        "ThemeProvider",
        "<Carousel />",
        "acme-carousel",
        "\"use client\"",
        "<Carousel />",
        "'use client'\n \nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n \nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n \n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}",
        "'use client'\n \nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n \nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n \n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}",
        "<Carousel />",
        "'use client'\n \nimport { Carousel } from 'acme-carousel'\n \nexport default Carousel",
        "'use client'\n \nimport { Carousel } from 'acme-carousel'\n \nexport default Carousel",
        "<Carousel />",
        "import Carousel from './carousel'\n \nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}",
        "import Carousel from './carousel'\n \nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}",
        "\"use client\"",
        "\"use client\"",
        "\"use client\"",
        "export async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "export async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "NEXT_PUBLIC_",
        "server-only",
        "import 'server-only'\n \nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "import 'server-only'\n \nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}",
        "client-only",
        "server-only",
        "client-only",
        "pnpm add server-only",
        "pnpm add server-only",
        "server-only",
        "client-only",
        "server-only",
        "client-only",
        "noUncheckedSideEffectImports"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageWhen to use Server and Client Components How do Server and Client Components work in Next js",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "On the serverOn the client (first load)Subsequent NavigationsExamplesUsing Client ComponentsReducing JS bundle sizePassing data from Server to Client ComponentsInterleaving Server and Client ComponentsContext providersThird-party componentsPreventing environment poisoningNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedServer and Client ComponentsServer and Client ComponentsBy default, layouts and pages are Server Components, which lets you fetch data and render parts of your UI on the server, optionally cache the result, and stream it to the client",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "When you need interactivity or browser APIs, you can use Client Components to layer in functionality This page explains how Server and Client Components work in Next js and when to use them, with examples of how to compose them together in your application When to use Server and Client Components The client and server environments have different capabilities Server and Client components allow you to run logic in each environment depending on your use case",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Use Client Components when you need: State and event handlers E g onClick, onChange Lifecycle logic E g useEffect Browser-only APIs E g localStorage, window, Navigator geolocation, etc Custom hooks Use Server Components when you need: Fetch data from databases or APIs close to the source Use API keys, tokens, and other secrets without exposing them to the client Reduce the amount of JavaScript sent to the browser",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "Improve the First Contentful Paint (FCP), and stream content progressively to the client For example, the Page component is a Server Component that fetches data about a post, and passes it as props to the LikeButton which handles client-side interactivity app/[id]/page tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "id) return ( div main h1{post title}/h1 {/* */} LikeButton likes={post likes} / /main /div ) } app/ui/like-button tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function LikeButton({ likes }: { likes: number }) { // } How do Server and Client Components work in Next js On the server On the server, Next js uses React's APIs to orchestrate rendering",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "The rendering work is split into chunks, by individual route segments (layouts and pages): Server Components are rendered into a special data format called the React Server Component Payload (RSC Payload) Client Components and the RSC Payload are used to prerender HTML What is the React Server Component Payload (RSC) The RSC Payload is a compact binary representation of the rendered React Server Components tree It's used by React on the client to update the browser's DOM",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "The RSC Payload contains: The rendered result of Server Components Placeholders for where Client Components should be rendered and references to their JavaScript files Any props passed from a Server Component to a Client Component On the client (first load) Then, on the client: HTML is used to immediately show a fast non-interactive preview of the route to the user RSC Payload is used to reconcile the Client and Server Component trees",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "JavaScript is used to hydrate Client Components and make the application interactive What is hydration Hydration is React's process for attaching event handlers to the DOM, to make the static HTML interactive Subsequent Navigations On subsequent navigations: The RSC Payload is prefetched and cached for instant navigation Client Components are rendered entirely on the client, without the server-rendered HTML",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "Examples Using Client Components You can create a Client Component by adding the \"use client\" directive at the top of the file, above your imports app/ui/counter",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' export default function Counter() { const [count, setCount] = useState(0) return ( div p{count} likes/p button onClick={() = setCount(count + 1)}Click me/button /div ) } \"use client\" is used to declare a boundary between the Server and Client module graphs (trees) Once a file is marked with \"use client\", all its imports and child components are considered part of the client bundle",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "This means you don't need to add the directive to every component that is intended for the client Reducing JS bundle size To reduce the size of your client JavaScript bundles, add 'use client' to specific interactive components instead of marking large parts of your UI as Client Components For example, the Layout component contains mostly static elements like a logo and navigation links, but includes an interactive search bar",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "Search / is interactive and needs to be a Client Component, however, the rest of the layout can remain a Server Component app/layout tsxTypeScriptJavaScriptTypeScript// Client Component import Search from ' /search' // Server Component import Logo from ' /logo' // Layout is a Server Component by default export default function Layout({ children }: { children: React ReactNode }) { return (  nav Logo / Search / /nav main{children}/main / ) } app/ui/search",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScript'use client' export default function Search() { // } Passing data from Server to Client Components You can pass data from Server Components to Client Components using props app/[id]/page tsxTypeScriptJavaScriptTypeScriptimport LikeButton from '/app/ui/like-button' import { getPost } from '/lib/data' export default async function Page({ params }: { params: { id: string } }) { const post = await getPost(params id) return LikeButton likes={post",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "likes} / } app/ui/like-button tsxTypeScriptJavaScriptTypeScript'use client' export default function LikeButton({ likes }: { likes: number }) { // } Alternatively, you can stream data from a Server Component to a Client Component with the use Hook See an example Good to know: Props passed to Client Components need to be serializable by React Interleaving Server and Client Components You can pass Server Components as a prop to a Client Component",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        },
        {
          "content": "This allows you to visually nest server-rendered UI within Client components A common pattern is to use children to create a slot in a ClientComponent For example, a Cart component that fetches data on the server, inside a Modal component that uses client state to toggle visibility app/ui/modal tsxTypeScriptJavaScriptTypeScript'use client' export default function Modal({ children }: { children: React ReactNode }) { return div{children}/div } Then, in a parent Server Component (e g",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_22"
        },
        {
          "content": "Page), you can pass a Cart as the child of the Modal: app/page tsxTypeScriptJavaScriptTypeScriptimport Modal from ' /ui/modal' import Cart from ' /ui/cart' export default function Page() { return ( Modal Cart / /Modal ) } In this pattern, all Server Components will be rendered on the server ahead of time, including those as props The resulting RSC payload will contain references of where Client Components should be rendered within the component tree",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_23"
        },
        {
          "content": "Context providers React context is commonly used to share global state like the current theme However, React context is not supported in Server Components To use context, create a Client Component that accepts children: app/theme-provider tsxTypeScriptJavaScriptTypeScript'use client' import { createContext } from 'react' export const ThemeContext = createContext({}) export default function ThemeProvider({ children, }: { children: React ReactNode }) { return ThemeContext",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_24"
        },
        {
          "content": "Provider value=\"dark\"{children}/ThemeContext Provider } Then, import it into a Server Component (e g layout): app/layout tsxTypeScriptJavaScriptTypeScriptimport ThemeProvider from ' /theme-provider' export default function RootLayout({ children, }: { children: React",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_25"
        },
        {
          "content": "ReactNode }) { return ( html body ThemeProvider{children}/ThemeProvider /body /html ) } Your Server Component will now be able to directly render your provider, and all other Client Components throughout your app will be able to consume this context Good to know: You should render providers as deep as possible in the tree  notice how ThemeProvider only wraps {children} instead of the entire html document This makes it easier for Next js to optimize the static parts of your Server Components",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_26"
        },
        {
          "content": "Third-party components When using a third-party component that relies on client-only features, you can wrap it in a Client Component to ensure it works as expected For example, the Carousel / can be imported from the acme-carousel package This component uses useState, but it doesn't yet have the \"use client\" directive If you use Carousel / within a Client Component, it will work as expected: app/gallery",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_27"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScript'use client' import { useState } from 'react' import { Carousel } from 'acme-carousel' export default function Gallery() { const [isOpen, setIsOpen] = useState(false) return ( div button onClick={() = setIsOpen(true)}View pictures/button {/* Works, since Carousel is used within a Client Component */} {isOpen  Carousel /} /div ) } However, if you try to use it directly within a Server Component, you'll see an error This is because Next",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_28"
        },
        {
          "content": "js doesn't know Carousel / is using client-only features To fix this, you can wrap third-party components that rely on client-only features in your own Client Components: app/carousel tsxTypeScriptJavaScriptTypeScript'use client' import { Carousel } from 'acme-carousel' export default Carousel Now, you can use Carousel / directly within a Server Component: app/page tsxTypeScriptJavaScriptTypeScriptimport Carousel from '",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_29"
        },
        {
          "content": "/carousel' export default function Page() { return ( div pView pictures/p {/* Works, since Carousel is a Client Component */} Carousel / /div ) } Advice for Library Authors If youre building a component library, add the \"use client\" directive to entry points that rely on client-only features This lets your users import components into Server Components without needing to create wrappers It's worth noting some bundlers might strip out \"use client\" directives",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_30"
        },
        {
          "content": "You can find an example of how to configure esbuild to include the \"use client\" directive in the React Wrap Balancer and Vercel Analytics repositories Preventing environment poisoning JavaScript modules can be shared between both Server and Client Components modules This means it's possible to accidentally import server-only code into the client For example, consider the following function: lib/data",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_31"
        },
        {
          "content": "tsTypeScriptJavaScriptTypeScriptexport async function getData() { const res = await fetch('https://external-service com/data', { headers: { authorization: process env API_KEY, }, }) return res json() } This function contains an API_KEY that should never be exposed to the client In Next js, only environment variables prefixed with NEXT_PUBLIC_ are included in the client bundle If variables are not prefixed, Next js replaces them with an empty string",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_32"
        },
        {
          "content": "As a result, even though getData() can be imported and executed on the client, it won't work as expected To prevent accidental usage in Client Components, you can use the server-only package Then, import the package into a file that contains server-only code: lib/data jsimport 'server-only' export async function getData() { const res = await fetch('https://external-service com/data', { headers: { authorization: process env API_KEY, }, }) return res",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_33"
        },
        {
          "content": "json() } Now, if you try to import the module into a Client Component, there will be a build-time error The corresponding client-only package can be used to mark modules that contain client-only logic like code that accesses the window object In Next js, installing server-only or client-only is optional However, if your linting rules flag extraneous dependencies, you may install them to avoid issues pnpmnpmyarnbunTerminalpnpm add server-only Next",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_34"
        },
        {
          "content": "js handles server-only and client-only imports internally to provide clearer error messages when a module is used in the wrong environment The contents of these packages from NPM are not used by Next js Next js also provides its own type declarations for server-only and client-only, for TypeScript configurations where noUncheckedSideEffectImports is active Next StepsLearn more about the APIs mentioned in this page",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_35"
        },
        {
          "content": "use clientLearn how to use the use client directive to render a component on the client PreviousLinking and NavigatingNextPartial PrerenderingWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/server-and-client-components#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_36"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
      "title": "Getting Started: Partial Prerendering | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow does Partial Prerendering work?Static RenderingDynamic RenderingSuspenseStreamingEnabling Partial PrerenderingExamplesDynamic APIsPassing dynamic propsNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedPartial PrerenderingPartial PrerenderingThis feature is currently experimental and subject to change, it's not recommended for production. Try it out and share your feedback on GitHub.Partial Prerendering (PPR) is a rendering strategy that allows you to combine static and dynamic content in the same route. This improves the initial page performance while still supporting personalized, dynamic data. When a user visits a route: The server sends a shell containing the static content, ensuring a fast initial load. The shell leaves holes for the dynamic content that will load in asynchronously. The dynamic holes are streamed in parallel, reducing the overall load time of the page.  Watch: Why PPR and how it works  YouTube (10 minutes). How does Partial Prerendering work? To understand Partial Prerendering, it helps to be familiar with the rendering strategies available in Next.js. Static Rendering With Static Rendering, HTML is generated ahead of timeeither at build time or through revalidation. The result is cached and shared across users and requests. In Partial Prerendering, Next.js prerenders a static shell for a route. This can include the layout and any other components that don't depend on request-time data. Dynamic Rendering With Dynamic Rendering, HTML is generated at request time. This allows you to serve personalized content based on request-time data. A component becomes dynamic if it uses the following APIs: cookies headers connection draftMode searchParams prop unstable_noStore fetch with { cache: 'no-store' } In Partial Prerendering, using these APIs throws a special React error that informs Next.js the component cannot be statically rendered, causing a build error. You can use a Suspense boundary to wrap your component to defer rendering until runtime. Suspense React Suspense is used to defer rendering parts of your application until some condition is met. In Partial Prerendering, Suspense is used to mark dynamic boundaries in your component tree. At build time, Next.js prerenders the static content and the fallback UI. The dynamic content is postponed until the user requests the route. Wrapping a component in Suspense doesn't make the component itself dynamic (your API usage does), but rather Suspense is used as a boundary that encapsulates dynamic content and enable streaming app/page.jsimport { Suspense } from 'react' import StaticComponent from './StaticComponent' import DynamicComponent from './DynamicComponent' import Fallback from './Fallback' export const experimental_ppr = true export default function Page() { return (  StaticComponent / Suspense fallback={Fallback /} DynamicComponent / /Suspense / ) } Streaming Streaming splits the route into chunks and progressively streams them to the client as they become ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering. In Partial Prerendering, dynamic components wrapped in Suspense start streaming from the server in parallel. To reduce network overhead, the full responseincluding static HTML and streamed dynamic partsis sent in a single HTTP request. This avoids extra roundtrips and improves both initial load and overall performance. Enabling Partial Prerendering You can enable PPR by adding the ppr option to your next.config.ts file: next.config.tsTypeScriptJavaScriptTypeScriptimport type { NextConfig } from 'next' const nextConfig: NextConfig = { experimental: { ppr: 'incremental', }, } export default nextConfig The 'incremental' value allows you to adopt PPR for specific routes: /app/dashboard/layout.tsxexport const experimental_ppr = true export default function Layout({ children }: { children: React.ReactNode }) { // ... } /app/dashboard/layout.jsexport const experimental_ppr = true export default function Layout({ children }) { // ... } Routes that don't have experimental_ppr will default to false and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route. Good to know: experimental_ppr will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route. To disable PPR for children segments, you can set experimental_ppr to false in the child segment. Examples Dynamic APIs When using Dynamic APIs that require looking at the incoming request, Next.js will opt into dynamic rendering for the route. To continue using PPR, wrap the component with Suspense. For example, the User / component is dynamic because it uses the cookies API: app/user.tsxTypeScriptJavaScriptTypeScriptimport { cookies } from 'next/headers' export async function User() { const session = (await cookies()).get('session')?.value return '...' } The User / component will be streamed while any other content inside Page / will be prerendered and become part of the static shell. app/page.tsxTypeScriptJavaScriptTypeScriptimport { Suspense } from 'react' import { User, AvatarSkeleton } from './user' export const experimental_ppr = true export default function Page() { return ( section h1This will be prerendered/h1 Suspense fallback={AvatarSkeleton /} User / /Suspense /section ) } Passing dynamic props Components only opt into dynamic rendering when the value is accessed. For example, if you are reading searchParams from a Page / component, you can forward this value to another component as a prop: app/page.tsxTypeScriptJavaScriptTypeScriptimport { Table, TableSkeleton } from './table' import { Suspense } from 'react' export default function Page({ searchParams, }: { searchParams: Promise{ sort: string } }) { return ( section h1This will be prerendered/h1 Suspense fallback={TableSkeleton /} Table searchParams={searchParams} / /Suspense /section ) } Inside of the table component, accessing the value from searchParams will make the component dynamic while the rest of the page will be prerendered. app/table.tsxTypeScriptJavaScriptTypeScriptexport async function Table({ searchParams, }: { searchParams: Promise{ sort: string } }) { const sort = (await searchParams).sort === 'true' return '...' } Next StepsLearn more about the config option for Partial Prerendering.pprLearn how to enable Partial Prerendering in Next.js.PreviousServer and Client ComponentsNextFetching DataWas this helpful? supported.Send",
      "code_blocks": [
        "searchParams",
        "unstable_noStore",
        "{ cache: 'no-store' }",
        "import { Suspense } from 'react'\nimport StaticComponent from './StaticComponent'\nimport DynamicComponent from './DynamicComponent'\nimport Fallback from './Fallback'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n    </>\n  )\n}",
        "import { Suspense } from 'react'\nimport StaticComponent from './StaticComponent'\nimport DynamicComponent from './DynamicComponent'\nimport Fallback from './Fallback'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n    </>\n  )\n}",
        "next.config.ts",
        "import type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n \nexport default nextConfig",
        "import type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n \nexport default nextConfig",
        "'incremental'",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  // ...\n}",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  // ...\n}",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }) {\n  // ...\n}",
        "export const experimental_ppr = true\n \nexport default function Layout({ children }) {\n  // ...\n}",
        "experimental_ppr",
        "experimental_ppr",
        "experimental_ppr",
        "import { cookies } from 'next/headers'\n \nexport async function User() {\n  const session = (await cookies()).get('session')?.value\n  return '...'\n}",
        "import { cookies } from 'next/headers'\n \nexport async function User() {\n  const session = (await cookies()).get('session')?.value\n  return '...'\n}",
        "import { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}",
        "import { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}",
        "searchParams",
        "import { Table, TableSkeleton } from './table'\nimport { Suspense } from 'react'\n \nexport default function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<TableSkeleton />}>\n        <Table searchParams={searchParams} />\n      </Suspense>\n    </section>\n  )\n}",
        "import { Table, TableSkeleton } from './table'\nimport { Suspense } from 'react'\n \nexport default function Page({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<TableSkeleton />}>\n        <Table searchParams={searchParams} />\n      </Suspense>\n    </section>\n  )\n}",
        "searchParams",
        "export async function Table({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  const sort = (await searchParams).sort === 'true'\n  return '...'\n}",
        "export async function Table({\n  searchParams,\n}: {\n  searchParams: Promise<{ sort: string }>\n}) {\n  const sort = (await searchParams).sort === 'true'\n  return '...'\n}"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageHow does Partial Prerendering work Static RenderingDynamic RenderingSuspenseStreamingEnabling Partial PrerenderingExamplesDynamic APIsPassing dynamic propsNext StepsEdit this page on GitHub Scroll to top App RouterGetting StartedPartial PrerenderingPartial PrerenderingThis feature is currently experimental and subject to change, it's not recommended for production Try it out and share your feedback on GitHub",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Partial Prerendering (PPR) is a rendering strategy that allows you to combine static and dynamic content in the same route This improves the initial page performance while still supporting personalized, dynamic data When a user visits a route: The server sends a shell containing the static content, ensuring a fast initial load The shell leaves holes for the dynamic content that will load in asynchronously The dynamic holes are streamed in parallel, reducing the overall load time of the page",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "Watch: Why PPR and how it works  YouTube (10 minutes) How does Partial Prerendering work To understand Partial Prerendering, it helps to be familiar with the rendering strategies available in Next js Static Rendering With Static Rendering, HTML is generated ahead of timeeither at build time or through revalidation The result is cached and shared across users and requests In Partial Prerendering, Next js prerenders a static shell for a route",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "This can include the layout and any other components that don't depend on request-time data Dynamic Rendering With Dynamic Rendering, HTML is generated at request time This allows you to serve personalized content based on request-time data A component becomes dynamic if it uses the following APIs: cookies headers connection draftMode searchParams prop unstable_noStore fetch with { cache: 'no-store' } In Partial Prerendering, using these APIs throws a special React error that informs Next",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js the component cannot be statically rendered, causing a build error You can use a Suspense boundary to wrap your component to defer rendering until runtime Suspense React Suspense is used to defer rendering parts of your application until some condition is met In Partial Prerendering, Suspense is used to mark dynamic boundaries in your component tree At build time, Next js prerenders the static content and the fallback UI The dynamic content is postponed until the user requests the route",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "Wrapping a component in Suspense doesn't make the component itself dynamic (your API usage does), but rather Suspense is used as a boundary that encapsulates dynamic content and enable streaming app/page jsimport { Suspense } from 'react' import StaticComponent from ' /StaticComponent' import DynamicComponent from ' /DynamicComponent' import Fallback from '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "/Fallback' export const experimental_ppr = true export default function Page() { return (  StaticComponent / Suspense fallback={Fallback /} DynamicComponent / /Suspense / ) } Streaming Streaming splits the route into chunks and progressively streams them to the client as they become ready This allows the user to see parts of the page immediately, before the entire content has finished rendering",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "In Partial Prerendering, dynamic components wrapped in Suspense start streaming from the server in parallel To reduce network overhead, the full responseincluding static HTML and streamed dynamic partsis sent in a single HTTP request This avoids extra roundtrips and improves both initial load and overall performance Enabling Partial Prerendering You can enable PPR by adding the ppr option to your next config ts file: next config",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "tsTypeScriptJavaScriptTypeScriptimport type { NextConfig } from 'next' const nextConfig: NextConfig = { experimental: { ppr: 'incremental', }, } export default nextConfig The 'incremental' value allows you to adopt PPR for specific routes: /app/dashboard/layout tsxexport const experimental_ppr = true export default function Layout({ children }: { children: React ReactNode }) { // } /app/dashboard/layout jsexport const experimental_ppr = true export default function Layout({ children }) { //",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        },
        {
          "content": "} Routes that don't have experimental_ppr will default to false and will not be prerendered using PPR You need to explicitly opt-in to PPR for each route Good to know: experimental_ppr will apply to all children of the route segment, including nested layouts and pages You don't have to add it to every file, only the top segment of a route To disable PPR for children segments, you can set experimental_ppr to false in the child segment",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_16"
        },
        {
          "content": "Examples Dynamic APIs When using Dynamic APIs that require looking at the incoming request, Next js will opt into dynamic rendering for the route To continue using PPR, wrap the component with Suspense For example, the User / component is dynamic because it uses the cookies API: app/user tsxTypeScriptJavaScriptTypeScriptimport { cookies } from 'next/headers' export async function User() { const session = (await cookies()) get('session') value return '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_17"
        },
        {
          "content": "' } The User / component will be streamed while any other content inside Page / will be prerendered and become part of the static shell app/page tsxTypeScriptJavaScriptTypeScriptimport { Suspense } from 'react' import { User, AvatarSkeleton } from '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_18"
        },
        {
          "content": "/user' export const experimental_ppr = true export default function Page() { return ( section h1This will be prerendered/h1 Suspense fallback={AvatarSkeleton /} User / /Suspense /section ) } Passing dynamic props Components only opt into dynamic rendering when the value is accessed For example, if you are reading searchParams from a Page / component, you can forward this value to another component as a prop: app/page tsxTypeScriptJavaScriptTypeScriptimport { Table, TableSkeleton } from '",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_19"
        },
        {
          "content": "/table' import { Suspense } from 'react' export default function Page({ searchParams, }: { searchParams: Promise{ sort: string } }) { return ( section h1This will be prerendered/h1 Suspense fallback={TableSkeleton /} Table searchParams={searchParams} / /Suspense /section ) } Inside of the table component, accessing the value from searchParams will make the component dynamic while the rest of the page will be prerendered app/table",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_20"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptexport async function Table({ searchParams, }: { searchParams: Promise{ sort: string } }) { const sort = (await searchParams) sort === 'true' return ' ' } Next StepsLearn more about the config option for Partial Prerendering pprLearn how to enable Partial Prerendering in Next js PreviousServer and Client ComponentsNextFetching DataWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/getting-started/partial-prerendering#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_21"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/react-foundations#geist-skip-nav",
      "title": "React Foundations | Next.js",
      "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next.js, it helps to be familiar with JavaScript, React, and related web development concepts. But JavaScript and React are vast topics. How do you know when you're ready to start using Next.js? Welcome to the React Foundations course! This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next.js. You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next.js. Each section builds on the previous one, so you can choose where to start depending on what you already know. Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React. If you're already familiar with React, you can skip to the From React to Next.js chapter or take Dashboard App course. System requirements Before you start this course, make sure you have the following installed: Node.js 20.12.0 or later installed. Operating systems: macOS, Windows (including WSL), or Linux. VSCode or another text editor of your choice. Join the conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: About React and Next.jsLearn what React and Next.js are, and how they can help you build modern web applications.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next js, it helps to be familiar with JavaScript, React, and related web development concepts But JavaScript and React are vast topics How do you know when you're ready to start using Next js Welcome to the React Foundations course This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next js",
          "url": "https://nextjs.org/learn/react-foundations#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next js Each section builds on the previous one, so you can choose where to start depending on what you already know Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React If you're already familiar with React, you can skip to the From React to Next js chapter or take Dashboard App course",
          "url": "https://nextjs.org/learn/react-foundations#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "System requirements Before you start this course, make sure you have the following installed: Node js 20 12 0 or later installed Operating systems: macOS, Windows (including WSL), or Linux VSCode or another text editor of your choice Join the conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Ready to get started Now that you've been introduced to the course, let's dive in Next Up1: About React and Next",
          "url": "https://nextjs.org/learn/react-foundations#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "jsLearn what React and Next js are, and how they can help you build modern web applications Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/react-foundations#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/api/auth/authorize?slug=react-foundations",
      "title": "Authorize App",
      "content": "Continue with VercelUse your existing Vercel account to sign in to Next.js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account? Sign Up",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Continue with VercelUse your existing Vercel account to sign in to Next js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account Sign Up",
          "url": "https://nextjs.org/api/auth/authorize?slug=react-foundations",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/react-foundations#prerequisite-knowledge",
      "title": "React Foundations | Next.js",
      "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next.js, it helps to be familiar with JavaScript, React, and related web development concepts. But JavaScript and React are vast topics. How do you know when you're ready to start using Next.js? Welcome to the React Foundations course! This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next.js. You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next.js. Each section builds on the previous one, so you can choose where to start depending on what you already know. Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React. If you're already familiar with React, you can skip to the From React to Next.js chapter or take Dashboard App course. System requirements Before you start this course, make sure you have the following installed: Node.js 20.12.0 or later installed. Operating systems: macOS, Windows (including WSL), or Linux. VSCode or another text editor of your choice. Join the conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: About React and Next.jsLearn what React and Next.js are, and how they can help you build modern web applications.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next js, it helps to be familiar with JavaScript, React, and related web development concepts But JavaScript and React are vast topics How do you know when you're ready to start using Next js Welcome to the React Foundations course This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next js",
          "url": "https://nextjs.org/learn/react-foundations#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next js Each section builds on the previous one, so you can choose where to start depending on what you already know Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React If you're already familiar with React, you can skip to the From React to Next js chapter or take Dashboard App course",
          "url": "https://nextjs.org/learn/react-foundations#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "System requirements Before you start this course, make sure you have the following installed: Node js 20 12 0 or later installed Operating systems: macOS, Windows (including WSL), or Linux VSCode or another text editor of your choice Join the conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Ready to get started Now that you've been introduced to the course, let's dive in Next Up1: About React and Next",
          "url": "https://nextjs.org/learn/react-foundations#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "jsLearn what React and Next js are, and how they can help you build modern web applications Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/react-foundations#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
      "title": "React Foundations: From React to Next.js | Next.js",
      "content": "Sign inSign in to save progress8Chapter 8From React to Next.jsSo far, we explored how you can get started with React. This is what the final code looked like. If you're starting from here, paste this code into an index.html file in your code editor. index.htmlhtml body div id=\"app\"/div script src=\"https://unpkg.com/react18/umd/react.development.js\"/script script src=\"https://unpkg.com/react-dom18/umd/react-dom.development.js\"/script script src=\"https://unpkg.com/babel/standalone/babel.min.js\"/script script type=\"text/jsx\" const app = document.getElementById(\"app\") function Header({ title }) { return h1{title ? title : \"Default title\"}/h1 } function HomePage() { const names = [\"Ada Lovelace\", \"Grace Hopper\", \"Margaret Hamilton\"] const [likes, setLikes] = React.useState(0) function handleClick() { setLikes(likes + 1) } return ( div Header title=\"Develop. Preview. Ship.\" / ul {names.map((name) = ( li key={name}{name}/li ))} /ul button onClick={handleClick}Like ({likes})/button /div ) } const root = ReactDOM.createRoot(app); root.render(HomePage /); /script /body /html In the last few chapters, you were introduced to three essential React concepts: components, props, and state. Having a strong foundation in these will help you get started building React applications. When it comes to learning React, the best way to learn is to build. You can gradually adopt React by using script and what you've learned so far to add small components to an existing website. However, many developers have found the user and developer experience React enables valuable enough to dive right in and write their whole frontend application in React. From React to Next.js While React excels at building UI, it does take some work to independently build that UI into a fully functioning scalable application. There are also newer React features, like Server and Client Components, that require a framework. The good news is that Next.js handles much of the setup and configuration and has additional features to help you build React applications. Next, we'll migrate the example from React to Next.js, discuss how Next.js works, and introduce you to the differences between Server and Client Components.8You've Completed Chapter 8You're almost there!Next Up9: Installing Next.jsInstall Next.js and refactor your React App to Next.jsStart Chapter 9Was this helpful? supported.Send",
      "code_blocks": [
        "<html>\n  <body>\n    <div id=\"app\"></div>\n \n    <script src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n \n    <script type=\"text/jsx\">\n      const app = document.getElementById(\"app\")\n \n      function Header({ title }) {\n        return <h1>{title ? title : \"Default title\"}</h1>\n      }\n \n      function HomePage() {\n        const names = [\"Ada Lovelace\", \"Grace Hopper\", \"Margaret Hamilton\"]\n \n        const [likes, setLikes] = React.useState(0)\n \n        function handleClick() {\n          setLikes(likes + 1)\n        }\n \n        return (\n          <div>\n            <Header title=\"Develop. Preview. Ship.\" />\n            <ul>\n              {names.map((name) => (\n                <li key={name}>{name}</li>\n              ))}\n            </ul>\n \n            <button onClick={handleClick}>Like ({likes})</button>\n          </div>\n        )\n      }\n \n      const root = ReactDOM.createRoot(app);\n      root.render(<HomePage />);\n    </script>\n  </body>\n</html>",
        "<html>\n  <body>\n    <div id=\"app\"></div>\n \n    <script src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n \n    <script type=\"text/jsx\">\n      const app = document.getElementById(\"app\")\n \n      function Header({ title }) {\n        return <h1>{title ? title : \"Default title\"}</h1>\n      }\n \n      function HomePage() {\n        const names = [\"Ada Lovelace\", \"Grace Hopper\", \"Margaret Hamilton\"]\n \n        const [likes, setLikes] = React.useState(0)\n \n        function handleClick() {\n          setLikes(likes + 1)\n        }\n \n        return (\n          <div>\n            <Header title=\"Develop. Preview. Ship.\" />\n            <ul>\n              {names.map((name) => (\n                <li key={name}>{name}</li>\n              ))}\n            </ul>\n \n            <button onClick={handleClick}>Like ({likes})</button>\n          </div>\n        )\n      }\n \n      const root = ReactDOM.createRoot(app);\n      root.render(<HomePage />);\n    </script>\n  </body>\n</html>"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress8Chapter 8From React to Next jsSo far, we explored how you can get started with React This is what the final code looked like If you're starting from here, paste this code into an index html file in your code editor index htmlhtml body div id=\"app\"/div script src=\"https://unpkg com/react18/umd/react development js\"/script script src=\"https://unpkg com/react-dom18/umd/react-dom development js\"/script script src=\"https://unpkg com/babel/standalone/babel min",
          "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "js\"/script script type=\"text/jsx\" const app = document getElementById(\"app\") function Header({ title }) { return h1{title title : \"Default title\"}/h1 } function HomePage() { const names = [\"Ada Lovelace\", \"Grace Hopper\", \"Margaret Hamilton\"] const [likes, setLikes] = React useState(0) function handleClick() { setLikes(likes + 1) } return ( div Header title=\"Develop Preview Ship \" / ul {names",
          "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "map((name) = ( li key={name}{name}/li ))} /ul button onClick={handleClick}Like ({likes})/button /div ) } const root = ReactDOM createRoot(app); root render(HomePage /); /script /body /html In the last few chapters, you were introduced to three essential React concepts: components, props, and state Having a strong foundation in these will help you get started building React applications When it comes to learning React, the best way to learn is to build",
          "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "You can gradually adopt React by using script and what you've learned so far to add small components to an existing website However, many developers have found the user and developer experience React enables valuable enough to dive right in and write their whole frontend application in React From React to Next js While React excels at building UI, it does take some work to independently build that UI into a fully functioning scalable application",
          "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "There are also newer React features, like Server and Client Components, that require a framework The good news is that Next js handles much of the setup and configuration and has additional features to help you build React applications Next, we'll migrate the example from React to Next js, discuss how Next js works, and introduce you to the differences between Server and Client Components 8You've Completed Chapter 8You're almost there Next Up9: Installing Next jsInstall Next",
          "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "js and refactor your React App to Next jsStart Chapter 9Was this helpful supported Send",
          "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/react-foundations#system-requirements",
      "title": "React Foundations | Next.js",
      "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next.js, it helps to be familiar with JavaScript, React, and related web development concepts. But JavaScript and React are vast topics. How do you know when you're ready to start using Next.js? Welcome to the React Foundations course! This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next.js. You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next.js. Each section builds on the previous one, so you can choose where to start depending on what you already know. Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React. If you're already familiar with React, you can skip to the From React to Next.js chapter or take Dashboard App course. System requirements Before you start this course, make sure you have the following installed: Node.js 20.12.0 or later installed. Operating systems: macOS, Windows (including WSL), or Linux. VSCode or another text editor of your choice. Join the conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: About React and Next.jsLearn what React and Next.js are, and how they can help you build modern web applications.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next js, it helps to be familiar with JavaScript, React, and related web development concepts But JavaScript and React are vast topics How do you know when you're ready to start using Next js Welcome to the React Foundations course This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next js",
          "url": "https://nextjs.org/learn/react-foundations#system-requirements",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next js Each section builds on the previous one, so you can choose where to start depending on what you already know Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React If you're already familiar with React, you can skip to the From React to Next js chapter or take Dashboard App course",
          "url": "https://nextjs.org/learn/react-foundations#system-requirements",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "System requirements Before you start this course, make sure you have the following installed: Node js 20 12 0 or later installed Operating systems: macOS, Windows (including WSL), or Linux VSCode or another text editor of your choice Join the conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Ready to get started Now that you've been introduced to the course, let's dive in Next Up1: About React and Next",
          "url": "https://nextjs.org/learn/react-foundations#system-requirements",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "jsLearn what React and Next js are, and how they can help you build modern web applications Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/react-foundations#system-requirements",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/react-foundations#join-the-conversation",
      "title": "React Foundations | Next.js",
      "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next.js, it helps to be familiar with JavaScript, React, and related web development concepts. But JavaScript and React are vast topics. How do you know when you're ready to start using Next.js? Welcome to the React Foundations course! This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next.js. You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next.js. Each section builds on the previous one, so you can choose where to start depending on what you already know. Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React. If you're already familiar with React, you can skip to the From React to Next.js chapter or take Dashboard App course. System requirements Before you start this course, make sure you have the following installed: Node.js 20.12.0 or later installed. Operating systems: macOS, Windows (including WSL), or Linux. VSCode or another text editor of your choice. Join the conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: About React and Next.jsLearn what React and Next.js are, and how they can help you build modern web applications.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressReact FoundationsTo effectively learn Next js, it helps to be familiar with JavaScript, React, and related web development concepts But JavaScript and React are vast topics How do you know when you're ready to start using Next js Welcome to the React Foundations course This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next js",
          "url": "https://nextjs.org/learn/react-foundations#join-the-conversation",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next js Each section builds on the previous one, so you can choose where to start depending on what you already know Prerequisite knowledge This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React If you're already familiar with React, you can skip to the From React to Next js chapter or take Dashboard App course",
          "url": "https://nextjs.org/learn/react-foundations#join-the-conversation",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "System requirements Before you start this course, make sure you have the following installed: Node js 20 12 0 or later installed Operating systems: macOS, Windows (including WSL), or Linux VSCode or another text editor of your choice Join the conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Ready to get started Now that you've been introduced to the course, let's dive in Next Up1: About React and Next",
          "url": "https://nextjs.org/learn/react-foundations#join-the-conversation",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "jsLearn what React and Next js are, and how they can help you build modern web applications Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/react-foundations#join-the-conversation",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
      "title": "Pages Router | Next.js",
      "content": "Sign inSign in to save progressPages Router New App Router Course: You're currently viewing the Pages Router course. View the new App Router course here. To build a complete web application with React from scratch, there are many important details you need to consider: Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel. You need to do production optimizations such as code splitting. You might want to statically pre-render some pages for performance and SEO. You might also want to use server-side rendering or client-side rendering. You might have to write some server-side code to connect your React app to your data store. A framework can solve these problems. But such a framework must have the right level of abstraction  otherwise it wont be very useful. It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code. Next.js: The React Framework Enter Next.js, the React Framework. Next.js provides a solution to all of the above problems. But more importantly, it puts you and your team in the pit of success when building React applications. Next.js aims to have best-in-class developer experience and many built-in features, such as: An intuitive page-based routing system (with support for dynamic routes) Pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported on a per-page basis Automatic code splitting for faster page loads Client-side routing with optimized prefetching Built-in CSS and Sass support, and support for any CSS-in-JS library Development environment with Fast Refresh support API routes to build API endpoints with Serverless Functions Fully extendable Next.js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands. About This Tutorial This free interactive course will guide you through how to get started with Next.js. In this tutorial, youll learn Next.js basics by creating a very simple blog app. Heres an example of the final result: https://next-learn-starter.vercel.app (source) This tutorial assumes basic knowledge of JavaScript and React. If youve never written React code, you should go through the official React tutorial first. If youre looking for documentation instead, visit the Next.js documentation. Join the Conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord. Lets get started!Ready to get started?Next Up1: Set up a new Next.js appStart Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressPages Router New App Router Course: You're currently viewing the Pages Router course View the new App Router course here To build a complete web application with React from scratch, there are many important details you need to consider: Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel You need to do production optimizations such as code splitting You might want to statically pre-render some pages for performance and SEO",
          "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You might also want to use server-side rendering or client-side rendering You might have to write some server-side code to connect your React app to your data store A framework can solve these problems But such a framework must have the right level of abstraction  otherwise it wont be very useful It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code Next js: The React Framework Enter Next js, the React Framework Next",
          "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "js provides a solution to all of the above problems But more importantly, it puts you and your team in the pit of success when building React applications Next",
          "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "js aims to have best-in-class developer experience and many built-in features, such as: An intuitive page-based routing system (with support for dynamic routes) Pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported on a per-page basis Automatic code splitting for faster page loads Client-side routing with optimized prefetching Built-in CSS and Sass support, and support for any CSS-in-JS library Development environment with Fast Refresh support API routes to build API endpoints with Serverless Functions Fully extendable Next",
          "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands About This Tutorial This free interactive course will guide you through how to get started with Next js In this tutorial, youll learn Next js basics by creating a very simple blog app Heres an example of the final result: https://next-learn-starter vercel app (source) This tutorial assumes basic knowledge of JavaScript and React",
          "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "If youve never written React code, you should go through the official React tutorial first If youre looking for documentation instead, visit the Next js documentation Join the Conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Lets get started Ready to get started Next Up1: Set up a new Next js appStart Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/pages-router#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/api/auth/authorize?slug=pages-router",
      "title": "Authorize App",
      "content": "Continue with VercelUse your existing Vercel account to sign in to Next.js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account? Sign Up",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Continue with VercelUse your existing Vercel account to sign in to Next js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account Sign Up",
          "url": "https://nextjs.org/api/auth/authorize?slug=pages-router",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
      "title": "Pages Router | Next.js",
      "content": "Sign inSign in to save progressPages Router New App Router Course: You're currently viewing the Pages Router course. View the new App Router course here. To build a complete web application with React from scratch, there are many important details you need to consider: Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel. You need to do production optimizations such as code splitting. You might want to statically pre-render some pages for performance and SEO. You might also want to use server-side rendering or client-side rendering. You might have to write some server-side code to connect your React app to your data store. A framework can solve these problems. But such a framework must have the right level of abstraction  otherwise it wont be very useful. It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code. Next.js: The React Framework Enter Next.js, the React Framework. Next.js provides a solution to all of the above problems. But more importantly, it puts you and your team in the pit of success when building React applications. Next.js aims to have best-in-class developer experience and many built-in features, such as: An intuitive page-based routing system (with support for dynamic routes) Pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported on a per-page basis Automatic code splitting for faster page loads Client-side routing with optimized prefetching Built-in CSS and Sass support, and support for any CSS-in-JS library Development environment with Fast Refresh support API routes to build API endpoints with Serverless Functions Fully extendable Next.js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands. About This Tutorial This free interactive course will guide you through how to get started with Next.js. In this tutorial, youll learn Next.js basics by creating a very simple blog app. Heres an example of the final result: https://next-learn-starter.vercel.app (source) This tutorial assumes basic knowledge of JavaScript and React. If youve never written React code, you should go through the official React tutorial first. If youre looking for documentation instead, visit the Next.js documentation. Join the Conversation If you have questions about anything related to Next.js or this course, you're welcome to ask our community on Discord. Lets get started!Ready to get started?Next Up1: Set up a new Next.js appStart Chapter 1Was this helpful? supported.Send",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Sign inSign in to save progressPages Router New App Router Course: You're currently viewing the Pages Router course View the new App Router course here To build a complete web application with React from scratch, there are many important details you need to consider: Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel You need to do production optimizations such as code splitting You might want to statically pre-render some pages for performance and SEO",
          "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You might also want to use server-side rendering or client-side rendering You might have to write some server-side code to connect your React app to your data store A framework can solve these problems But such a framework must have the right level of abstraction  otherwise it wont be very useful It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code Next js: The React Framework Enter Next js, the React Framework Next",
          "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "js provides a solution to all of the above problems But more importantly, it puts you and your team in the pit of success when building React applications Next",
          "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "js aims to have best-in-class developer experience and many built-in features, such as: An intuitive page-based routing system (with support for dynamic routes) Pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported on a per-page basis Automatic code splitting for faster page loads Client-side routing with optimized prefetching Built-in CSS and Sass support, and support for any CSS-in-JS library Development environment with Fast Refresh support API routes to build API endpoints with Serverless Functions Fully extendable Next",
          "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands About This Tutorial This free interactive course will guide you through how to get started with Next js In this tutorial, youll learn Next js basics by creating a very simple blog app Heres an example of the final result: https://next-learn-starter vercel app (source) This tutorial assumes basic knowledge of JavaScript and React",
          "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "If youve never written React code, you should go through the official React tutorial first If youre looking for documentation instead, visit the Next js documentation Join the Conversation If you have questions about anything related to Next js or this course, you're welcome to ask our community on Discord Lets get started Ready to get started Next Up1: Set up a new Next js appStart Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/pages-router#nextjs-the-react-framework",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/routing/dynamic-routes",
      "title": "File-system conventions: Dynamic Segments | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageConventionCatch-all SegmentsOptional Catch-all SegmentsTypeScriptBehaviorExamplesWith generateStaticParamsNext StepsEdit this page on GitHub Scroll to top API ReferenceFile-system conventionsDynamic SegmentsDynamic Route SegmentsWhen you don't know the exact route segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time. Convention A Dynamic Segment can be created by wrapping a folder's name in square brackets: [folderName]. For example, a blog could include the following route app/blog/[slug]/page.js where [slug] is the Dynamic Segment for blog posts. app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptexport default async function Page({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params return divMy Post: {slug}/div } Dynamic Segments are passed as the params prop to layout, page, route, and generateMetadata functions. RouteExample URLparamsapp/blog/[slug]/page.js/blog/a{ slug: 'a' }app/blog/[slug]/page.js/blog/b{ slug: 'b' }app/blog/[slug]/page.js/blog/c{ slug: 'c' } Catch-all Segments Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...folderName]. For example, app/shop/[...slug]/page.js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on. RouteExample URLparamsapp/shop/[...slug]/page.js/shop/a{ slug: ['a'] }app/shop/[...slug]/page.js/shop/a/b{ slug: ['a', 'b'] }app/shop/[...slug]/page.js/shop/a/b/c{ slug: ['a', 'b', 'c'] } Optional Catch-all Segments Catch-all Segments can be made optional by including the parameter in double square brackets: [[...folderName]]. For example, app/shop/[[...slug]]/page.js will also match /shop, in addition to /shop/clothes, /shop/clothes/tops, /shop/clothes/tops/t-shirts. The difference between catch-all and optional catch-all segments is that with optional, the route without the parameter is also matched (/shop in the example above). RouteExample URLparamsapp/shop/[[...slug]]/page.js/shop{ slug: undefined }app/shop/[[...slug]]/page.js/shop/a{ slug: ['a'] }app/shop/[[...slug]]/page.js/shop/a/b{ slug: ['a', 'b'] }app/shop/[[...slug]]/page.js/shop/a/b/c{ slug: ['a', 'b', 'c'] } TypeScript When using TypeScript, you can add types for params depending on your configured route segment. Routeparams Type Definitionapp/blog/[slug]/page.js{ slug: string }app/shop/[...slug]/page.js{ slug: string[] }app/shop/[[...slug]]/page.js{ slug?: string[] }app/[categoryId]/[itemId]/page.js{ categoryId: string, itemId: string } Behavior Since the params prop is a promise. You must use async/await or React's use function to access the values. In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future. Examples With generateStaticParams The generateStaticParams function can be used to statically generate routes at build time instead of on-demand at request time. app/blog/[slug]/page.tsxTypeScriptJavaScriptTypeScriptexport async function generateStaticParams() { const posts = await fetch('https://.../posts').then((res) = res.json()) return posts.map((post) = ({ slug: post.slug, })) } When using fetch inside the generateStaticParams function, the requests are automatically deduplicated. This avoids multiple network calls for the same data Layouts, Pages, and other generateStaticParams functions, speeding up build time.Next StepsFor more information on what to do next, we recommend the following sectionsgenerateStaticParamsAPI reference for the generateStaticParams function.Previousdefault.jsNexterror.jsWas this helpful? supported.Send",
      "code_blocks": [
        "[folderName]",
        "app/blog/[slug]/page.js",
        "export default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  return <div>My Post: {slug}</div>\n}",
        "export default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  return <div>My Post: {slug}</div>\n}",
        "generateMetadata",
        "app/blog/[slug]/page.js",
        "{ slug: 'a' }",
        "app/blog/[slug]/page.js",
        "{ slug: 'b' }",
        "app/blog/[slug]/page.js",
        "{ slug: 'c' }",
        "[...folderName]",
        "app/shop/[...slug]/page.js",
        "/shop/clothes",
        "/shop/clothes/tops",
        "/shop/clothes/tops/t-shirts",
        "app/shop/[...slug]/page.js",
        "{ slug: ['a'] }",
        "app/shop/[...slug]/page.js",
        "{ slug: ['a', 'b'] }",
        "app/shop/[...slug]/page.js",
        "/shop/a/b/c",
        "{ slug: ['a', 'b', 'c'] }",
        "[[...folderName]]",
        "app/shop/[[...slug]]/page.js",
        "/shop/clothes",
        "/shop/clothes/tops",
        "/shop/clothes/tops/t-shirts",
        "app/shop/[[...slug]]/page.js",
        "{ slug: undefined }",
        "app/shop/[[...slug]]/page.js",
        "{ slug: ['a'] }",
        "app/shop/[[...slug]]/page.js",
        "{ slug: ['a', 'b'] }",
        "app/shop/[[...slug]]/page.js",
        "/shop/a/b/c",
        "{ slug: ['a', 'b', 'c'] }",
        "app/blog/[slug]/page.js",
        "{ slug: string }",
        "app/shop/[...slug]/page.js",
        "{ slug: string[] }",
        "app/shop/[[...slug]]/page.js",
        "{ slug?: string[] }",
        "app/[categoryId]/[itemId]/page.js",
        "{ categoryId: string, itemId: string }",
        "generateStaticParams",
        "generateStaticParams",
        "export async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}",
        "export async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}",
        "generateStaticParams",
        "generateStaticParams"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageConventionCatch-all SegmentsOptional Catch-all SegmentsTypeScriptBehaviorExamplesWith generateStaticParamsNext StepsEdit this page on GitHub Scroll to top API ReferenceFile-system conventionsDynamic SegmentsDynamic Route SegmentsWhen you don't know the exact route segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Convention A Dynamic Segment can be created by wrapping a folder's name in square brackets: [folderName] For example, a blog could include the following route app/blog/[slug]/page js where [slug] is the Dynamic Segment for blog posts app/blog/[slug]/page",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "tsxTypeScriptJavaScriptTypeScriptexport default async function Page({ params, }: { params: Promise{ slug: string } }) { const { slug } = await params return divMy Post: {slug}/div } Dynamic Segments are passed as the params prop to layout, page, route, and generateMetadata functions RouteExample URLparamsapp/blog/[slug]/page js/blog/a{ slug: 'a' }app/blog/[slug]/page js/blog/b{ slug: 'b' }app/blog/[slug]/page",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "js/blog/c{ slug: 'c' } Catch-all Segments Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [ folderName] For example, app/shop/[ slug]/page js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on RouteExample URLparamsapp/shop/[ slug]/page js/shop/a{ slug: ['a'] }app/shop/[ slug]/page js/shop/a/b{ slug: ['a', 'b'] }app/shop/[ slug]/page",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js/shop/a/b/c{ slug: ['a', 'b', 'c'] } Optional Catch-all Segments Catch-all Segments can be made optional by including the parameter in double square brackets: [[ folderName]] For example, app/shop/[[ slug]]/page js will also match /shop, in addition to /shop/clothes, /shop/clothes/tops, /shop/clothes/tops/t-shirts The difference between catch-all and optional catch-all segments is that with optional, the route without the parameter is also matched (/shop in the example above)",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "RouteExample URLparamsapp/shop/[[ slug]]/page js/shop{ slug: undefined }app/shop/[[ slug]]/page js/shop/a{ slug: ['a'] }app/shop/[[ slug]]/page js/shop/a/b{ slug: ['a', 'b'] }app/shop/[[ slug]]/page js/shop/a/b/c{ slug: ['a', 'b', 'c'] } TypeScript When using TypeScript, you can add types for params depending on your configured route segment Routeparams Type Definitionapp/blog/[slug]/page js{ slug: string }app/shop/[ slug]/page js{ slug: string[] }app/shop/[[ slug]]/page js{ slug",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": ": string[] }app/[categoryId]/[itemId]/page js{ categoryId: string, itemId: string } Behavior Since the params prop is a promise You must use async/await or React's use function to access the values In version 14 and earlier, params was a synchronous prop To help with backwards compatibility, you can still access it synchronously in Next js 15, but this behavior will be deprecated in the future",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        },
        {
          "content": "Examples With generateStaticParams The generateStaticParams function can be used to statically generate routes at build time instead of on-demand at request time app/blog/[slug]/page tsxTypeScriptJavaScriptTypeScriptexport async function generateStaticParams() { const posts = await fetch('https:// /posts') then((res) = res json()) return posts map((post) = ({ slug: post slug, })) } When using fetch inside the generateStaticParams function, the requests are automatically deduplicated",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_14"
        },
        {
          "content": "This avoids multiple network calls for the same data Layouts, Pages, and other generateStaticParams functions, speeding up build time Next StepsFor more information on what to do next, we recommend the following sectionsgenerateStaticParamsAPI reference for the generateStaticParams function Previousdefault jsNexterror jsWas this helpful supported Send",
          "url": "https://nextjs.org/docs/routing/dynamic-routes",
          "library": "nextjs",
          "chunk_id": "nextjs_15"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
      "title": "App Router | Next.js",
      "content": "Sign inSign in to save progressApp RouterWelcome to the Next.js Foundations course! In this free interactive course, you'll learn the main features of Next.js by building a full-stack web application. What we'll be building For this course, we'll build a financial dashboard that has: A public home page. A login page. Dashboard pages that are protected by authentication. The ability for users to add, edit, and delete invoices. The dashboard will also have an accompanying database, which you'll set up in a later chapter. By the end of the course, you'll have the essential skills needed to start building full-stack Next.js applications. Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next.js. Optimizations: How to optimize images, links, and fonts. Routing: How to create nested layouts and pages using file-system routing. Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming. Search and Pagination: How to implement search and pagination using URL search params. Mutating Data: How to mutate data using React Server Actions, and revalidate the Next.js cache. Error Handling: How to handle general and 404 not found errors. Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility. Authentication: How to add authentication to your application using NextAuth.js and Middleware. Metadata: How to add metadata and prepare your application for social sharing. Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript. If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense. System requirements Before you start this course, make sure your system meets the following requirements: Node.js 18.18.0 or later installed. Download here. Operating systems: macOS, Windows (including WSL), or Linux. In addition, you'll also need a GitHub Account and a Vercel Account. Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: Getting StartedLearn how to create a Next.js application and run your local development server.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [
        "NextAuth.js"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progressApp RouterWelcome to the Next js Foundations course In this free interactive course, you'll learn the main features of Next js by building a full-stack web application What we'll be building For this course, we'll build a financial dashboard that has: A public home page A login page Dashboard pages that are protected by authentication The ability for users to add, edit, and delete invoices",
          "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "The dashboard will also have an accompanying database, which you'll set up in a later chapter By the end of the course, you'll have the essential skills needed to start building full-stack Next js applications Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next js Optimizations: How to optimize images, links, and fonts Routing: How to create nested layouts and pages using file-system routing",
          "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming Search and Pagination: How to implement search and pagination using URL search params Mutating Data: How to mutate data using React Server Actions, and revalidate the Next js cache Error Handling: How to handle general and 404 not found errors Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility",
          "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Authentication: How to add authentication to your application using NextAuth js and Middleware Metadata: How to add metadata and prepare your application for social sharing Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense",
          "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "System requirements Before you start this course, make sure your system meets the following requirements: Node js 18 18 0 or later installed Download here Operating systems: macOS, Windows (including WSL), or Linux In addition, you'll also need a GitHub Account and a Vercel Account Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub Ready to get started",
          "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Now that you've been introduced to the course, let's dive in Next Up1: Getting StartedLearn how to create a Next js application and run your local development server Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/api/auth/authorize?slug=dashboard-app",
      "title": "Authorize App",
      "content": "Continue with VercelUse your existing Vercel account to sign in to Next.js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account? Sign Up",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Continue with VercelUse your existing Vercel account to sign in to Next js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account Sign Up",
          "url": "https://nextjs.org/api/auth/authorize?slug=dashboard-app",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
      "title": "App Router | Next.js",
      "content": "Sign inSign in to save progressApp RouterWelcome to the Next.js Foundations course! In this free interactive course, you'll learn the main features of Next.js by building a full-stack web application. What we'll be building For this course, we'll build a financial dashboard that has: A public home page. A login page. Dashboard pages that are protected by authentication. The ability for users to add, edit, and delete invoices. The dashboard will also have an accompanying database, which you'll set up in a later chapter. By the end of the course, you'll have the essential skills needed to start building full-stack Next.js applications. Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next.js. Optimizations: How to optimize images, links, and fonts. Routing: How to create nested layouts and pages using file-system routing. Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming. Search and Pagination: How to implement search and pagination using URL search params. Mutating Data: How to mutate data using React Server Actions, and revalidate the Next.js cache. Error Handling: How to handle general and 404 not found errors. Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility. Authentication: How to add authentication to your application using NextAuth.js and Middleware. Metadata: How to add metadata and prepare your application for social sharing. Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript. If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense. System requirements Before you start this course, make sure your system meets the following requirements: Node.js 18.18.0 or later installed. Download here. Operating systems: macOS, Windows (including WSL), or Linux. In addition, you'll also need a GitHub Account and a Vercel Account. Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: Getting StartedLearn how to create a Next.js application and run your local development server.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [
        "NextAuth.js"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progressApp RouterWelcome to the Next js Foundations course In this free interactive course, you'll learn the main features of Next js by building a full-stack web application What we'll be building For this course, we'll build a financial dashboard that has: A public home page A login page Dashboard pages that are protected by authentication The ability for users to add, edit, and delete invoices",
          "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "The dashboard will also have an accompanying database, which you'll set up in a later chapter By the end of the course, you'll have the essential skills needed to start building full-stack Next js applications Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next js Optimizations: How to optimize images, links, and fonts Routing: How to create nested layouts and pages using file-system routing",
          "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming Search and Pagination: How to implement search and pagination using URL search params Mutating Data: How to mutate data using React Server Actions, and revalidate the Next js cache Error Handling: How to handle general and 404 not found errors Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility",
          "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Authentication: How to add authentication to your application using NextAuth js and Middleware Metadata: How to add metadata and prepare your application for social sharing Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense",
          "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "System requirements Before you start this course, make sure your system meets the following requirements: Node js 18 18 0 or later installed Download here Operating systems: macOS, Windows (including WSL), or Linux In addition, you'll also need a GitHub Account and a Vercel Account Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub Ready to get started",
          "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Now that you've been introduced to the course, let's dive in Next Up1: Getting StartedLearn how to create a Next js application and run your local development server Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app#what-well-be-building",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
      "title": "App Router: Setting Up Your Database | Next.js",
      "content": "Sign inSign in to save progress6Chapter 6Setting Up Your DatabaseBefore you can continue working on your dashboard, you'll need some data. In this chapter, you'll be setting up a PostgreSQL database from one of Vercel's marketplace integrations. If you're already familiar with PostgreSQL and would prefer to use your own database provider, you can skip this chapter and set it up on your own. Otherwise, let's continue! In this chapter...Here are the topics well coverPush your project to GitHub.Set up a Vercel account and link your GitHub repo for instant previews and deployments.Create and link your project to a Postgres database.Seed the database with initial data. Create a GitHub repository To start, let's push your repository to GitHub if you haven't already. This will make it easier to set up your database and deploy. If you need help setting up your repository, take a look at this guide on GitHub. Good to know: You can also use other git providers like GitLab or Bitbucket. If you're new to GitHub, we recommend the GitHub Desktop App for a simplified development workflow. Create a Vercel account Visit vercel.com/signup to create an account. Choose the free \"hobby\" plan. Select Continue with GitHub to connect your GitHub and Vercel accounts. Connect and deploy your project Next, you'll be taken to this screen where you can select and import the GitHub repository you've just created: Name your project and click Deploy. Hooray!  Your project is now deployed. By connecting your GitHub repository, whenever you push changes to your main branch, Vercel will automatically redeploy your application with no configuration needed. When opening pull requests, you'll also have instant preview URLs which allow you to catch deployment errors early and share a preview of your project with team members for feedback. Create a Postgres database Next, to set up a database, click Continue to Dashboard and select the Storage tab from your project dashboard. Select Create Database. Depending on when your Vercel account was created, you may see options like Neon or Supabase. Choose your preferred provider and click Continue. Choose your region and storage plan, if required. The default region for all Vercel projects is Washington D.C (iad1), and we recommend choosing this if available to reduce latency for data requests. Once connected, navigate to the .env.local tab, click Show secret and Copy Snippet. Make sure you reveal the secrets before copying them. Navigate to your code editor and rename the .env.example file to .env. Paste in the copied contents from Vercel. Important: Go to your .gitignore file and make sure .env is in the ignored files to prevent your database secrets from being exposed when you push to GitHub. Seed your database Now that your database has been created, let's seed it with some initial data. We've included an API you can access in the browser, which will run a seed script to populate the database with an initial set of data. The script uses SQL to create the tables, and the data from placeholder-data.ts file to populate them after they've been created. Ensure your local development server is running with pnpm run dev and navigate to localhost:3000/seed in your browser. When finished, you will see a message \"Database seeded successfully\" in the browser. Once completed, you can delete this file. Troubleshooting: Make sure to reveal your database secrets before copying it into your .env file. The script uses bcrypt to hash the user's password, if bcrypt isn't compatible with your environment, you can update the script to use bcryptjs instead. If you run into any issues while seeding your database and want to run the script again, you can drop any existing tables by running DROP TABLE tablename in your database query interface. See the executing queries section below for more details. But be careful, this command will delete the tables and all their data. It's ok to do this with your example app since you're working with placeholder data, but you shouldn't run this command in a production app. Executing queries Let's execute a query to make sure everything is working as expected. We'll use another Router Handler, app/query/route.ts, to query the database. Inside this file, you'll find a listInvoices() function that has the following SQL query. SELECT invoices.amount, customers.name FROM invoices JOIN customers ON invoices.customer_id = customers.id WHERE invoices.amount = 666; Uncomment the file, remove the Response.json() block, and navigate to localhost:3000/query in your browser. You should see that an invoice amount and name is returned. 6You've Completed Chapter 6With your database now set up and integrated, you can continue building your application.Next Up7: Fetching DataLet's discuss the different ways you can fetch data from your database, including using APIs, SQL, and alternatives.Start Chapter 7Was this helpful? supported.Send",
      "code_blocks": [
        ".env.example",
        "placeholder-data.ts",
        "pnpm run dev",
        "localhost:3000/seed",
        "DROP TABLE tablename",
        "app/query/route.ts",
        "listInvoices()",
        "SELECT invoices.amount, customers.name\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE invoices.amount = 666;",
        "SELECT invoices.amount, customers.name\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE invoices.amount = 666;",
        "Response.json() block",
        "localhost:3000/query"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress6Chapter 6Setting Up Your DatabaseBefore you can continue working on your dashboard, you'll need some data In this chapter, you'll be setting up a PostgreSQL database from one of Vercel's marketplace integrations If you're already familiar with PostgreSQL and would prefer to use your own database provider, you can skip this chapter and set it up on your own Otherwise, let's continue In this chapter Here are the topics well coverPush your project to GitHub",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "Set up a Vercel account and link your GitHub repo for instant previews and deployments Create and link your project to a Postgres database Seed the database with initial data Create a GitHub repository To start, let's push your repository to GitHub if you haven't already This will make it easier to set up your database and deploy If you need help setting up your repository, take a look at this guide on GitHub Good to know: You can also use other git providers like GitLab or Bitbucket",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "If you're new to GitHub, we recommend the GitHub Desktop App for a simplified development workflow Create a Vercel account Visit vercel com/signup to create an account Choose the free \"hobby\" plan Select Continue with GitHub to connect your GitHub and Vercel accounts Connect and deploy your project Next, you'll be taken to this screen where you can select and import the GitHub repository you've just created: Name your project and click Deploy Hooray Your project is now deployed",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "By connecting your GitHub repository, whenever you push changes to your main branch, Vercel will automatically redeploy your application with no configuration needed When opening pull requests, you'll also have instant preview URLs which allow you to catch deployment errors early and share a preview of your project with team members for feedback Create a Postgres database Next, to set up a database, click Continue to Dashboard and select the Storage tab from your project dashboard",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "Select Create Database Depending on when your Vercel account was created, you may see options like Neon or Supabase Choose your preferred provider and click Continue Choose your region and storage plan, if required The default region for all Vercel projects is Washington D C (iad1), and we recommend choosing this if available to reduce latency for data requests Once connected, navigate to the env local tab, click Show secret and Copy Snippet Make sure you reveal the secrets before copying them",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Navigate to your code editor and rename the env example file to env Paste in the copied contents from Vercel Important: Go to your gitignore file and make sure env is in the ignored files to prevent your database secrets from being exposed when you push to GitHub Seed your database Now that your database has been created, let's seed it with some initial data We've included an API you can access in the browser, which will run a seed script to populate the database with an initial set of data",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "The script uses SQL to create the tables, and the data from placeholder-data ts file to populate them after they've been created Ensure your local development server is running with pnpm run dev and navigate to localhost:3000/seed in your browser When finished, you will see a message \"Database seeded successfully\" in the browser Once completed, you can delete this file Troubleshooting: Make sure to reveal your database secrets before copying it into your env file",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "The script uses bcrypt to hash the user's password, if bcrypt isn't compatible with your environment, you can update the script to use bcryptjs instead If you run into any issues while seeding your database and want to run the script again, you can drop any existing tables by running DROP TABLE tablename in your database query interface See the executing queries section below for more details But be careful, this command will delete the tables and all their data",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "It's ok to do this with your example app since you're working with placeholder data, but you shouldn't run this command in a production app Executing queries Let's execute a query to make sure everything is working as expected We'll use another Router Handler, app/query/route ts, to query the database Inside this file, you'll find a listInvoices() function that has the following SQL query SELECT invoices amount, customers name FROM invoices JOIN customers ON invoices customer_id = customers",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "id WHERE invoices amount = 666; Uncomment the file, remove the Response json() block, and navigate to localhost:3000/query in your browser You should see that an invoice amount and name is returned 6You've Completed Chapter 6With your database now set up and integrated, you can continue building your application Next Up7: Fetching DataLet's discuss the different ways you can fetch data from your database, including using APIs, SQL, and alternatives Start Chapter 7Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app#overview",
      "title": "App Router | Next.js",
      "content": "Sign inSign in to save progressApp RouterWelcome to the Next.js Foundations course! In this free interactive course, you'll learn the main features of Next.js by building a full-stack web application. What we'll be building For this course, we'll build a financial dashboard that has: A public home page. A login page. Dashboard pages that are protected by authentication. The ability for users to add, edit, and delete invoices. The dashboard will also have an accompanying database, which you'll set up in a later chapter. By the end of the course, you'll have the essential skills needed to start building full-stack Next.js applications. Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next.js. Optimizations: How to optimize images, links, and fonts. Routing: How to create nested layouts and pages using file-system routing. Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming. Search and Pagination: How to implement search and pagination using URL search params. Mutating Data: How to mutate data using React Server Actions, and revalidate the Next.js cache. Error Handling: How to handle general and 404 not found errors. Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility. Authentication: How to add authentication to your application using NextAuth.js and Middleware. Metadata: How to add metadata and prepare your application for social sharing. Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript. If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense. System requirements Before you start this course, make sure your system meets the following requirements: Node.js 18.18.0 or later installed. Download here. Operating systems: macOS, Windows (including WSL), or Linux. In addition, you'll also need a GitHub Account and a Vercel Account. Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: Getting StartedLearn how to create a Next.js application and run your local development server.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [
        "NextAuth.js"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progressApp RouterWelcome to the Next js Foundations course In this free interactive course, you'll learn the main features of Next js by building a full-stack web application What we'll be building For this course, we'll build a financial dashboard that has: A public home page A login page Dashboard pages that are protected by authentication The ability for users to add, edit, and delete invoices",
          "url": "https://nextjs.org/learn/dashboard-app#overview",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "The dashboard will also have an accompanying database, which you'll set up in a later chapter By the end of the course, you'll have the essential skills needed to start building full-stack Next js applications Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next js Optimizations: How to optimize images, links, and fonts Routing: How to create nested layouts and pages using file-system routing",
          "url": "https://nextjs.org/learn/dashboard-app#overview",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming Search and Pagination: How to implement search and pagination using URL search params Mutating Data: How to mutate data using React Server Actions, and revalidate the Next js cache Error Handling: How to handle general and 404 not found errors Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility",
          "url": "https://nextjs.org/learn/dashboard-app#overview",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Authentication: How to add authentication to your application using NextAuth js and Middleware Metadata: How to add metadata and prepare your application for social sharing Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense",
          "url": "https://nextjs.org/learn/dashboard-app#overview",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "System requirements Before you start this course, make sure your system meets the following requirements: Node js 18 18 0 or later installed Download here Operating systems: macOS, Windows (including WSL), or Linux In addition, you'll also need a GitHub Account and a Vercel Account Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub Ready to get started",
          "url": "https://nextjs.org/learn/dashboard-app#overview",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Now that you've been introduced to the course, let's dive in Next Up1: Getting StartedLearn how to create a Next js application and run your local development server Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app#overview",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
      "title": "App Router | Next.js",
      "content": "Sign inSign in to save progressApp RouterWelcome to the Next.js Foundations course! In this free interactive course, you'll learn the main features of Next.js by building a full-stack web application. What we'll be building For this course, we'll build a financial dashboard that has: A public home page. A login page. Dashboard pages that are protected by authentication. The ability for users to add, edit, and delete invoices. The dashboard will also have an accompanying database, which you'll set up in a later chapter. By the end of the course, you'll have the essential skills needed to start building full-stack Next.js applications. Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next.js. Optimizations: How to optimize images, links, and fonts. Routing: How to create nested layouts and pages using file-system routing. Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming. Search and Pagination: How to implement search and pagination using URL search params. Mutating Data: How to mutate data using React Server Actions, and revalidate the Next.js cache. Error Handling: How to handle general and 404 not found errors. Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility. Authentication: How to add authentication to your application using NextAuth.js and Middleware. Metadata: How to add metadata and prepare your application for social sharing. Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript. If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense. System requirements Before you start this course, make sure your system meets the following requirements: Node.js 18.18.0 or later installed. Download here. Operating systems: macOS, Windows (including WSL), or Linux. In addition, you'll also need a GitHub Account and a Vercel Account. Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub.Ready to get started?Now that you've been introduced to the course, let's dive in.Next Up1: Getting StartedLearn how to create a Next.js application and run your local development server.Start Chapter 1Was this helpful? supported.Send",
      "code_blocks": [
        "NextAuth.js"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progressApp RouterWelcome to the Next js Foundations course In this free interactive course, you'll learn the main features of Next js by building a full-stack web application What we'll be building For this course, we'll build a financial dashboard that has: A public home page A login page Dashboard pages that are protected by authentication The ability for users to add, edit, and delete invoices",
          "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "The dashboard will also have an accompanying database, which you'll set up in a later chapter By the end of the course, you'll have the essential skills needed to start building full-stack Next js applications Overview Here's an overview of features you'll learn about in this course: Styling: The different ways to style your application in Next js Optimizations: How to optimize images, links, and fonts Routing: How to create nested layouts and pages using file-system routing",
          "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "Data Fetching: How to set up a Postgres database on Vercel, and best practices for fetching and streaming Search and Pagination: How to implement search and pagination using URL search params Mutating Data: How to mutate data using React Server Actions, and revalidate the Next js cache Error Handling: How to handle general and 404 not found errors Form Validation and Accessibility: How to do server-side form validation and tips for improving accessibility",
          "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Authentication: How to add authentication to your application using NextAuth js and Middleware Metadata: How to add metadata and prepare your application for social sharing Prerequisite knowledge This course assumes you have a basic understanding of React and JavaScript If you're new to React, we recommend going through our React Foundations course first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense",
          "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "System requirements Before you start this course, make sure your system meets the following requirements: Node js 18 18 0 or later installed Download here Operating systems: macOS, Windows (including WSL), or Linux In addition, you'll also need a GitHub Account and a Vercel Account Join the conversation If you have questions about this course or would like to provide feedback, you can ask our community on Reddit or GitHub Ready to get started",
          "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Now that you've been introduced to the course, let's dive in Next Up1: Getting StartedLearn how to create a Next js application and run your local development server Start Chapter 1Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app#prerequisite-knowledge",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
      "title": "App Router: Getting Started | Next.js",
      "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn. If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next.js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the --example flag with the starter example for this course. Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases. Our goal is to help you focus on learning the main features of Next.js, without having to write all the application code. After installation, open the project in your code editor and navigate to nextjs-dashboard. Terminalcd nextjs-dashboard Let's spend some time exploring the project. Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from. /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions. /app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you. /public: Contains all the static assets for your application, such as images. Config Files: You'll also notice config files such as next.config.ts at the root of your application. Most of these files are created and pre-configured when you start a new project using create-next-app. You will not need to modify them in this course. Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet. Placeholder data When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects. Use a 3rd party service like mockAPI. For this project, we've provided some placeholder data in app/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table: /app/lib/placeholder-data.tsconst invoices = [ { customer_id: customers[0].id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1].id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ... ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data). TypeScript You may also notice most files have a .ts or .tsx suffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape. It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required. For now, take a look at the /app/lib/definitions.ts file. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types: /app/lib/definitions.tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type. // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'. status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount. If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema. Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety. Running the development server Run pnpm i to install the project's packages. Terminalpnpm i Followed by pnpm dev to start the development server. Terminalpnpm dev pnpm dev starts your Next.js development server on port 3000. Let's check to see if it's working. Open http://localhost:3000 on your browser. Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations! You've created a Next.js application using the starter example and ran the development server.Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application.Start Chapter 2Was this helpful? supported.Send",
      "code_blocks": [
        "npm install -g pnpm",
        "npm install -g pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "create-next-app",
        "nextjs-dashboard",
        "cd nextjs-dashboard",
        "cd nextjs-dashboard",
        "next.config.ts",
        "create-next-app",
        "app/lib/placeholder-data.ts",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "/app/lib/definitions.ts",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next js application for you In the command above, you're also using the --example flag with the starter example for this course Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This better reflects real-world development, where you'll likely be working with existing codebases Our goal is to help you focus on learning the main features of Next js, without having to write all the application code After installation, open the project in your code editor and navigate to nextjs-dashboard Terminalcd nextjs-dashboard Let's spend some time exploring the project",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions /app/ui: Contains all the UI components for your application, such as cards, tables, and forms To save time, we've pre-styled these components for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "/public: Contains all the static assets for your application, such as images Config Files: You'll also notice config files such as next config ts at the root of your application Most of these files are created and pre-configured when you start a new project using create-next-app You will not need to modify them in this course Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Placeholder data When you're building user interfaces, it helps to have some placeholder data If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects Use a 3rd party service like mockAPI For this project, we've provided some placeholder data in app/lib/placeholder-data ts Each JavaScript object in the file represents a table in your database For example, for the invoices table: /app/lib/placeholder-data",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "tsconst invoices = [ { customer_id: customers[0] id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1] id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data) TypeScript You may also notice most files have a ts or tsx suffix This is because the project is written in TypeScript",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "We wanted to create a course that reflects the modern web landscape It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required For now, take a look at the /app/lib/definitions ts file Here, we manually define the types that will be returned from the database For example, the invoices table has the following types: /app/lib/definitions",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid' status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema Next js detects if your project uses TypeScript and automatically installs the necessary packages and configuration Next js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Running the development server Run pnpm i to install the project's packages Terminalpnpm i Followed by pnpm dev to start the development server Terminalpnpm dev pnpm dev starts your Next js development server on port 3000 Let's check to see if it's working Open http://localhost:3000 on your browser Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations You've created a Next",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js application using the starter example and ran the development server Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application Start Chapter 2Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/api/auth/authorize?slug=dashboard-app/getting-started",
      "title": "Authorize App",
      "content": "Continue with VercelUse your existing Vercel account to sign in to Next.js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account? Sign Up",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Continue with VercelUse your existing Vercel account to sign in to Next js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account Sign Up",
          "url": "https://nextjs.org/api/auth/authorize?slug=dashboard-app/getting-started",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
      "title": "App Router: Getting Started | Next.js",
      "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn. If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next.js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the --example flag with the starter example for this course. Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases. Our goal is to help you focus on learning the main features of Next.js, without having to write all the application code. After installation, open the project in your code editor and navigate to nextjs-dashboard. Terminalcd nextjs-dashboard Let's spend some time exploring the project. Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from. /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions. /app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you. /public: Contains all the static assets for your application, such as images. Config Files: You'll also notice config files such as next.config.ts at the root of your application. Most of these files are created and pre-configured when you start a new project using create-next-app. You will not need to modify them in this course. Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet. Placeholder data When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects. Use a 3rd party service like mockAPI. For this project, we've provided some placeholder data in app/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table: /app/lib/placeholder-data.tsconst invoices = [ { customer_id: customers[0].id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1].id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ... ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data). TypeScript You may also notice most files have a .ts or .tsx suffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape. It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required. For now, take a look at the /app/lib/definitions.ts file. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types: /app/lib/definitions.tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type. // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'. status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount. If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema. Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety. Running the development server Run pnpm i to install the project's packages. Terminalpnpm i Followed by pnpm dev to start the development server. Terminalpnpm dev pnpm dev starts your Next.js development server on port 3000. Let's check to see if it's working. Open http://localhost:3000 on your browser. Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations! You've created a Next.js application using the starter example and ran the development server.Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application.Start Chapter 2Was this helpful? supported.Send",
      "code_blocks": [
        "npm install -g pnpm",
        "npm install -g pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "create-next-app",
        "nextjs-dashboard",
        "cd nextjs-dashboard",
        "cd nextjs-dashboard",
        "next.config.ts",
        "create-next-app",
        "app/lib/placeholder-data.ts",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "/app/lib/definitions.ts",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next js application for you In the command above, you're also using the --example flag with the starter example for this course Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This better reflects real-world development, where you'll likely be working with existing codebases Our goal is to help you focus on learning the main features of Next js, without having to write all the application code After installation, open the project in your code editor and navigate to nextjs-dashboard Terminalcd nextjs-dashboard Let's spend some time exploring the project",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions /app/ui: Contains all the UI components for your application, such as cards, tables, and forms To save time, we've pre-styled these components for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "/public: Contains all the static assets for your application, such as images Config Files: You'll also notice config files such as next config ts at the root of your application Most of these files are created and pre-configured when you start a new project using create-next-app You will not need to modify them in this course Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Placeholder data When you're building user interfaces, it helps to have some placeholder data If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects Use a 3rd party service like mockAPI For this project, we've provided some placeholder data in app/lib/placeholder-data ts Each JavaScript object in the file represents a table in your database For example, for the invoices table: /app/lib/placeholder-data",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "tsconst invoices = [ { customer_id: customers[0] id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1] id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data) TypeScript You may also notice most files have a ts or tsx suffix This is because the project is written in TypeScript",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "We wanted to create a course that reflects the modern web landscape It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required For now, take a look at the /app/lib/definitions ts file Here, we manually define the types that will be returned from the database For example, the invoices table has the following types: /app/lib/definitions",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid' status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema Next js detects if your project uses TypeScript and automatically installs the necessary packages and configuration Next js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Running the development server Run pnpm i to install the project's packages Terminalpnpm i Followed by pnpm dev to start the development server Terminalpnpm dev pnpm dev starts your Next js development server on port 3000 Let's check to see if it's working Open http://localhost:3000 on your browser Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations You've created a Next",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js application using the starter example and ran the development server Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application Start Chapter 2Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#creating-a-new-project",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
      "title": "CLI: create-next-app | Next.js",
      "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageReferenceExamplesWith the default templateWith an official Next.js exampleWith any public GitHub exampleEdit this page on GitHub Scroll to top API ReferenceCLIcreate-next-appcreate-next-app The create-next-app CLI allow you to create a new Next.js application using the default template or an example from a public GitHub repository. It is the easiest way to get started with Next.js. Basic usage: Terminalnpx create-next-applatest [project-name] [options] Reference The following options are available: OptionsDescription-h or --helpShow all available options-v or --versionOutput the version number--no-*Negate default options. E.g. --no-eslint--ts or --typescriptInitialize as a TypeScript project (default)--js or --javascriptInitialize as a JavaScript project--tailwindInitialize with Tailwind CSS config (default)--eslintInitialize with ESLint config--appInitialize as an App Router project--apiInitialize a project with only route handlers--src-dirInitialize inside a src/ directory--turbopackEnable Turbopack by default for development--import-alias alias-to-configureSpecify import alias to use (default \"/*\")--emptyInitialize an empty project--use-npmExplicitly tell the CLI to bootstrap the application using npm--use-pnpmExplicitly tell the CLI to bootstrap the application using pnpm--use-yarnExplicitly tell the CLI to bootstrap the application using Yarn--use-bunExplicitly tell the CLI to bootstrap the application using Bun-e or --example [name] [github-url]An example to bootstrap the app with--example-path path-to-exampleSpecify the path to the example separately--reset-preferencesExplicitly tell the CLI to reset any stored preferences--skip-installExplicitly tell the CLI to skip installing packages--disable-gitExplicitly tell the CLI to disable git initialization--yesUse previous preferences or defaults for all options Examples With the default template To create a new app using the default template, run the following command in your terminal: Terminalnpx create-next-applatest You will then be asked the following prompts: TerminalWhat is your project named? my-app Would you like to use TypeScript? No / Yes Would you like to use ESLint? No / Yes Would you like to use Tailwind CSS? No / Yes Would you like your code inside a `src/` directory? No / Yes Would you like to use App Router? (recommended) No / Yes Would you like to use Turbopack for `next dev`? No / Yes Would you like to customize the import alias (`/*` by default)? No / Yes Once you've answered the prompts, a new project will be created with your chosen configuration. With an official Next.js example To create a new app using an official Next.js example, use the --example flag. For example: Terminalnpx create-next-applatest --example [example-name] [your-project-name] You can view a list of all available examples along with setup instructions in the Next.js repository. With any public GitHub example To create a new app using any public GitHub example, use the --example option with the GitHub repo's URL. For example: Terminalnpx create-next-applatest --example \"https://github.com/.../\" [your-project-name]PreviousCLINextnext CLIWas this helpful? supported.Send",
      "code_blocks": [
        "create-next-app",
        "npx create-next-app@latest [project-name] [options]",
        "npx create-next-app@latest [project-name] [options]",
        "--no-eslint",
        "--typescript",
        "--javascript",
        "--turbopack",
        "--import-alias <alias-to-configure>",
        "--example [name] [github-url]",
        "--example-path <path-to-example>",
        "--reset-preferences",
        "--skip-install",
        "--disable-git",
        "npx create-next-app@latest",
        "npx create-next-app@latest",
        "What is your project named?  my-app\nWould you like to use TypeScript?  No / Yes\nWould you like to use ESLint?  No / Yes\nWould you like to use Tailwind CSS?  No / Yes\nWould you like your code inside a `src/` directory?  No / Yes\nWould you like to use App Router? (recommended)  No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)?  No / Yes",
        "What is your project named?  my-app\nWould you like to use TypeScript?  No / Yes\nWould you like to use ESLint?  No / Yes\nWould you like to use Tailwind CSS?  No / Yes\nWould you like your code inside a `src/` directory?  No / Yes\nWould you like to use App Router? (recommended)  No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)?  No / Yes",
        "npx create-next-app@latest --example [example-name] [your-project-name]",
        "npx create-next-app@latest --example [example-name] [your-project-name]",
        "npx create-next-app@latest --example \"https://github.com/.../\" [your-project-name]",
        "npx create-next-app@latest --example \"https://github.com/.../\" [your-project-name]"
      ],
      "chunks": [
        {
          "content": "MenuUsing App RouterFeatures available in /appUsing Latest Version15 3",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "jsDynamic Segmentserror jsforbidden jsinstrumentation jsinstrumentation-client jsIntercepting Routeslayout jsloading jsmdx-components jsmiddleware jsnot-found jspage jsParallel Routespublicroute jsRoute GroupsRoute Segment Configsrctemplate jsunauthorized jsMetadata Filesfavicon, icon, and apple-iconmanifest jsonopengraph-image and twitter-imagerobots txtsitemap",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext config",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "js CompilerSupported BrowsersCommunityContribution GuideRspackOn this pageReferenceExamplesWith the default templateWith an official Next js exampleWith any public GitHub exampleEdit this page on GitHub Scroll to top API ReferenceCLIcreate-next-appcreate-next-app The create-next-app CLI allow you to create a new Next js application using the default template or an example from a public GitHub repository It is the easiest way to get started with Next js",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "Basic usage: Terminalnpx create-next-applatest [project-name] [options] Reference The following options are available: OptionsDescription-h or --helpShow all available options-v or --versionOutput the version number--no-*Negate default options E g",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "--no-eslint--ts or --typescriptInitialize as a TypeScript project (default)--js or --javascriptInitialize as a JavaScript project--tailwindInitialize with Tailwind CSS config (default)--eslintInitialize with ESLint config--appInitialize as an App Router project--apiInitialize a project with only route handlers--src-dirInitialize inside a src/ directory--turbopackEnable Turbopack by default for development--import-alias alias-to-configureSpecify import alias to use (default \"/*\")--emptyInitialize an empty project--use-npmExplicitly tell the CLI to bootstrap the application using npm--use-pnpmExplicitly tell the CLI to bootstrap the application using pnpm--use-yarnExplicitly tell the CLI to bootstrap the application using Yarn--use-bunExplicitly tell the CLI to bootstrap the application using Bun-e or --example [name] [github-url]An example to bootstrap the app with--example-path path-to-exampleSpecify the path to the example separately--reset-preferencesExplicitly tell the CLI to reset any stored preferences--skip-installExplicitly tell the CLI to skip installing packages--disable-gitExplicitly tell the CLI to disable git initialization--yesUse previous preferences or defaults for all options Examples With the default template To create a new app using the default template, run the following command in your terminal: Terminalnpx create-next-applatest You will then be asked the following prompts: TerminalWhat is your project named",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "my-app Would you like to use TypeScript No / Yes Would you like to use ESLint No / Yes Would you like to use Tailwind CSS No / Yes Would you like your code inside a `src/` directory No / Yes Would you like to use App Router (recommended) No / Yes Would you like to use Turbopack for `next dev` No / Yes Would you like to customize the import alias (`/*` by default) No / Yes Once you've answered the prompts, a new project will be created with your chosen configuration With an official Next",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js example To create a new app using an official Next js example, use the --example flag For example: Terminalnpx create-next-applatest --example [example-name] [your-project-name] You can view a list of all available examples along with setup instructions in the Next js repository With any public GitHub example To create a new app using any public GitHub example, use the --example option with the GitHub repo's URL For example: Terminalnpx create-next-applatest --example \"https://github com/",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": "/\" [your-project-name]PreviousCLINextnext CLIWas this helpful supported Send",
          "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
      "title": "App Router: Getting Started | Next.js",
      "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn. If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next.js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the --example flag with the starter example for this course. Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases. Our goal is to help you focus on learning the main features of Next.js, without having to write all the application code. After installation, open the project in your code editor and navigate to nextjs-dashboard. Terminalcd nextjs-dashboard Let's spend some time exploring the project. Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from. /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions. /app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you. /public: Contains all the static assets for your application, such as images. Config Files: You'll also notice config files such as next.config.ts at the root of your application. Most of these files are created and pre-configured when you start a new project using create-next-app. You will not need to modify them in this course. Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet. Placeholder data When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects. Use a 3rd party service like mockAPI. For this project, we've provided some placeholder data in app/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table: /app/lib/placeholder-data.tsconst invoices = [ { customer_id: customers[0].id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1].id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ... ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data). TypeScript You may also notice most files have a .ts or .tsx suffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape. It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required. For now, take a look at the /app/lib/definitions.ts file. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types: /app/lib/definitions.tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type. // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'. status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount. If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema. Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety. Running the development server Run pnpm i to install the project's packages. Terminalpnpm i Followed by pnpm dev to start the development server. Terminalpnpm dev pnpm dev starts your Next.js development server on port 3000. Let's check to see if it's working. Open http://localhost:3000 on your browser. Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations! You've created a Next.js application using the starter example and ran the development server.Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application.Start Chapter 2Was this helpful? supported.Send",
      "code_blocks": [
        "npm install -g pnpm",
        "npm install -g pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "create-next-app",
        "nextjs-dashboard",
        "cd nextjs-dashboard",
        "cd nextjs-dashboard",
        "next.config.ts",
        "create-next-app",
        "app/lib/placeholder-data.ts",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "/app/lib/definitions.ts",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next js application for you In the command above, you're also using the --example flag with the starter example for this course Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This better reflects real-world development, where you'll likely be working with existing codebases Our goal is to help you focus on learning the main features of Next js, without having to write all the application code After installation, open the project in your code editor and navigate to nextjs-dashboard Terminalcd nextjs-dashboard Let's spend some time exploring the project",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions /app/ui: Contains all the UI components for your application, such as cards, tables, and forms To save time, we've pre-styled these components for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "/public: Contains all the static assets for your application, such as images Config Files: You'll also notice config files such as next config ts at the root of your application Most of these files are created and pre-configured when you start a new project using create-next-app You will not need to modify them in this course Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Placeholder data When you're building user interfaces, it helps to have some placeholder data If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects Use a 3rd party service like mockAPI For this project, we've provided some placeholder data in app/lib/placeholder-data ts Each JavaScript object in the file represents a table in your database For example, for the invoices table: /app/lib/placeholder-data",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "tsconst invoices = [ { customer_id: customers[0] id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1] id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data) TypeScript You may also notice most files have a ts or tsx suffix This is because the project is written in TypeScript",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "We wanted to create a course that reflects the modern web landscape It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required For now, take a look at the /app/lib/definitions ts file Here, we manually define the types that will be returned from the database For example, the invoices table has the following types: /app/lib/definitions",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid' status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema Next js detects if your project uses TypeScript and automatically installs the necessary packages and configuration Next js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Running the development server Run pnpm i to install the project's packages Terminalpnpm i Followed by pnpm dev to start the development server Terminalpnpm dev pnpm dev starts your Next js development server on port 3000 Let's check to see if it's working Open http://localhost:3000 on your browser Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations You've created a Next",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js application using the starter example and ran the development server Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application Start Chapter 2Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#exploring-the-project",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
      "title": "App Router: Getting Started | Next.js",
      "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn. If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next.js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the --example flag with the starter example for this course. Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases. Our goal is to help you focus on learning the main features of Next.js, without having to write all the application code. After installation, open the project in your code editor and navigate to nextjs-dashboard. Terminalcd nextjs-dashboard Let's spend some time exploring the project. Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from. /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions. /app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you. /public: Contains all the static assets for your application, such as images. Config Files: You'll also notice config files such as next.config.ts at the root of your application. Most of these files are created and pre-configured when you start a new project using create-next-app. You will not need to modify them in this course. Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet. Placeholder data When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects. Use a 3rd party service like mockAPI. For this project, we've provided some placeholder data in app/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table: /app/lib/placeholder-data.tsconst invoices = [ { customer_id: customers[0].id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1].id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ... ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data). TypeScript You may also notice most files have a .ts or .tsx suffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape. It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required. For now, take a look at the /app/lib/definitions.ts file. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types: /app/lib/definitions.tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type. // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'. status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount. If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema. Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety. Running the development server Run pnpm i to install the project's packages. Terminalpnpm i Followed by pnpm dev to start the development server. Terminalpnpm dev pnpm dev starts your Next.js development server on port 3000. Let's check to see if it's working. Open http://localhost:3000 on your browser. Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations! You've created a Next.js application using the starter example and ran the development server.Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application.Start Chapter 2Was this helpful? supported.Send",
      "code_blocks": [
        "npm install -g pnpm",
        "npm install -g pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "create-next-app",
        "nextjs-dashboard",
        "cd nextjs-dashboard",
        "cd nextjs-dashboard",
        "next.config.ts",
        "create-next-app",
        "app/lib/placeholder-data.ts",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "/app/lib/definitions.ts",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next js application for you In the command above, you're also using the --example flag with the starter example for this course Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This better reflects real-world development, where you'll likely be working with existing codebases Our goal is to help you focus on learning the main features of Next js, without having to write all the application code After installation, open the project in your code editor and navigate to nextjs-dashboard Terminalcd nextjs-dashboard Let's spend some time exploring the project",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions /app/ui: Contains all the UI components for your application, such as cards, tables, and forms To save time, we've pre-styled these components for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "/public: Contains all the static assets for your application, such as images Config Files: You'll also notice config files such as next config ts at the root of your application Most of these files are created and pre-configured when you start a new project using create-next-app You will not need to modify them in this course Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Placeholder data When you're building user interfaces, it helps to have some placeholder data If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects Use a 3rd party service like mockAPI For this project, we've provided some placeholder data in app/lib/placeholder-data ts Each JavaScript object in the file represents a table in your database For example, for the invoices table: /app/lib/placeholder-data",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "tsconst invoices = [ { customer_id: customers[0] id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1] id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data) TypeScript You may also notice most files have a ts or tsx suffix This is because the project is written in TypeScript",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "We wanted to create a course that reflects the modern web landscape It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required For now, take a look at the /app/lib/definitions ts file Here, we manually define the types that will be returned from the database For example, the invoices table has the following types: /app/lib/definitions",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid' status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema Next js detects if your project uses TypeScript and automatically installs the necessary packages and configuration Next js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Running the development server Run pnpm i to install the project's packages Terminalpnpm i Followed by pnpm dev to start the development server Terminalpnpm dev pnpm dev starts your Next js development server on port 3000 Let's check to see if it's working Open http://localhost:3000 on your browser Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations You've created a Next",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js application using the starter example and ran the development server Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application Start Chapter 2Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#folder-structure",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
      "title": "App Router: Getting Started | Next.js",
      "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn. If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next.js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the --example flag with the starter example for this course. Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases. Our goal is to help you focus on learning the main features of Next.js, without having to write all the application code. After installation, open the project in your code editor and navigate to nextjs-dashboard. Terminalcd nextjs-dashboard Let's spend some time exploring the project. Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from. /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions. /app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you. /public: Contains all the static assets for your application, such as images. Config Files: You'll also notice config files such as next.config.ts at the root of your application. Most of these files are created and pre-configured when you start a new project using create-next-app. You will not need to modify them in this course. Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet. Placeholder data When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects. Use a 3rd party service like mockAPI. For this project, we've provided some placeholder data in app/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table: /app/lib/placeholder-data.tsconst invoices = [ { customer_id: customers[0].id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1].id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ... ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data). TypeScript You may also notice most files have a .ts or .tsx suffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape. It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required. For now, take a look at the /app/lib/definitions.ts file. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types: /app/lib/definitions.tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type. // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'. status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount. If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema. Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety. Running the development server Run pnpm i to install the project's packages. Terminalpnpm i Followed by pnpm dev to start the development server. Terminalpnpm dev pnpm dev starts your Next.js development server on port 3000. Let's check to see if it's working. Open http://localhost:3000 on your browser. Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations! You've created a Next.js application using the starter example and ran the development server.Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application.Start Chapter 2Was this helpful? supported.Send",
      "code_blocks": [
        "npm install -g pnpm",
        "npm install -g pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "npx create-next-app@latest nextjs-dashboard --example \"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm",
        "create-next-app",
        "nextjs-dashboard",
        "cd nextjs-dashboard",
        "cd nextjs-dashboard",
        "next.config.ts",
        "create-next-app",
        "app/lib/placeholder-data.ts",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "const invoices = [\n  {\n    customer_id: customers[0].id,\n    amount: 15795,\n    status: 'pending',\n    date: '2022-12-06',\n  },\n  {\n    customer_id: customers[1].id,\n    amount: 20348,\n    status: 'pending',\n    date: '2022-11-14',\n  },\n  // ...\n];",
        "/app/lib/definitions.ts",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};",
        "export type Invoice = {\n  id: string;\n  customer_id: string;\n  amount: number;\n  date: string;\n  // In TypeScript, this is called a string union type.\n  // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.\n  status: 'pending' | 'paid';\n};"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress1Chapter 1Getting StartedCreating a new project We recommend using pnpm as your package manager, as it's faster and more efficient than npm or yarn If you don't have pnpm installed, you can install it globally by running: Terminalnpm install -g pnpm To create a Next js app, open your terminal, cd into the folder you'd like to keep your project, and run the following command: Terminalnpx create-next-applatest nextjs-dashboard --example \"https://github",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "com/vercel/next-learn/tree/main/dashboard/starter-example\" --use-pnpm This command uses create-next-app, a Command Line Interface (CLI) tool that sets up a Next js application for you In the command above, you're also using the --example flag with the starter example for this course Exploring the project Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "This better reflects real-world development, where you'll likely be working with existing codebases Our goal is to help you focus on learning the main features of Next js, without having to write all the application code After installation, open the project in your code editor and navigate to nextjs-dashboard Terminalcd nextjs-dashboard Let's spend some time exploring the project",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "Folder structure You'll notice that the project has the following folder structure: /app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from /app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions /app/ui: Contains all the UI components for your application, such as cards, tables, and forms To save time, we've pre-styled these components for you",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "/public: Contains all the static assets for your application, such as images Config Files: You'll also notice config files such as next config ts at the root of your application Most of these files are created and pre-configured when you start a new project using create-next-app You will not need to modify them in this course Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "Placeholder data When you're building user interfaces, it helps to have some placeholder data If a database or API is not yet available, you can: Use placeholder data in JSON format or as JavaScript objects Use a 3rd party service like mockAPI For this project, we've provided some placeholder data in app/lib/placeholder-data ts Each JavaScript object in the file represents a table in your database For example, for the invoices table: /app/lib/placeholder-data",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "tsconst invoices = [ { customer_id: customers[0] id, amount: 15795, status: 'pending', date: '2022-12-06', }, { customer_id: customers[1] id, amount: 20348, status: 'pending', date: '2022-11-14', }, // ]; In the chapter on setting up your database, you'll use this data to seed your database (populate it with some initial data) TypeScript You may also notice most files have a ts or tsx suffix This is because the project is written in TypeScript",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "We wanted to create a course that reflects the modern web landscape It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required For now, take a look at the /app/lib/definitions ts file Here, we manually define the types that will be returned from the database For example, the invoices table has the following types: /app/lib/definitions",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "tsexport type Invoice = { id: string; customer_id: string; amount: number; date: string; // In TypeScript, this is called a string union type // It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid' status: 'pending'  'paid'; }; By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing a string instead of a number to invoice amount",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "If you're a TypeScript developer: We're manually declaring the data types, but for better type-safety, we recommend Prisma or Drizzle, which automatically generates types based on your database schema Next js detects if your project uses TypeScript and automatically installs the necessary packages and configuration Next js also comes with a TypeScript plugin for your code editor, to help with auto-completion and type-safety",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Running the development server Run pnpm i to install the project's packages Terminalpnpm i Followed by pnpm dev to start the development server Terminalpnpm dev pnpm dev starts your Next js development server on port 3000 Let's check to see if it's working Open http://localhost:3000 on your browser Your home page should look like this, which is intentionally unstyled: 1You've Completed Chapter 1Congratulations You've created a Next",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "js application using the starter example and ran the development server Next Up2: CSS StylingLet's work on your home page and discuss the different ways you can style your application Start Chapter 2Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/getting-started#placeholder-data",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
      "title": "App Router: CSS Styling | Next.js",
      "content": "Sign inSign in to save progress2Chapter 2CSS StylingCurrently, your home page doesn't have any styles. Let's look at the different ways you can style your Next.js application. In this chapter...Here are the topics well coverHow to add a global CSS file to your application.Two different ways of styling: Tailwind and CSS modules.How to conditionally add class names with the clsx utility package. Global styles If you look inside the /app/ui folder, you'll see a file called global.css. You can use this file to add CSS rules to all the routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more. You can import global.css in any component in your application, but it's usually good practice to add it to your top-level component. In Next.js, this is the root layout (more on this later). Add global styles to your application by navigating to /app/layout.tsx and importing the global.css file: /app/layout.tsximport '/app/ui/global.css'; export default function RootLayout({ children, }: { children: React.ReactNode; }) { return ( html lang=\"en\" body{children}/body /html ); } With the development server still running, save your changes and preview them in the browser. Your home page should now look like this: But wait a second, you didn't add any CSS rules, where did the styles come from? If you take a look inside global.css, you'll notice some tailwind directives: /app/ui/global.csstailwind base; tailwind components; tailwind utilities; Tailwind Tailwind is a CSS framework that speeds up the development process by allowing you to quickly write utility classes directly in your React code. In Tailwind, you style elements by adding class names. For example, adding \"text-blue-500\" will turn the h1 text blue: h1 className=\"text-blue-500\"I'm blue!/h1 Although the CSS styles are shared globally, each class is singularly applied to each element. This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales. When you use create-next-app to start a new project, Next.js will ask if you want to use Tailwind. If you select yes, Next.js will automatically install the necessary packages and configure Tailwind in your application. If you look at /app/page.tsx, you'll see that we're using Tailwind classes in the example. /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; export default function Page() { return ( // These are Tailwind classes: main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" // ... ) } Don't worry if this is your first time using Tailwind. To save time, we've already styled all the components you'll be using. Let's play with Tailwind! Copy the code below and paste it above the p element in /app/page.tsx: /app/page.tsxdiv className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\" / If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative. CSS Modules CSS Modules allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well. We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules. Inside /app/ui, create a new file called home.module.css and add the following CSS rules: /app/ui/home.module.css.shape { height: 0; width: 0; border-bottom: 30px solid black; border-left: 20px solid transparent; border-right: 20px solid transparent; } Then, inside your /app/page.tsx file import the styles and replace the Tailwind class names from the div you've added with styles.shape: /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import styles from '/app/ui/home.module.css'; export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className={styles.shape} / // ... ) } Save your changes and preview them in the browser. You should see the same shape as before. Tailwind and CSS modules are the two most common ways of styling Next.js applications. Whether you use one or the other is a matter of preference - you can even use both in the same application! Using the clsx library to toggle class names There may be cases where you may need to conditionally style an element based on state or some other condition. clsx is a library that lets you toggle class names easily. We recommend taking a look at documentation for more details, but here's the basic usage: Suppose that you want to create an InvoiceStatus component which accepts status. The status can be 'pending' or 'paid'. If it's 'paid', you want the color to be green. If it's 'pending', you want the color to be gray. You can use clsx to conditionally apply the classes, like this: /app/ui/invoices/status.tsximport clsx from 'clsx'; export default function InvoiceStatus({ status }: { status: string }) { return ( span className={clsx( 'inline-flex items-center rounded-full px-2 py-1 text-sm', { 'bg-gray-100 text-gray-500': status === 'pending', 'bg-green-500 text-white': status === 'paid', }, )}  // ... )} Other styling solutions In addition to the approaches we've discussed, you can also style your Next.js application with: Sass which allows you to import .css and .scss files. CSS-in-JS libraries such as styled-jsx, styled-components, and emotion. Take a look at the CSS documentation for more information.2You've Completed Chapter 2Well done! You've learned about the different ways of styling a Next.js application.Next Up3: Optimizing Fonts and ImagesContinue working on your home page by adding a hero image and a custom font.Start Chapter 3Was this helpful? supported.Send",
      "code_blocks": [
        "/app/layout.tsx",
        "import '@/app/ui/global.css';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}",
        "import '@/app/ui/global.css';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}",
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
        "\"text-blue-500\"",
        "<h1 className=\"text-blue-500\">I'm blue!</h1>",
        "<h1 className=\"text-blue-500\">I'm blue!</h1>",
        "create-next-app",
        "/app/page.tsx",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n \nexport default function Page() {\n  return (\n    // These are Tailwind classes:\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n    // ...\n  )\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n \nexport default function Page() {\n  return (\n    // These are Tailwind classes:\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n    // ...\n  )\n}",
        "/app/page.tsx",
        "<div\n  className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"\n/>",
        "<div\n  className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"\n/>",
        "home.module.css",
        ".shape {\n  height: 0;\n  width: 0;\n  border-bottom: 30px solid black;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n}",
        ".shape {\n  height: 0;\n  width: 0;\n  border-bottom: 30px solid black;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n}",
        "/app/page.tsx",
        "styles.shape",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport styles from '@/app/ui/home.module.css';\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className={styles.shape} />\n    // ...\n  )\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport styles from '@/app/ui/home.module.css';\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className={styles.shape} />\n    // ...\n  )\n}",
        "InvoiceStatus",
        "import clsx from 'clsx';\n \nexport default function InvoiceStatus({ status }: { status: string }) {\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center rounded-full px-2 py-1 text-sm',\n        {\n          'bg-gray-100 text-gray-500': status === 'pending',\n          'bg-green-500 text-white': status === 'paid',\n        },\n      )}\n    >\n    // ...\n)}",
        "import clsx from 'clsx';\n \nexport default function InvoiceStatus({ status }: { status: string }) {\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center rounded-full px-2 py-1 text-sm',\n        {\n          'bg-gray-100 text-gray-500': status === 'pending',\n          'bg-green-500 text-white': status === 'paid',\n        },\n      )}\n    >\n    // ...\n)}"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress2Chapter 2CSS StylingCurrently, your home page doesn't have any styles Let's look at the different ways you can style your Next js application In this chapter Here are the topics well coverHow to add a global CSS file to your application Two different ways of styling: Tailwind and CSS modules How to conditionally add class names with the clsx utility package Global styles If you look inside the /app/ui folder, you'll see a file called global css",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You can use this file to add CSS rules to all the routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more You can import global css in any component in your application, but it's usually good practice to add it to your top-level component In Next js, this is the root layout (more on this later) Add global styles to your application by navigating to /app/layout tsx and importing the global css file: /app/layout tsximport '/app/ui/global",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "css'; export default function RootLayout({ children, }: { children: React ReactNode; }) { return ( html lang=\"en\" body{children}/body /html ); } With the development server still running, save your changes and preview them in the browser Your home page should now look like this: But wait a second, you didn't add any CSS rules, where did the styles come from If you take a look inside global css, you'll notice some tailwind directives: /app/ui/global",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "csstailwind base; tailwind components; tailwind utilities; Tailwind Tailwind is a CSS framework that speeds up the development process by allowing you to quickly write utility classes directly in your React code In Tailwind, you style elements by adding class names For example, adding \"text-blue-500\" will turn the h1 text blue: h1 className=\"text-blue-500\"I'm blue /h1 Although the CSS styles are shared globally, each class is singularly applied to each element",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales When you use create-next-app to start a new project, Next js will ask if you want to use Tailwind If you select yes, Next js will automatically install the necessary packages and configure Tailwind in your application If you look at /app/page tsx, you'll see that we're using Tailwind classes in the example",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "/app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; export default function Page() { return ( // These are Tailwind classes: main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" // ) } Don't worry if this is your first time using Tailwind To save time, we've already styled all the components you'll be using",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "Let's play with Tailwind Copy the code below and paste it above the p element in /app/page tsx: /app/page tsxdiv className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\" / If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "CSS Modules CSS Modules allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules Inside /app/ui, create a new file called home module css and add the following CSS rules: /app/ui/home module css",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "shape { height: 0; width: 0; border-bottom: 30px solid black; border-left: 20px solid transparent; border-right: 20px solid transparent; } Then, inside your /app/page tsx file import the styles and replace the Tailwind class names from the div you've added with styles shape: /app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import styles from '/app/ui/home module",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "css'; export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className={styles shape} / // ) } Save your changes and preview them in the browser You should see the same shape as before Tailwind and CSS modules are the two most common ways of styling Next js applications Whether you use one or the other is a matter of preference - you can even use both in the same application",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Using the clsx library to toggle class names There may be cases where you may need to conditionally style an element based on state or some other condition clsx is a library that lets you toggle class names easily We recommend taking a look at documentation for more details, but here's the basic usage: Suppose that you want to create an InvoiceStatus component which accepts status The status can be 'pending' or 'paid' If it's 'paid', you want the color to be green",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "If it's 'pending', you want the color to be gray You can use clsx to conditionally apply the classes, like this: /app/ui/invoices/status tsximport clsx from 'clsx'; export default function InvoiceStatus({ status }: { status: string }) { return ( span className={clsx( 'inline-flex items-center rounded-full px-2 py-1 text-sm', { 'bg-gray-100 text-gray-500': status === 'pending', 'bg-green-500 text-white': status === 'paid', }, )}  //",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": ")} Other styling solutions In addition to the approaches we've discussed, you can also style your Next js application with: Sass which allows you to import css and scss files CSS-in-JS libraries such as styled-jsx, styled-components, and emotion Take a look at the CSS documentation for more information 2You've Completed Chapter 2Well done You've learned about the different ways of styling a Next js application",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "Next Up3: Optimizing Fonts and ImagesContinue working on your home page by adding a hero image and a custom font Start Chapter 3Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#geist-skip-nav",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/api/auth/authorize?slug=dashboard-app/css-styling",
      "title": "Authorize App",
      "content": "Continue with VercelUse your existing Vercel account to sign in to Next.js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account? Sign Up",
      "code_blocks": [],
      "chunks": [
        {
          "content": "Continue with VercelUse your existing Vercel account to sign in to Next js LearnContinue with Email Continue with Google Continue with GitHubShow other optionsDon't have an account Sign Up",
          "url": "https://nextjs.org/api/auth/authorize?slug=dashboard-app/css-styling",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        }
      ],
      "library": "nextjs"
    },
    {
      "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
      "title": "App Router: CSS Styling | Next.js",
      "content": "Sign inSign in to save progress2Chapter 2CSS StylingCurrently, your home page doesn't have any styles. Let's look at the different ways you can style your Next.js application. In this chapter...Here are the topics well coverHow to add a global CSS file to your application.Two different ways of styling: Tailwind and CSS modules.How to conditionally add class names with the clsx utility package. Global styles If you look inside the /app/ui folder, you'll see a file called global.css. You can use this file to add CSS rules to all the routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more. You can import global.css in any component in your application, but it's usually good practice to add it to your top-level component. In Next.js, this is the root layout (more on this later). Add global styles to your application by navigating to /app/layout.tsx and importing the global.css file: /app/layout.tsximport '/app/ui/global.css'; export default function RootLayout({ children, }: { children: React.ReactNode; }) { return ( html lang=\"en\" body{children}/body /html ); } With the development server still running, save your changes and preview them in the browser. Your home page should now look like this: But wait a second, you didn't add any CSS rules, where did the styles come from? If you take a look inside global.css, you'll notice some tailwind directives: /app/ui/global.csstailwind base; tailwind components; tailwind utilities; Tailwind Tailwind is a CSS framework that speeds up the development process by allowing you to quickly write utility classes directly in your React code. In Tailwind, you style elements by adding class names. For example, adding \"text-blue-500\" will turn the h1 text blue: h1 className=\"text-blue-500\"I'm blue!/h1 Although the CSS styles are shared globally, each class is singularly applied to each element. This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales. When you use create-next-app to start a new project, Next.js will ask if you want to use Tailwind. If you select yes, Next.js will automatically install the necessary packages and configure Tailwind in your application. If you look at /app/page.tsx, you'll see that we're using Tailwind classes in the example. /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; export default function Page() { return ( // These are Tailwind classes: main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" // ... ) } Don't worry if this is your first time using Tailwind. To save time, we've already styled all the components you'll be using. Let's play with Tailwind! Copy the code below and paste it above the p element in /app/page.tsx: /app/page.tsxdiv className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\" / If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative. CSS Modules CSS Modules allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well. We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules. Inside /app/ui, create a new file called home.module.css and add the following CSS rules: /app/ui/home.module.css.shape { height: 0; width: 0; border-bottom: 30px solid black; border-left: 20px solid transparent; border-right: 20px solid transparent; } Then, inside your /app/page.tsx file import the styles and replace the Tailwind class names from the div you've added with styles.shape: /app/page.tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import styles from '/app/ui/home.module.css'; export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className={styles.shape} / // ... ) } Save your changes and preview them in the browser. You should see the same shape as before. Tailwind and CSS modules are the two most common ways of styling Next.js applications. Whether you use one or the other is a matter of preference - you can even use both in the same application! Using the clsx library to toggle class names There may be cases where you may need to conditionally style an element based on state or some other condition. clsx is a library that lets you toggle class names easily. We recommend taking a look at documentation for more details, but here's the basic usage: Suppose that you want to create an InvoiceStatus component which accepts status. The status can be 'pending' or 'paid'. If it's 'paid', you want the color to be green. If it's 'pending', you want the color to be gray. You can use clsx to conditionally apply the classes, like this: /app/ui/invoices/status.tsximport clsx from 'clsx'; export default function InvoiceStatus({ status }: { status: string }) { return ( span className={clsx( 'inline-flex items-center rounded-full px-2 py-1 text-sm', { 'bg-gray-100 text-gray-500': status === 'pending', 'bg-green-500 text-white': status === 'paid', }, )}  // ... )} Other styling solutions In addition to the approaches we've discussed, you can also style your Next.js application with: Sass which allows you to import .css and .scss files. CSS-in-JS libraries such as styled-jsx, styled-components, and emotion. Take a look at the CSS documentation for more information.2You've Completed Chapter 2Well done! You've learned about the different ways of styling a Next.js application.Next Up3: Optimizing Fonts and ImagesContinue working on your home page by adding a hero image and a custom font.Start Chapter 3Was this helpful? supported.Send",
      "code_blocks": [
        "/app/layout.tsx",
        "import '@/app/ui/global.css';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}",
        "import '@/app/ui/global.css';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}",
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
        "\"text-blue-500\"",
        "<h1 className=\"text-blue-500\">I'm blue!</h1>",
        "<h1 className=\"text-blue-500\">I'm blue!</h1>",
        "create-next-app",
        "/app/page.tsx",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n \nexport default function Page() {\n  return (\n    // These are Tailwind classes:\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n    // ...\n  )\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n \nexport default function Page() {\n  return (\n    // These are Tailwind classes:\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">\n    // ...\n  )\n}",
        "/app/page.tsx",
        "<div\n  className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"\n/>",
        "<div\n  className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"\n/>",
        "home.module.css",
        ".shape {\n  height: 0;\n  width: 0;\n  border-bottom: 30px solid black;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n}",
        ".shape {\n  height: 0;\n  width: 0;\n  border-bottom: 30px solid black;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n}",
        "/app/page.tsx",
        "styles.shape",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport styles from '@/app/ui/home.module.css';\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className={styles.shape} />\n    // ...\n  )\n}",
        "import AcmeLogo from '@/app/ui/acme-logo';\nimport { ArrowRightIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport styles from '@/app/ui/home.module.css';\n \nexport default function Page() {\n  return (\n    <main className=\"flex min-h-screen flex-col p-6\">\n      <div className={styles.shape} />\n    // ...\n  )\n}",
        "InvoiceStatus",
        "import clsx from 'clsx';\n \nexport default function InvoiceStatus({ status }: { status: string }) {\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center rounded-full px-2 py-1 text-sm',\n        {\n          'bg-gray-100 text-gray-500': status === 'pending',\n          'bg-green-500 text-white': status === 'paid',\n        },\n      )}\n    >\n    // ...\n)}",
        "import clsx from 'clsx';\n \nexport default function InvoiceStatus({ status }: { status: string }) {\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center rounded-full px-2 py-1 text-sm',\n        {\n          'bg-gray-100 text-gray-500': status === 'pending',\n          'bg-green-500 text-white': status === 'paid',\n        },\n      )}\n    >\n    // ...\n)}"
      ],
      "chunks": [
        {
          "content": "Sign inSign in to save progress2Chapter 2CSS StylingCurrently, your home page doesn't have any styles Let's look at the different ways you can style your Next js application In this chapter Here are the topics well coverHow to add a global CSS file to your application Two different ways of styling: Tailwind and CSS modules How to conditionally add class names with the clsx utility package Global styles If you look inside the /app/ui folder, you'll see a file called global css",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_0"
        },
        {
          "content": "You can use this file to add CSS rules to all the routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more You can import global css in any component in your application, but it's usually good practice to add it to your top-level component In Next js, this is the root layout (more on this later) Add global styles to your application by navigating to /app/layout tsx and importing the global css file: /app/layout tsximport '/app/ui/global",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_1"
        },
        {
          "content": "css'; export default function RootLayout({ children, }: { children: React ReactNode; }) { return ( html lang=\"en\" body{children}/body /html ); } With the development server still running, save your changes and preview them in the browser Your home page should now look like this: But wait a second, you didn't add any CSS rules, where did the styles come from If you take a look inside global css, you'll notice some tailwind directives: /app/ui/global",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_2"
        },
        {
          "content": "csstailwind base; tailwind components; tailwind utilities; Tailwind Tailwind is a CSS framework that speeds up the development process by allowing you to quickly write utility classes directly in your React code In Tailwind, you style elements by adding class names For example, adding \"text-blue-500\" will turn the h1 text blue: h1 className=\"text-blue-500\"I'm blue /h1 Although the CSS styles are shared globally, each class is singularly applied to each element",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_3"
        },
        {
          "content": "This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales When you use create-next-app to start a new project, Next js will ask if you want to use Tailwind If you select yes, Next js will automatically install the necessary packages and configure Tailwind in your application If you look at /app/page tsx, you'll see that we're using Tailwind classes in the example",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_4"
        },
        {
          "content": "/app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; export default function Page() { return ( // These are Tailwind classes: main className=\"flex min-h-screen flex-col p-6\" div className=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\" // ) } Don't worry if this is your first time using Tailwind To save time, we've already styled all the components you'll be using",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_5"
        },
        {
          "content": "Let's play with Tailwind Copy the code below and paste it above the p element in /app/page tsx: /app/page tsxdiv className=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\" / If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_6"
        },
        {
          "content": "CSS Modules CSS Modules allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules Inside /app/ui, create a new file called home module css and add the following CSS rules: /app/ui/home module css",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_7"
        },
        {
          "content": "shape { height: 0; width: 0; border-bottom: 30px solid black; border-left: 20px solid transparent; border-right: 20px solid transparent; } Then, inside your /app/page tsx file import the styles and replace the Tailwind class names from the div you've added with styles shape: /app/page tsximport AcmeLogo from '/app/ui/acme-logo'; import { ArrowRightIcon } from 'heroicons/react/24/outline'; import Link from 'next/link'; import styles from '/app/ui/home module",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_8"
        },
        {
          "content": "css'; export default function Page() { return ( main className=\"flex min-h-screen flex-col p-6\" div className={styles shape} / // ) } Save your changes and preview them in the browser You should see the same shape as before Tailwind and CSS modules are the two most common ways of styling Next js applications Whether you use one or the other is a matter of preference - you can even use both in the same application",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_9"
        },
        {
          "content": "Using the clsx library to toggle class names There may be cases where you may need to conditionally style an element based on state or some other condition clsx is a library that lets you toggle class names easily We recommend taking a look at documentation for more details, but here's the basic usage: Suppose that you want to create an InvoiceStatus component which accepts status The status can be 'pending' or 'paid' If it's 'paid', you want the color to be green",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_10"
        },
        {
          "content": "If it's 'pending', you want the color to be gray You can use clsx to conditionally apply the classes, like this: /app/ui/invoices/status tsximport clsx from 'clsx'; export default function InvoiceStatus({ status }: { status: string }) { return ( span className={clsx( 'inline-flex items-center rounded-full px-2 py-1 text-sm', { 'bg-gray-100 text-gray-500': status === 'pending', 'bg-green-500 text-white': status === 'paid', }, )}  //",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_11"
        },
        {
          "content": ")} Other styling solutions In addition to the approaches we've discussed, you can also style your Next js application with: Sass which allows you to import css and scss files CSS-in-JS libraries such as styled-jsx, styled-components, and emotion Take a look at the CSS documentation for more information 2You've Completed Chapter 2Well done You've learned about the different ways of styling a Next js application",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_12"
        },
        {
          "content": "Next Up3: Optimizing Fonts and ImagesContinue working on your home page by adding a hero image and a custom font Start Chapter 3Was this helpful supported Send",
          "url": "https://nextjs.org/learn/dashboard-app/css-styling#global-styles",
          "library": "nextjs",
          "chunk_id": "nextjs_13"
        }
      ],
      "library": "nextjs"
    }
  ],
  "scraped_at": 9170.176278041
}